// SELECTORS

@function last-sels() {
  $sel: &; $out: ();
  @each $list in $sel {
    $curr: nth($list, length($list));
    @if not index($out, $curr) {
      $out: append($out, $curr, 'comma');
    }
  }
  @return $out;
}

@function initial-sels() {
  $sel: &; $out: ();
  @each $list in $sel {
    $curr: slice($list, 1,  length($list) - 1);
    @if not index($out, $curr) {
      $out: append($out, $curr, 'comma');
    }
  }
  @return $out;
}

@function sibling-to($siblings, $op: '~'){
  $initials: initial-sels();
  $lasts: last-sels();
  $out: '';
  @for $i from 1 through length($initials) {
    @for $s from 1 through length($siblings) {
      @for $l from 1 through length($lasts) {
        $out: if(
          ($i $s $l) == (1 1 1),
          '#{nth($initials, $i)} #{nth($siblings, $s)} #{$op} #{nth($lasts, $l)}',
          $out + ', #{nth($initials, $i)} #{nth($siblings, $s)} #{$op} #{nth($lasts, $l)}'
        );
      }
    }
  }
  @return $out;
}

@mixin sibling-to($args...) {
  @at-root #{unquote(sibling-to($args...))} {
    @content;
  }
}

@mixin adjacent-to($siblings) {
  @at-root #{unquote(sibling-to($siblings, '+'))} {
    @content;
  }
}


// OLDER

// child [helper]
@function child($selector) {
  @if $selector {
    @if str-index($selector, '&'){
      @return '#{$selector}';
    } @else {
      @return '& > #{$selector}';
    }
  } @else {
    @return '& > *';
  }
}

// children
@function children($selectors...) {
  @if length($selectors) == 0 { @return unquote('& > *'); }
  @else {
    @if type-of(nth($selectors, 1)) == list { $selectors: join((), $selectors...); }
    $out: ''; @for $n from 1 through length($selectors) {
      $out: if($n == 1, unquote('#{child(nth($selectors, 1))}'), append($out, unquote(', #{child(nth($selectors, $n))}')));
    }
    @return unquote('#{$out}');
  }
}
// mixin version of above
@mixin children($args...) { #{children($args...)} { @content; } }

// adjacent-siblings (all combinations)
@function adjacent-siblings($pre, $pro: '&') {
  $out: '';
  @for $k from 1 through length($pro) {
    @for $n from 1 through length($pre) {
      $out: if(
        $n == 1 and $k == 1,
        unquote('#{nth($pre, $n)} + #{nth($pro, $k)}'),
        append($out, unquote(', #{nth($pre,$n)} + #{nth($pro, $k)}'))
      );
    }
  }
  @return '#{$out}';
}
// mixin version of above
@mixin adjacent-siblings($args...) { #{adjacent-siblings($args...)} { @content; } }

// general-siblings (all combinations)
@function general-siblings($pre, $pro: '&') {
  $out: '';
  @for $k from 1 through length($pro) {
    @for $n from 1 through length($pre) {
      $out: if(
        $n == 1 and $k == 1,
        unquote('#{nth($pre, $n)} ~ #{nth($pro, $k)}'),
        append($out, unquote(', #{nth($pre,$n)} ~ #{nth($pro, $k)}'))
      );
    }
  }
  @return '#{$out}';
}
// mixin version of above
@mixin general-siblings($args...) { #{general-siblings($args...)} { @content; } }
