/// Parses a JSON encoded array
/// @param {String} $source - JSON complete source
/// @param {Number} $pointer - current pointer
/// @throw Unexpected comma in array literal.
/// @throw Missing comma in array literal.
/// @throw Unterminated array literal.
/// @return {List} (new pointer, parsed list)
/// @require {function} _throw
/// @require {function} _json-decode--value
@function _json-decode--list($source, $pointer) {
  $length: str-length($source);
  $list: ();
  $needs-comma: false;

  @if $pointer <= $length and str-slice($source, $pointer, $pointer) == "]" {
    @return ($pointer + 1, $list);
  }

  @while $pointer <= $length {
    $token: str-slice($source, $pointer, $pointer);

    @if $token == "]" {
      @if not $needs-comma and length($list) != 0 {
        @return _throw("Unexpected comma in array literal.", $pointer);
      }

      // Do it the Sass way and destruct a single item array to an element.
      @return ($pointer + 1, if(length($list) == 1, nth($list, 1), $list));
    } @else if $token == " " or $token == "	" {
      $pointer: $pointer + 1;
    } @else if $token == "," {
      @if not $needs-comma {
        @return _throw("Unexpected comma in array literal.", $pointer);
      }

      $needs-comma: false;
      $pointer: $pointer + 1;
    } @else {
      @if $needs-comma {
        @return _throw("Missing comma in array literal.", $pointer);
      }

      $read: _json-decode--value($source, $pointer);
      $pointer: nth($read, 1);
      $list: append($list, nth($read, 2));
      $needs-comma: true;
    }
  }

  @return _throw("Unterminated array literal.", $pointer);
}
