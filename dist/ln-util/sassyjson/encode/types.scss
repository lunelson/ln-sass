/// Encode a bool to JSON
/// @access private
/// @param {Bool} $bool - bool to be encoded
/// @return {Bool} - encoded bool
@function _json-encode--bool($boolean) {
  @return $boolean;
}
/// Encode a color to JSON
/// @access private
/// @param {Color} $color - color to be encoded
/// @return {String} - encoded color
/// @require {function} _proof-quote
@function _json-encode--color($color) {
  @return _proof-quote($color);
}
/// Encode a list to JSON
/// @access private
/// @param {List} $list - list to be encoded
/// @return {String} - encoded list
/// @require {function} json-encore
@function _json-encode--list($list) {
  $str: "";

  @each $item in $list {
    $str: $str + ', ' + json-encode($item);
  }

  @return '[' + str-slice($str, 3) + ']';
}
/// Encode a map to JSON
/// @access private
/// @param {Map} $map - map to be encoded
/// @return {String} - encoded map
/// @require {function} _proof-quote
/// @require {function} json-encode
@function _json-encode--map($map) {
  $str: "";

  @each $key, $value in $map {
    $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);
  }

  @return '{' + str-slice($str, 3) + '}';
}
/// Encode `null` to JSON
/// @access private
/// @param {Null} $null - `null`
/// @return {String}
@function _json-encode--null($null) {
  @return "null";
}
/// Encode a number to JSON
/// @access private
/// @param {Number} $number - number to be encoded
/// @return {String} - encoded number
/// @require {function} _proof-quote
@function _json-encode--number($number) {
  @return if(unitless($number), $number, _proof-quote($number));
}
/// Encode a string to JSON
/// @access private
/// @param {String} $string - string to be encoded
/// @return {String} - encoded string
/// @require {function} _proof-quote
@function _json-encode--string($string) {
  @return _proof-quote($string);
}
