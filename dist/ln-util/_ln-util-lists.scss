//  _ _     _
// | (_)   | |
// | |_ ___| |_ ___
// | | / __| __/ __|
// | | \__ \ |_\__ \
// |_|_|___/\__|___/

// fault-tolerant version of nth
// @function _nth($list, $n) {
//   @if $list == () or $n < 1 or $n > length($list) { @return null; }
//   @return nth($list, $n);
// }

// list versions of other built-ins
@function list-max($list) { @return max($list...); }
@function list-min($list) { @return min($list...); }

// convert a list to space-separated values
@function ssv($list) {
  $output: ();
  @each $item in $list {
    $output: append($output, $item, 'space');
  }
  @return $output;
}

// convert a list to comma-separated values
@function csv($list) {
  $output: ();
  @each $item in $list {
    $output: append($output, $item, 'comma');
  }
  @return $output;
}

// new version uses ZIP
@function csv-alt($list) {
  @return zip($list);
}

@function remove($list, $tests...) {
  $out:(); $sep: list-separator($list);
  @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
    @if not index($tests, $item) { $out: append($out, $item, $sep); } }
  @return $out;
}

@function reduce($list) { @return remove($list, null, false, ''); }
@function compact($list) { @return remove($list, null, false, ''); }

@function reject($list, $item) { // same as compass reject() function
  $out:();
  @each $arg in $list { @if $arg != $item { $out: append($out, $arg); } }
  @return if($out == (), empty, $out); }
  @function except($args...) { @return reject($args...); }

// collect and reject by type comparison
@function collect-by-type($list, $type) {
  $out: ();
  @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
      @if type_of($item) == $type {
          $out: append($out, $item);
      }
  }
  @return if(length($out) == 1, nth($out, 1), $out);
}

@function reject-by-type($list, $type) {
  @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
      @if type_of($item) == $type {
          $list: reject($list, $item);
      }
  }
  @return if(length($list) == 1, nth($list, 1), $list);
}

// shortcuts for above
@function collect-strings($list) { @return collect-by-type($list, 'string'); }
@function reject-strings($list) { @return reject-by-type($list, 'string'); }
@function collect-numbers($list) { @return collect-by-type($list, 'number'); }
@function reject-numbers($list) { @return reject-by-type($list, 'number'); }
@function collect-bools($list) { @return collect-by-type($list, 'bool'); }
@function reject-bools($list) { @return reject-by-type($list, 'bool'); }

@function contains($list, $item) {
  @if index($list, $item) { @return true; }
  @return false;
}

@function contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }
  @return false;
}

@function slice($list, $start: 1, $end: length($list), $sep: list-separator($list)) {
  $output: ();
  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i), $sep);
    }
  }
  @return $output;
}

// a more fault-tolerant nth() function. libsass throws more errors for nth
@function _nth($list, $n) {
  @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
  @return nth($list, $n);
}
