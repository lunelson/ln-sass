
// LAYOUT PAGE INIT

@mixin setup-page() {

  // merge defaults
  $base: map-merge((
    margin-x: 1rem,
    margin-y: 1.5rem,
    page-top: 1.5rem,
    page-right: 1rem,
    page-bottom: 1.5rem,
    page-left: 1rem
  ), if(variable-exists('base'), $base, ()));

  // get values
  $margin-x: map-get($base, 'margin-x');
  $margin-y: map-get($base, 'margin-y');
  $page-top: map-get($base, 'page-top');
  $page-right: map-get($base, 'page-right');
  $page-bottom: map-get($base, 'page-bottom');
  $page-left: map-get($base, 'page-left');

  // get classes
  $page: map-get($layout-classes, 'page');
  $wrap: map-get($layout-classes, 'wrap');

  // do clearfix on all
  .cf,
  .#{$wrap},
  [class*="#{$wrap}--"],
  [class*="#{$page}--"] {
    @include clearfix();
  }

  // base page
  .#{$page}--top { padding-top: $page-top; }
  .#{$page}--right { padding-right: $page-right; }
  .#{$page}--bottom { padding-bottom: $page-bottom; }
  .#{$page}--left { padding-left: $page-left; }
  .#{$page}--x { padding-left: $page-left; padding-right: $page-right; }
  .#{$page}--y { padding-top: $page-top; padding-bottom: $page-bottom; }
  .#{$page}--h { @extend .#{$page}--x; }
  .#{$page}--v { @extend .#{$page}--y; }

  // base wrap
  .#{$wrap}, [class*="#{$wrap}--"] {
    @if $layout-alignment != left { margin-left: auto; }
    @if $layout-alignment != right { margin-right: auto; }
  }
  .#{$wrap}--left { margin-left: 0; }
  .#{$wrap}--right { margin-right: 0; }

  @if variable-exists('media') {

    @each $alias, $medium in $media {
      $margin-x: map-get($medium, 'margin-x');
      $margin-y: map-get($medium, 'margin-y');
      $page-top: map-get($medium, 'page-top');
      $page-right: map-get($medium, 'page-right');
      $page-bottom: map-get($medium, 'page-bottom');
      $page-left: map-get($medium, 'page-left');

      @include medium($alias) {

        $orig: medium-orig();

        // page
        .#{$page}--top { @if map-has-key($orig, 'page-top') { padding-top: $page-top; } }
        .#{$page}--right { @if map-has-key($orig, 'page-right') { padding-right: $page-right; } }
        .#{$page}--bottom { @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; } }
        .#{$page}--left { @if map-has-key($orig, 'page-left') { padding-left: $page-left; } }
        .#{$page}--x {
          @if map-has-key($orig, 'page-left') { padding-left: $page-left; }
          @if map-has-key($orig, 'page-right') { padding-right: $page-right; }
        }
        .#{$page}--y {
          @if map-has-key($orig, 'page-top') { padding-top: $page-top; }
          @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; }
        }

        // wrap
        $media-keys: map-keys($media);
        $wrap-fr: (); $wrap-fr-string: 'from-'; $wrap-fr-keys: slice($media-keys, 1, index($media-keys, $alias));
        $wrap-to: (); $wrap-to-string: 'to-'; $wrap-to-keys: slice($media-keys, index($media-keys, $alias) + 1, length($media-keys));
        $wrap-frto: (); $wrap-frto-string: 'fromTo-';

        @each $fromKey in $wrap-fr-keys {
          @each $toKey in $wrap-to-keys {
            @if $fromKey != $toKey {
              $wrap-frto: append($wrap-frto, unquote('\a.#{$wrap}--#{$wrap-frto-string}#{$fromKey}-#{$toKey}'), 'comma');
            }
          }
        }

        @each $fromKey in $wrap-fr-keys {
          $wrap-fr: append($wrap-fr, unquote('\a.#{$wrap}--#{$wrap-fr-string}#{$fromKey}'), 'comma');
        }

        @each $toKey in $wrap-to-keys {
          $wrap-to: append($wrap-to, unquote('\a.#{$wrap}--#{$wrap-to-string}#{$toKey}'), 'comma');
        }

        .#{$wrap}--each,
        .#{$wrap}--#{$alias},
        #{$wrap-frto}, #{$wrap-fr}, #{$wrap-to} {
          max-width: medium-value('content-width');
        }
      }
    }
  }
}

// MIXINS

// PAGE

// page
@mixin page($suffix){
  @extend .page--#{$suffix};
}

// wrap
@mixin wrap($width){
  @if type-of($width) == 'string' {
    @extend .wrap--#{$width};
  } @else {
    @extend .wrap; max-width: $width;
  }
}
