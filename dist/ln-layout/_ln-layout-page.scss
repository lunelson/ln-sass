
// LAYOUT PAGE INIT

@mixin setup-page() {

  // merge defaults
  $base: map-merge((
    margin-x: 1rem,
    margin-y: 1.5rem,
    page-top: 1.5rem,
    page-right: 1rem,
    page-bottom: 1.5rem,
    page-left: 1rem
  ), if(variable-exists('base'), $base, ()));

  // get values
  $margin-x: map-get($base, 'margin-x');
  $margin-y: map-get($base, 'margin-y');
  $page-top: map-get($base, 'page-top');
  $page-right: map-get($base, 'page-right');
  $page-bottom: map-get($base, 'page-bottom');
  $page-left: map-get($base, 'page-left');

  // get classes
  $page: map-get($layout-classes, 'page');
  $wrap: map-get($layout-classes, 'wrap');
  $unwrap: map-get($layout-classes, 'unwrap');
  $unpage: map-get($layout-classes, 'unpage');

  // do clearfix on all
  .cf,
  .#{$wrap},
  [class*="#{$wrap}--"],
  [class*="#{$page}--"] {
    @include clearfix();
  }

  // base page
  .#{$page}--top { padding-top: $page-top; }
  .#{$page}--right { padding-right: $page-right; }
  .#{$page}--bottom { padding-bottom: $page-bottom; }
  .#{$page}--left { padding-left: $page-left; }
  .#{$page}--x { padding-left: $page-left; padding-right: $page-right; }
  .#{$page}--y { padding-top: $page-top; padding-bottom: $page-bottom; }
  .#{$page}--h { @extend .#{$page}--x; }
  .#{$page}--v { @extend .#{$page}--y; }

  // base wrap
  .#{$wrap}, [class*="#{$wrap}--"] {
    @if $layout-alignment != left { margin-left: auto; }
    @if $layout-alignment != right { margin-right: auto; }
  }
  .#{$wrap}--left { margin-left: 0; }
  .#{$wrap}--right { margin-right: 0; }

  $page-inset: calc(#{$page-right} + #{$page-left});
  $page-offset: calc(#{$page-right} - #{$page-left});

  .#{$unwrap} {
    $unwrap-width: calc-sub(100vw, #{$page-inset});
    $unwrap-margin: calc-sub(100%, $unwrap-width);
    $unwrap-margin-oneside: calc-div($unwrap-margin, 2);
    $unwrap-width-oneside: calc-add($unwrap-width, $unwrap-margin-oneside);

    margin-right: 0;
    margin-left: 0;
    width: $unwrap-width;

    &--right, &--left { width: $unwrap-width-oneside; }
    &, &--left { margin-left: $unwrap-margin-oneside; }
    &, &--right { margin-right: $unwrap-margin-oneside; }

    .#{$wrap}--right > & {
      &, &--right, &--left { margin-right: 0; }
      &--right { width: 100%; }
      &, &--left { width: $unwrap-width; margin-left: $unwrap-margin; }
    }
    .#{$wrap}--left > & {
      &, &--right, &--left { margin-left: 0; }
      &, &--right { width: $unwrap-width; margin-right: $unwrap-margin; }
      &--left { width: 100%; }
    }
  }

  .#{$unpage} {
    $unpage-width: 100vw;
    $unpage-margin: calc-sub(100%, $unpage-width);
    $unpage-margin-right: calc-sub($unpage-margin, $page-offset);
    $unpage-margin-left: calc-add($unpage-margin, $page-offset);
    $unpage-width-right: calc-add($unpage-width, calc-div($unpage-margin-left, 2));
    $unpage-width-left: calc-add($unpage-width, calc-div($unpage-margin-right, 2));

    margin-right: 0;
    margin-left: 0;
    width: $unpage-width;

    &--right { width: $unpage-width-right;}
    &--left { width: $unpage-width-left;}
    &, &--right { margin-right: calc-div($unpage-margin-right, 2); }
    &, &--left { margin-left: calc-div($unpage-margin-left, 2); }

    .wrap--left > & {
      margin-right: calc-add($unpage-margin, $page-left);
      margin-left: - $page-left;
      &--right {
        width: calc-sub($unpage-width, $page-left);
        margin-right: calc-add($unpage-margin, $page-left);
        margin-left: 0;
      }
      &--left {
        width: calc-add(100%, $page-left);
        margin-right: 0;
        margin-left: - $page-left;
      }
    }
    .wrap--right > & {
      margin-right: - $page-right;
      margin-left: calc-add($unpage-margin, $page-right);
      &--right {
        width: calc-add(100%, $page-right);
        margin-right: - $page-right;
        margin-left: 0;
      }
      &--left {
        width: calc-sub($unpage-width, $page-right);
        margin-left: calc-add($unpage-margin, $page-right);
        margin-right: 0;
      }
    }
  }

  @if variable-exists('media') {

    @each $alias, $medium in $media {
      $margin-x: map-get($medium, 'margin-x');
      $margin-y: map-get($medium, 'margin-y');
      $page-top: map-get($medium, 'page-top');
      $page-right: map-get($medium, 'page-right');
      $page-bottom: map-get($medium, 'page-bottom');
      $page-left: map-get($medium, 'page-left');

      @include medium($alias) {

        $orig: medium-orig();

        // page
        .#{$page}--top { @if map-has-key($orig, 'page-top') { padding-top: $page-top; } }
        .#{$page}--right { @if map-has-key($orig, 'page-right') { padding-right: $page-right; } }
        .#{$page}--bottom { @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; } }
        .#{$page}--left { @if map-has-key($orig, 'page-left') { padding-left: $page-left; } }
        .#{$page}--x {
          @if map-has-key($orig, 'page-left') { padding-left: $page-left; }
          @if map-has-key($orig, 'page-right') { padding-right: $page-right; }
        }
        .#{$page}--y {
          @if map-has-key($orig, 'page-top') { padding-top: $page-top; }
          @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; }
        }

        // wrap
        $media-keys: map-keys($media);
        // $wrap-from-string: map-get($layout-wrap-strings, 'from');
        $wrap-from-keys: slice($media-keys, 1, index($media-keys, $alias));
        // $wrap-to-string: map-get($layout-wrap-strings, 'to');
        $wrap-to-keys: slice($media-keys, index($media-keys, $alias), length($media-keys));
        $wrap-from: ();
        $wrap-to: ();
        $wrap-fromTo: ();
        // $wrap-fromTo-string: map-get($layout-wrap-strings, 'fromTo');

        // wrap--fromTo
        @each $fromKey in $wrap-from-keys {
          @each $toKey in $wrap-to-keys {
            @if $fromKey != $toKey {
              $wrap-fromTo: append($wrap-fromTo, unquote('\a.#{$wrap}--#{$fromKey}-to-#{$toKey}'), 'comma');
            }
          }
        }

        // wrap--from
        @each $fromKey in $wrap-from-keys {
          $wrap-from: append($wrap-from, unquote('\a.#{$wrap}--#{$fromKey}-to'), 'comma');
        }

        // wrap--to
        @each $toKey in $wrap-to-keys {
          $wrap-to: append($wrap-to, unquote('\a.#{$wrap}-to-#{$toKey}'), 'comma');
        }

        .#{$wrap}--each,
        .#{$wrap}--#{$alias},
        #{$wrap-fromTo}, #{$wrap-from}, #{$wrap-to} {
          max-width: medium-value('content-width');
        }

        @if map-has-key($orig, 'page-right') or map-has-key($orig, 'page-left') {
          $page-inset: calc(#{$page-right} + #{$page-left});
          $page-offset: calc(#{$page-right} - #{$page-left});

          .#{$unwrap} {
            $unwrap-width: calc-sub(100vw, #{$page-inset});
            $unwrap-margin: calc-sub(100%, $unwrap-width);
            $unwrap-margin-oneside: calc-div($unwrap-margin, 2);
            $unwrap-width-oneside: calc-add($unwrap-width, $unwrap-margin-oneside);

            margin-right: 0;
            margin-left: 0;
            width: $unwrap-width;

            &--right, &--left { width: $unwrap-width-oneside; }
            &, &--left { margin-left: $unwrap-margin-oneside; }
            &, &--right { margin-right: $unwrap-margin-oneside; }

            .#{$wrap}--right > & {
              &, &--right, &--left { margin-right: 0; }
              &--right { width: 100%; }
              &, &--left { width: $unwrap-width; margin-left: $unwrap-margin; }
            }
            .#{$wrap}--left > & {
              &, &--right, &--left { margin-left: 0; }
              &, &--right { width: $unwrap-width; margin-right: $unwrap-margin; }
              &--left { width: 100%; }
            }
          }

          .#{$unpage} {
            $unpage-width: 100vw;
            $unpage-margin: calc-sub(100%, $unpage-width);
            $unpage-margin-right: calc-sub($unpage-margin, $page-offset);
            $unpage-margin-left: calc-add($unpage-margin, $page-offset);
            $unpage-width-right: calc-add($unpage-width, calc-div($unpage-margin-left, 2));
            $unpage-width-left: calc-add($unpage-width, calc-div($unpage-margin-right, 2));

            margin-right: 0;
            margin-left: 0;
            width: $unpage-width;

            &--right { width: $unpage-width-right;}
            &--left { width: $unpage-width-left;}
            &, &--right { margin-right: calc-div($unpage-margin-right, 2); }
            &, &--left { margin-left: calc-div($unpage-margin-left, 2); }

            .wrap--left > & {
              margin-right: calc-add($unpage-margin, $page-left);
              margin-left: - $page-left;
              &--right {
                width: calc-sub($unpage-width, $page-left);
                margin-right: calc-add($unpage-margin, $page-left);
                margin-left: 0;
              }
              &--left {
                width: calc-add(100%, $page-left);
                margin-right: 0;
                margin-left: - $page-left;
              }
            }
            .wrap--right > & {
              margin-right: - $page-right;
              margin-left: calc-add($unpage-margin, $page-right);
              &--right {
                width: calc-add(100%, $page-right);
                margin-right: - $page-right;
                margin-left: 0;
              }
              &--left {
                width: calc-sub($unpage-width, $page-right);
                margin-left: calc-add($unpage-margin, $page-right);
                margin-right: 0;
              }
            }
          }

        }
      }
    }
  }
}

// MIXINS

// PAGE

// page
@mixin page($suffix){
  @extend .page--#{$suffix};
}

// wrap
@mixin wrap($width){
  @if type-of($width) == 'string' {
    @extend .#{$wrap}--#{$width};
  } @else {
    @extend .wrap; max-width: $width;
  }
}
