// GRID INIT
$grid-curr-margin: null !default;

// GRID MIXINS

// grid
@mixin grid($margin: null, $columns: null) {
  @if $columns { &::before { content: '#{$columns} .#{map-get($layout-classes, 'cell')}'; } }
  @extend %#{map-get($layout-classes, 'grid')};
  @if $margin {
    @include media((for: margin-x)) {
      width: calc(100% + #{margin-x($margin)});
      margin-left: margin-x($margin) / -2;
      margin-right: margin-x($margin) / -2;
    }
    $grid-prev-margin: $grid-curr-margin;
    $grid-curr-margin: $margin !global;
    @at-root { @content; }
    $grid-curr-margin: $grid-prev-margin !global;
  }
}

// cell beta
// @mixin cell($span: null, $margin: $grid-curr-margin) {
//   @if type-of($span) == 'map' { @include cell($span...); }
//   @extend %#{map-get($layout-classes, 'cell')};
//   @if $margin {
//     @include media((for: margin-x)) {
//       padding-left: margin-x($margin) / 2;
//       padding-right: margin-x($margin) / 2;
//     }
//   }
//   @if length($span) > 0 { @include span($span...); }
// }

// cell
@mixin cell($margin: $grid-curr-margin, $span...) {
  @if not $media-curr-alias { @extend %#{map-get($layout-classes, 'cell')}; }
  @if $margin {
    @include media((for: margin-x)) {
      padding-left: margin-x($margin) / 2;
      padding-right: margin-x($margin) / 2;
    }
  }
  @if length($span) > 0 { @include span($span...); }
}

// span
@mixin span($span: 1 1, $options: ()) { @include span-helper(map-merge((span: $span), $options)...); }
@mixin span-helper($span, $right: null, $left: null, $out: null, $cycle: null) {
  $n: nth($span, 1); $d: nth($span, 2);

  width: $n / $d * 100%;

  @if $right { margin-right: nth($right, 1) / if(length($right) > 1, nth($right, 2), $d) * 100%; }
  @if $left { margin-left: nth($left, 1) / if(length($left) > 1, nth($left, 2), $d) * 100%; }
  @if $cycle { &:nth-child(#{$cycle}n+1) { clear: left; } }
  @else if $out { position: absolute; #{opposite($out)}: 100%; top: auto; }
}

// fspan
@mixin fspan($n, $d: 1){
  @if type-of($n) == list {
    $list: $n;
    $n: nth($list, 1);
    $d: nth($list, 2);
  }
  width: $n / $d * 100%;
}

//////////
// SPAN //
//////////

@function gcd($a, $b) {
  @if $b == 0 { @return abs($a); }
  @return gcd($b, $a % $b);
}

@function reduce($n, $d) {
  $g: gcd($n, $d);
  @return ($n/$g, $d/$g)
}

@mixin setup-grid($output: true) {

  // merge defaults
  $base: map-merge(( margin-x: 1rem, ), if(variable-exists('base'), $base, ()));
  // get values and classes
  $margin-x: map-get($base, 'margin-x');
  // $margin-x: margin-x(); // don't assume media is setup
  $grid: map-get($layout-classes, 'grid');
  $cell: map-get($layout-classes, 'cell');
  $fgrid: map-get($layout-classes, 'fgrid');
  $fcell: map-get($layout-classes, 'fcell');

  // grid
  %#{$fgrid}, %#{$grid} {
    margin-left: $margin-x / -2;
    margin-right: $margin-x / -2;
    width: calc(100% + #{$margin-x}); // necessary?
  }
  %#{$fgrid} { display: flex; }
  %#{$grid} {
    &:before { display: none; } // in case of salvattore
    position: relative; // for 'out' positioned cells which are absolute
    @if $grid-is-float {
      @include clearfix();
    } @else {
      font-size: 0rem;
      & > * { font-size: 1rem; direction: ltr; }
      // text-align: $grid-alignment;
      // direction: $grid-direction;
    }
  }

  // cell
  %#{$fcell}, %#{$cell} {
    padding-left: $margin-x / 2;
    padding-right: $margin-x / 2;
    background-clip: content-box;
  }
  %#{$fcell} { flex: 1 0 0%; } // explicit basis 0 unit for IE
  %#{$cell} {
    min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    font-size: 1rem;
    direction: ltr;
    @if $grid-is-float {
      display: block;
      float: $grid-alignment;
    } @else {
      width: 100%;
      display: inline-block;
      vertical-align: top;
    }
  }

  @if variable-exists('media') {
    @each $alias, $medium in $media {
      @if map-has-key(medium-orig($alias), 'margin-x') {
        @include media($alias) {
          $margin-x: margin-x();

          // grid
          %#{$fgrid}, %#{$grid} {
            margin-left: $margin-x / -2;
            margin-right: $margin-x / -2;
            width: calc(100% + #{$margin-x}); // necessary?
          }

          // cell
           %#{$fcell}, %#{$cell} {
            padding-left: $margin-x / 2;
            padding-right: $margin-x / 2;
          }
        }
      }
    }
  }

  @if $output {
    .#{$grid} { @extend %#{$grid}; }
    .#{$cell} { @extend %#{$cell}; }
    .#{$fgrid} { @extend %#{$fgrid}; }
    .#{$fgrid}--wrap { @extend %#{$fgrid}; flex-wrap: wrap; }
    .#{$fcell} { @extend %#{$fcell}; }

    @for $d from 1 through 12 {
      @for $n from 1 through $d {
        $gcd: gcd($n,$d); $r: $n/$gcd;
        .span--#{$n}-#{$d} {
          @if $r < $n { @extend .span--#{$r}-#{$d/$gcd}; }
          @else { width: $n/$d*100% !important; }
        }
      }
    }
  }
}

