@mixin clip { overflow: hidden !important; }

@mixin hide {
  display: none;
  visibility: hidden;
}

@mixin show($display: block) {
  display: $display;
  visibility: visible;
}

@mixin hold {
  position: relative;
  display: block;
  padding: 0;
}

@mixin flex($dir: row) {
  display: flex;
  @if index(y col column, $dir) {
    flex-direction: column;
    & > * {
      flex: 1 0 auto; // best for column direction
      max-width: 100%; // fix overflow in IE
      // overflow: hidden;
    }
  } @else {
    & > * {
      flex: 1 1 0%; // best for row
      // overflow: hidden;
    }
  }
}

@mixin abs-align($args...) {
  $args: if(type-of(nth($args, 1))=='list', nth($args, 1), $args);
  $x: if(index($args,  'right'), 100%, if(index($args, 'center'), 50%, 0%));
  $y: if(index($args, 'bottom'), 100%, if(index($args, 'middle'), 50%, 0%));
  left: $x; top: $y;
  transform: translate(-$x, -$y);
}

@mixin turn($dir: cw, $align: center) {
  white-space: nowrap;
  position: absolute;
  top: 50%;
  @if $dir == "ccw" {
    transform-origin: right top;
    @if $align == 'right' {
      right: 0;
      transform: rotate(-90deg) translateY(-100%) translateX(50%);
    } @else if $align == 'left' {
      right: 100%;
      transform: rotate(-90deg) translateX(50%);
    } @else {
      right: 50%;
      transform: rotate(-90deg) translateY(-50%) translateX(50%);
    }
  }
  @else {
    transform-origin: left top;
    @if $align == 'right' {
      left: 100%;
      transform: rotate(90deg) translateX(-50%);
    } @else if $align == 'left' {
      left: 0;
      transform: rotate(90deg) translateY(-100%) translateX(-50%);
    } @else {
      left: 50%;
      transform: rotate(90deg) translateY(-50%) translateX(-50%);
    }
  }
}

@mixin setup-layout-util {

  /////////////
  // iSCROLL //
  /////////////

  .iscroll {
    position: absolute;
    left: 0; top: 0;
    width: 100vw;
    margin-right: calc(100% - 100vw);
    height: 100vh;
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
  }

  //////////
  // CLIP //
  //////////

  .clip, %clip { @include clip; }
  .clip--circle { @extend %clip; border-radius: 50%; }

  //////////
  // HIDE //
  //////////

  .hide, %hide { @include hide; }

  //////////
  // SHOW //
  //////////

  .show, %show { @include show; }

  //////////
  // HOLD //
  //////////

  .hold, %hold, [class*="hold--"] { @include hold; }

  .hold--abs, %hold--abs {
    z-index: 0; // make sure container can clip
    & > *:not(picture),
    & > picture > img {
      z-index: 0; // make sure container can clip
      display: block;
      position: absolute;
      width: 100%;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
    }
    & > iframe {
      z-index: 0; // make sure container can clip
      top: 0;
      left: 0;
      height: 100%;
      transform: none;
    }
    // & > picture {
    //   width: 100% !important;
    //   height: 100% !important;
    //   // position: relative;
    // }
  }
  .hold--bg[data-bg-size='cover'] { background-size: cover; }
  .hold--bg[data-bg-size='contain'] { background-size: contain; }

  .hold--cover {
    @extend %hold--abs;
    overflow: hidden;
    & > *:not(picture),
    & > picture > img {
      width: auto !important;
      height: auto !important;
      min-width: calc(100% + 2px);
      min-height: calc(100% + 2px);
      max-width: none;
      max-height: none;
    }
    // &--tall, &--wide { @extend .hold--cover; }
    // &--tall {
    //   & > *:not(picture),
    //   & > picture > img {
    //     height: 100%;
    //   }
    // }
    // &--wide {
    //   & > *:not(picture),
    //   & > picture > img {
    //     width: 100%;
    //   }
    // }
  }
  .hold--contain {
    @extend %hold--abs;
    & > *:not(picture),
    & > picture > img {
      width: auto !important;
      height: auto !important;
      min-width: none;
      min-height: none;
      max-width: 100%;
      max-height: 100%;
    }
    // &--tall, &--wide { @extend .hold--contain; }
    // &--tall {
    //   & > *:not(picture),
    //   & > picture > img {
    //     width: 100%;
    //   }
    // }
    // &--wide {
    //   & > *:not(picture),
    //   & > picture > img {
    //     height: 100%;
    //   }
    // }
  }

  //////////
  // FLEX //
  //////////
  /// NB flex-basis is buggy cross browser; better use 'auto' and set 'width' instead
  /// NB flex-shrink is buggy cross browser; better avoid and keep at 0

  .flex, .flex-x, %flex {
    @include flex();
  }

  .flex-y, %flex-y {
    @include flex(y);
  }

  [class*='flex--'] {
    @extend %flex;
    &:before {
      content: '';
      display: table; // non-inline display req'd for IE; block fails in FF
      flex: 0 0 0%; // explicit 0 basis unit req'd for IE
    }
  }

  /////////////
  // aspects //
  /////////////

  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );

  @each $n, $denoms in $aspects {
    @each $d in $denoms {

      $gcd: gcd($n,$d);
      $r: $n/$gcd;

      .flex--#{$n}-#{$d} {
        @if $r < $n { @extend .flex--#{$r}-#{$d/$gcd}; }
        @else { &:before { padding-bottom: $d/$n * 100%; } }
      }

      .hold--#{$n}-#{$d} {
        @if $r < $n { @extend .hold--#{$r}-#{$d/$gcd}; }
        @else { padding-bottom: $d/$n * 100%; }
      }
    }
  }

  //////////
  // TURN //
  //////////

  .turn, [class*='turn--'] {
    white-space: pre;
    position: absolute;
    top: 50%;
  }
  .turn, .turn--cw {
    transform-origin: left top;
    &.alignleft {
      left: 0;
      transform: rotate(90deg) translateY(-100%) translateX(-50%);
    }
    &.aligncenter {
      left: 50%;
      transform: rotate(90deg) translateY(-50%) translateX(-50%);
    }
    &.alignright {
      left: 100%;
      transform: rotate(90deg) translateX(-50%);
    }
  }
  .turn--ccw {
    transform-origin: right top;
    &.alignleft {
      right: 100%;
      transform: rotate(-90deg) translateX(50%);
    }
    &.aligncenter {
      right: 50%;
      transform: rotate(-90deg) translateY(-50%) translateX(50%);
    }
    &.alignright {
      right: 0;
      transform: rotate(-90deg) translateY(-100%) translateX(50%);
    }
  }
}

/////////////
// Z-INDEX //
/////////////

$z-indexes: (
  baked: 30,
  stoned: 20,
  buzzed: 10,
  sober: 0,
  asleep: -10
) !default;

@function z-index($name) { @return map-get($z-indexes, $name); }
@function z($name) { @return z-index($name); }

/////////////////
// POSITIONING //
/////////////////

@mixin position($pos, $args...) {
  position: $pos;
  @each $arg in $args { #{nth($arg, 1)}: nth($arg, 2); }
}

@mixin absolute($args...) { @include position(absolute, $args...); }
@mixin fixed($args...) { @include position(fixed, $args...); }
@mixin relative($args...) { @include position(relative, $args...); }

@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}
@mixin clearfix-legacy(){
  & { *zoom: 1; }
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
}


////////////////
// SUB-LAYOUT //
////////////////


@mixin child-layout($selectors, $type, $options...) {

  // contain and cover sizing
  @if index(contain cover, $type) {
    position: relative;
    @if $type == 'cover' { overflow: hidden; }
    #{children($selectors)} {
      position: absolute;
      top: 50%; left: 50%;
      width: auto; height: auto;
      transform: translate(-50%, -50%);
      @if $type == 'contain' {
        min-width: none; max-width: 100%;
        min-height: none; max-height: 100%;
      }
      @if $type == 'cover' {
        min-width: 100%; max-width: none;
        min-height: 100%; max-height: none;
      }
    }
  }

  // table
  @if index(table table-cell table-row cell row, $type) {
    width: 100%; // force auto size of children
    display: table;
    table-layout: fixed;
    border-collapse: collapse;
    #{children($selectors)} {
      @if index(table-row row, $type) {
        display: table-row;
        height: auto; // base setting
        @if index($options, left) { text-align: left; }
        @else if index($options, right) { text-align: right;}
        @else { text-align: center; }
      }
      @else {
        display: table-cell;
        width: auto; // base setting
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, top) { vertical-align: top;}
        @else { vertical-align: middle; }
      }
      overflow: hidden;
      @content;
    }
  }

  // inline-block
  @else if index(inline-block iblock ib, $type) {
    font-size: 0rem; // alternate: 0.5px for Opera?
    &::before, &::after, #{children($selectors)} {
      display: inline-block;
      @if index($options, bottom) { vertical-align: bottom; }
      @else if index($options, middle) { vertical-align: middle;}
      @else { vertical-align: top; }
    }
    @if index($options, justify) {
      text-align: justify;
      text-justify: distribute-all-lines; // for IE
      &::after { content: ''; width: 100%; }
    }
    @else {
      @if index($options, right) { text-align: right;}
      @else if index($options, center) or index($options, centre) { text-align: center; }
      @else { text-align: left; }
      &::before { content: ''; height: 100%; }
    }
    #{children($selectors)} { font-size: 1rem; max-width: 100%; @content; }
  }
}

// alias
@mixin sub-layout($args...) { @include child-layout($args...) { @content; } }