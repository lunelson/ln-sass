// TYPO INIT beta

$typo-inits: () !default;

@mixin typo-init($size: 0, $alias: null, $height: auto) {

  // get classes and values
  $line: map-get($typo-classes, 'line');
  $trim: map-get($typo-classes, 'trim');
  $trim-content: map-get($typo-classes, 'trim-content');
  $char-height: get($fonts, $alias, 'char-height') or 1;

  // normalize font-size; NB change the size() function
  $size: if(unitless($size), size($size), if(unit($size) == 'px', rem($size), $size));

  // normalize line-height
  @if $height == 'auto' {
    $sub-lines: $typo-sub-lines or ceil($size);
    $rel-height: medium-value('line-height') / unit-strip($size);
    $height: $rel-height * ceil($typo-min-height / $rel-height * $sub-lines) / $sub-lines;
  }

  // do first run container styles, if necessary
  @if length($typo-inits) == 0 { @at-root .#{$trim-content} { padding-top: 1px; padding-bottom: 1px; } }

  // calculate and hold element styles, if necesary
  $id: get($typo-inits, $size);
  @if not $id {

    // create and merge id to inits map
    $id: unique-id();
    $typo-inits: merge($typo-inits, $size, $id) !global;

    @at-root %#{$id} {

      font-size: $size;
      line-height: $height;
      margin-top: 0;
      margin-bottom: 0;

      // get trim value for effectively 0 margin
      $t-margin: t-margin(0rem, $height, $char-height);

      &.#{$line} { line-height: 1; }
      &.#{$trim}--top { margin-top: $t-margin; }
      &.#{$trim}--bottom { margin-bottom: $t-margin; }
      &.#{$trim} { margin-top: $t-margin; margin-bottom: $t-margin; }

      .#{$trim-content} & {
        margin-bottom: $t-margin;
        margin-top: margin();
        // QUESTION: does it make more sense to include this whole mixin
        // inside media((for: margin-y, font-size, line-height)) ?
        // @include media((for: 'margin-y')) { margin-top: margin(); }
        &:first-child { margin-top: $t-margin; }
      }
    }
  }

  @extend %#{$id};
  $typo-curr-font-size: $size !global;
  $typo-curr-line-height: $height !global;
  $typo-curr-char-height: $char-height !global;
  @content;
  $typo-curr-font-size: null !global;
  $typo-curr-line-height: null !global;
  $typo-curr-char-height: null !global;
}


///////////////
// FUNCTIONS //
///////////////

@function trim($line-height: null, $char-height: null){
  $line-height: $line-height or $typo-curr-line-height or medium-value('line-height');
  $char-height: $char-height or $typo-curr-char-height or 1;
  @return unit-assert($char-height - $line-height, em) / 2;
}

@function untrim($args...) { @return 0 - trim($args...); }

@function t-margin($margin, $line-height: null, $char-height: null){
  $margin: if(unitless($margin), margin-y($margin), $margin);
  @if unit-strip($margin) == 0 { @return trim($line-height, $char-height); }
  @return calc(#{$margin} + #{trim($line-height, $char-height)});
}