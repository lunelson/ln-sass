// TYPO main mixin, stable

/*
reset-hard()
  - meyer-style reset of all typographic block elements to size 1em and margins: 0, padding: 0

@mixin setup-typo($sizes)
  - take a list of six size arguments, for standard heading levels; assume %p is at 1/0
  - @include typo-item() for standard set of WYSIWYG elements
  - VARIANT setup-mod-typo() uses mod-typo-item() as described below

@mixin typo-child($size, $suffix)
  - output styles for '.typo > &' or '.typo--#{$suffix} > &'
  - also creates a scope: so that within nested elements (ul li, dl dd, etc.) further styling can be done
  - VARIANT mod-typo-item() outputs typo-item with mod-size arg, under media((for: font-size-mod)) {}

@mixin typo-scope($size, $alias, $height: null, $at-root: true) // NB height should be null for auto
  - usu. applied to a container
  - outputs font-size and line-height if other than current default
  - creates corresponding scope, outputs @content @at-root for child styles
  - VARIANT: mod-typo-scope() outputs typo-scope with mod-size arg, under media((for: font-size-mod)) {}

grid n cell mixins output if in media query?
width still needs a better name


typo(size, alias, line-height)

typo-styles

reset necessary
  - all typo elements line-height inherit
  - all typo elements margin top and bottom 0

*/

@mixin typo($size: 1, $alias: null, $height: auto){

  // normalize unit
  $size: rem($size);

  // normalize line-height
  @if $height == 'auto' {
    $sub-lines: $typo-sub-lines or ceil($size);
    $rel-height: medium-value('line-height') / unit-strip($size);
    $height: $rel-height * ceil($typo-min-height / $rel-height * $sub-lines) / $sub-lines;
  }

  // get char height
  $char-height: map-get(font($alias), 'char-height') or 1;

  font-size: $size;
  line-height: $height;
  margin-top: 0;
  margin-bottom: 0;

  // get classes and values
  // $line: map-get($trim-classes, 'line');
  // $content: map-get($trim-classes, 'content');
  // $t-margin: t-margin(0rem, $height, $char-height);

  // &.#{$line} { line-height: 1; }
  // &.trim--top { margin-top: $t-margin; }
  // &.trim--bottom { margin-bottom: $t-margin; }
  // &.trim--both { margin-top: $t-margin; margin-bottom: $t-margin; }

  // .trim--#{$content} > & {
  //   margin-bottom: $t-margin;
  //   margin-top: margin();
  //   // QUESTION: does it make more sense to include this whole mixin
  //   // inside media((for: margin-y, font-size, line-height)) ?
  //   // @include media((for: 'margin-y')) { margin-top: margin(); }
  //   &:first-child { margin-top: $t-margin; }
  // }

  // allow content to be added and refer to current size and height
  $typo-curr-font: $alias !global;
  $typo-curr-font-size: $size !global;
  $typo-curr-line-height: $height !global;
  $typo-curr-char-height: $char-height !global;
  @at-root { @content; }
  // @content;
  $typo-curr-font: null !global;
  $typo-curr-font-size: null !global;
  $typo-curr-line-height: null !global;
  $typo-curr-char-height: null !global;
}

@mixin mod-typo($mod, $rest...) { @include typo(mod-size($mod), $rest...); }
