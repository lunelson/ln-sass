@mixin grid-setup(){

  //////////
  // grid //
  //////////

  [class*='fgrid--'] { @extend .fgrid; }
  [class*='grid--'] { @extend .grid; }
  [class*='fcell--'] { @extend .fcell; }
  [class*='cell--'] { @extend .cell; }

  .fgrid { display: flex; }

  .grid {
    display: block;
    position: relative; // for 'out' positioned cells which are absolute
    font-size: 0rem;
    & > * { font-size: 1rem; direction: ltr; }
  }

  .fcell, .cell { background-clip: content-box; }

  .fcell {
    flex: 1 1 auto;
    min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
    width: 0%;
  }

  .cell {
    min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    font-size: 1rem;
    direction: ltr;
    width: 100%;
    display: inline-block;
    vertical-align: top;
  }

  @include media((for: margin-x mults-x)) {
    @each $m, $mult in map-merge((base: 1), mval('mults-x')) {
      $margin: $mult * mval('margin-x');
      .fgrid#{mod-class($m)}, .grid#{mod-class($m)} {
        margin-left: $margin / -2;
        margin-right: $margin / -2;
        width: calc(100% + #{$margin});
      }
       .fcell#{mod-class($m)}, .cell#{mod-class($m)} {
        padding-left: $margin / 2;
        padding-right: $margin / 2;
      }
    }
  }
}

@mixin page-setup(){

  /////////////
  // margins //
  /////////////

  @include media((for: margin-y mults-y)) {

    @each $m, $mult in map-merge((base: 1), mval('mults-y')) {
      $margin-y: $mult * mval('margin-y');
      .sect#{mod-class($m)} { @extend .my#{mod-class($m)}; }
      .my#{mod-class($m)} { @extend .mt#{mod-class($m)}, .mb#{mod-class($m)}; }
      .mt#{mod-class($m)} { margin-top: $margin-y; }
      .mb#{mod-class($m)} { margin-bottom: $margin-y; }
    }
  }

  @include media((for: margin-x mults-x)) {

    @each $m, $mult in map-merge((base: 1), mval('mults-x')) {
      $margin-x: $mult * mval('margin-x');
      .mx#{mod-class($m)} { @extend .mr#{mod-class($m)}, .ml#{mod-class($m)}; }
      .mr#{mod-class($m)} { margin-right: $margin-x; }
      .ml#{mod-class($m)} { margin-left: $margin-x; }
    }
  }

  //////////
  // wrap //
  //////////

  .wrap, [class*='wrap--'] { margin-right: auto; margin-left: auto; }
  .wrap--left { margin-left: 0; }
  .wrap--right { margin-right: 0; }

  $media-keys: map-keys($media);
  $media-length: length($media-keys);

  @for $n from 1 through $media-length {

    // create placeholders
    $m: nth($media-keys, $n);
    @include media($m) { %wrap--#{$m} { max-width: mval(content-width); } }

    .wrap--each { @extend %wrap--#{$m}; }
    @for $i from $n through 1 { .wrap--#{nth($media-keys, $i)}-thru {  @extend %wrap--#{$m}; } }
    @for $i from $n through $media-length { .wrap--thru-#{nth($media-keys, $i)} {  @extend %wrap--#{$m}; } }
  }

  @each $set in power-set($media-keys) {
    .wrap--#{to-string($set, '-')} {
      @each $m in $set { @extend %wrap--#{$m}; }
    }
  }

  @each $set in range-set($media-keys) {
    $i: nth($set,1);
    $j: nth($set,2);
    $set: slice($media-keys, $i, $j);
    .wrap--#{nth($media-keys, $i)}-thru-#{nth($media-keys, $j)} {
      @each $m in $set { @extend %wrap--#{$m}; }
    }
  }

  @include media((for: outer-top outer-bottom)) {

    ////////////
    // page-y //
    ////////////

    $outer-top: mval('outer-top');
    $outer-bottom: mval('outer-bottom');

    .page--y { @extend .page--top, .page--bottom; }
    .page--top { padding-top: $outer-top; }
    .page--bottom { padding-bottom: $outer-bottom; }

  }

  @include media((for: outer-right outer-left)) {

    // TODO: pontentially changes these to .spread and .unwrap respectively

    ////////////
    // page-x //
    ////////////

    $outer-right: mval('outer-right');
    $outer-left: mval('outer-left');

    .page { @extend .page--right, .page--left; @extend %clip; }
    .page--right { padding-right: $outer-right; }
    .page--left { padding-left: $outer-left; }

    ////////////
    // unpage //
    ////////////

    $page-offset: sub-calc($outer-right, $outer-left);
    $unpage-margin: sub-calc(100%, 100vw);
    $unpage-margin-right: div-calc(sub-calc($unpage-margin, $page-offset), 2);
    $unpage-margin-left: div-calc(add-calc($unpage-margin, $page-offset), 2);

    .unpage {
      margin-right: 0;
      margin-left: 0;
      max-width: none;
      width: 100vw;
      &--right { width: add-calc(100vw, $unpage-margin-left);}
      &--left { width: add-calc(100vw, $unpage-margin-right);}
      &, &--right { margin-right: $unpage-margin-right; }
      &, &--left { margin-left: $unpage-margin-left; }
    }

    .unpage--fromRight {
      &, &.unpage--right { margin-right: - $outer-right;}
      &, &.unpage--left { margin-left: add-calc($unpage-margin, $outer-right); }
      &.unpage--right {
        width: add-calc(100%, $outer-right);
        margin-left: 0;
      }
      &.unpage--left {
        width: sub-calc(100vw, $outer-right);
        margin-right: 0;
      }
    }

    .unpage--fromLeft {
      &, &.unpage--right { margin-right: add-calc($unpage-margin, $outer-left); }
      &, &.unpage--left { margin-left: - $outer-left; }
      &.unpage--right {
        width: sub-calc(100vw, $outer-left);
        margin-left: 0;
      }
      &.unpage--left {
        width: add-calc(100%, $outer-left);
        margin-right: 0;
      }
    }
  }

  /////////////
  // iscroll //
  /////////////

  .iscroll {
    position: absolute;
    left: 0; top: 0;
    width: 100vw;
    margin-right: calc(100% - 100vw);
    height: 100vh;
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
  }

  //////////
  // clip //
  //////////

  .clip, %clip { @include clip; }
  .clip--circle { @extend %clip; border-radius: 50%; }

  //////////
  // hide //
  //////////

  .hide, %hide { @include hide; }

  //////////
  // show //
  //////////

  .show, %show { @include show; }

  //////////
  // hold //
  //////////

  // TODO : resolve in terms of
  // hold--fit
  // hold--center
  // hold--cover
  //     object-fit
  // hold--contain
  //     object-fit

  .hold, %hold, [class*="hold--"] { position: relative; }

  .hold--abs {}
  .hold--cover {}
  .hold--contain {}
  .hold--aspect {
    height: 0;
    overflow: hidden;
    padding: 0 0 100%;
    &>img, &>svg, &>object, &>iframe, &>video, &>picture {
      display: block;
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      &:not(img) {
        height: 100%;
      }
    }
  }

  .hold--abs, %hold--abs {
    z-index: 0; // make sure container can clip
    & > *:not(picture),
    & > picture > img {
      z-index: 0; // make sure container can clip
      display: block;
      position: absolute;
      width: 100%;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
    }
    & > iframe {
      z-index: 0; // make sure container can clip
      top: 0;
      left: 0;
      height: 100%;
      transform: none;
    }
    // & > picture {
    //   width: 100% !important;
    //   height: 100% !important;
    //   // position: relative;
    // }
  }
  .hold--bg[data-bg-size='cover'] { background-size: cover; }
  .hold--bg[data-bg-size='contain'] { background-size: contain; }

  .hold--cover {
    @extend %hold--abs;
    overflow: hidden;
    & > *:not(picture),
    & > picture > img {
      width: auto !important;
      height: auto !important;
      min-width: calc(100% + 2px);
      min-height: calc(100% + 2px);
      max-width: none;
      max-height: none;
    }
  }
  .hold--contain {
    @extend %hold--abs;
    & > *:not(picture),
    & > picture > img {
      width: auto !important;
      height: auto !important;
      min-width: none;
      min-height: none;
      max-width: 100%;
      max-height: 100%;
    }
  }

  //////////
  // FLEX //
  //////////
  /// NB flex-basis is buggy cross browser; better use 'auto' and set 'width' instead
  /// NB flex-shrink is buggy cross browser; better avoid and keep at 0

  .flex, .flex, %flex {
    @include flex();
  }

  .flex-y, %flex-y {
    @include flex-y();
  }

  [class*='flex--'] {
    @extend %flex;
    &:before {
      content: '';
      display: table; // non-inline display req'd for IE; block fails in FF
      flex: 0 0 0%; // explicit 0 basis unit req'd for IE
    }
  }

  /////////////
  // aspects //
  /////////////

  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );

  @each $n, $denoms in $aspects {
    @each $d in $denoms {

      $gcd: gcd($n,$d);
      $r: $n/$gcd;

      .flex--#{$n}-#{$d} {
        @if $r < $n { @extend .flex--#{$r}-#{$d/$gcd}; }
        @else { &:before { padding-bottom: $d/$n * 100%; } }
      }

      .hold--#{$n}-#{$d} {
        @if $r < $n { @extend .hold--#{$r}-#{$d/$gcd}; }
        @else { padding-bottom: $d/$n * 100%; }
      }
    }
  }

  //////////
  // TURN //
  //////////

  .turn, [class*='turn--'] {
    white-space: pre;
    position: absolute;
    top: 50%;
  }
  .turn, .turn--cw {
    transform-origin: left top;
    &.alignleft {
      left: 0;
      transform: rotate(90deg) translateY(-100%) translateX(-50%);
    }
    &.aligncenter {
      left: 50%;
      transform: rotate(90deg) translateY(-50%) translateX(-50%);
    }
    &.alignright {
      left: 100%;
      transform: rotate(90deg) translateX(-50%);
    }
  }
  .turn--ccw {
    transform-origin: right top;
    &.alignleft {
      right: 100%;
      transform: rotate(-90deg) translateX(50%);
    }
    &.aligncenter {
      right: 50%;
      transform: rotate(-90deg) translateY(-50%) translateX(50%);
    }
    &.alignright {
      right: 0;
      transform: rotate(-90deg) translateY(-100%) translateX(50%);
    }
  }

}

@mixin setup-page-helpers {
}
