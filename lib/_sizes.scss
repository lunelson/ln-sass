//             88
//             ""
//
//  ,adPPYba,  88  888888888   ,adPPYba,
//  I8[    ""  88       a8P"  a8P_____88
//   `"Y8ba,   88    ,d8P'    8PP"""""""
//  aa    ]8I  88  ,d8"       "8b,   ,aa
//  `"YbbdP"'  88  888888888   `"Ybbd8"'

// TODO
// - move spread, offset and superclasses into a size-defaults object, along with default-reference
// - add rem units to generated sizes
// - replace setup-sizes with setup-sizes-per-query(null, args)
// - get rid of size-default value

// global
$size-assignments: () !default; // map of alias->list-index assignments
$size-defaults: (
  'spread' 2,
  'offset' 2,
  'superclasses' (kilo mega giga tera),
  'default' s3,
  'assignments' (),
) !default;

// $size-default: s3 !default;

///////////////
// FUNCTIONS //
///////////////

// HELPER
@function get-size-assignment($reference, $offset: 0) {
  $index: map-get($size-assignments, $reference);
  @return $index + $offset;
}

// MAIN
@function get-size($reference: get($size-defaults, default)) {
  $index: null;
  @if type-of($reference) == 'list' { $index: get-size-assignment($reference...); }
  @else { $index: get-size-assignment($reference); }
  @return nth(get(get-query(),'font-size'), $index);
}

////////////
// MIXINS //
////////////

// SUBMIX
@mixin assign-sizes() {

  // defaults
  $spread: get($size-defaults, 'spread');
  $superclasses: get($size-defaults, 'superclasses');

  // create size assignments
  @for $n from 1 through 6 {
    // $n: 7 - $n; $index: (7 - $n) * $spread;
    $index: $n * $spread;
    $size-assignments: merge($size-assignments, 's#{$n}' $index);
  }

  // create super size assignments
  @for $n from 1 through length($superclasses) {
    $index: (6 + $n) * $spread;
    $superclass: nth($superclasses, $n);
    $size-assignments: merge($size-assignments, $superclass $index);
  }
}

// MASTER
@mixin setup-sizes-per-query($query-aliases: null, $options:()) {

  // options
  $factor: get($options, 'factor') or 2;
  $steps: get($options, 'steps') or 2;

  // defaults
  $spread: get($size-defaults, 'spread');
  $offset: get($size-defaults, 'offset');
  $superclasses: get($size-defaults, 'superclasses');

  // query aliases
  $query-alias1: nth($query-aliases, 1); $query-alias2: null;
  @if length($query-aliases) > 1 { $query-alias2: nth($query-aliases, 2); }

  // calculate the size list
  $sizes: (); @for $n from 1 through (6 + length($superclasses)) * $spread {
    $size: m-scale($n - $offset * $spread, $factor, $steps * $spread);
    $sizes: append($sizes, $size * 1rem, 'comma');
  }

  // conditional base actions
  @if $query-alias1 == null { $base-data: merge($base-data, ('font-size' $sizes)); }

  // conditional per query actions
  $query-aliases: map-keys(map-get($query-data, 'width'));
  @each $query-alias in slice($query-aliases,
      if($query-alias1, index($query-aliases, $query-alias1), 1),
      if($query-alias2, index($query-aliases, $query-alias2) - 1, length($query-aliases))) {
    $query-data: merge($query-data, 'width', $query-alias, ('font-size' $sizes));
  }
  @include assign-sizes();
}

// ALIAS
@mixin setup-sizes($options:()) {
  @include setup-sizes-per-query(null, $options);
}

