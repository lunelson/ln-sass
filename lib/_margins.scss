//                                                           88
//                                                           ""
//
//  88,dPYba,,adPYba,   ,adPPYYba,  8b,dPPYba,   ,adPPYb,d8  88  8b,dPPYba,
//  88P'   "88"    "8a  ""     `Y8  88P'   "Y8  a8"    `Y88  88  88P'   `"8a
//  88      88      88  ,adPPPPP88  88          8b       88  88  88       88
//  88      88      88  88,    ,88  88          "8a,   ,d88  88  88       88
//  88      88      88  `"8bbdP"Y8  88           `"YbbdP"Y8  88  88       88
//                                               aa,    ,88
//                                                "Y8bbdP"

// GLOBALS
$margin-defaults: (
  'offset' 3,
  'range' 10,
  'spread' 3,
) !default;

///////////////
// FUNCTIONS //
///////////////

// MAIN
@function get-query-margin($query-object, $index: 0, $sub-index: 0) {
  $offset: get($margin-defaults, 'offset'); $spread: get($margin-defaults, 'spread');
  @return nth(get($query-object, 'margin-y'), ($index + $offset) * $spread + $sub-index);
}

// ALIAS to MAIN
@function get-margin($args...) { @return get-query-margin(get-query(), $args...); }
@function margin($args...) { @return get-margin($args...); }

// ALT for X margins
@function get-margin-x($index: 0, $sub-index: 0) {
  $offset: get($margin-defaults, 'offset');
  $spread: get($margin-defaults, 'spread');
  $target: ($index + $offset) * $spread + $sub-index;
  @return nth(get(get-query(),'margin-x'), $target);
}
@function margin-x($args...) { @return get-margin-x($args...); }

////////////
// MIXINS //
////////////

// SUBMIX
@mixin merge-margins($margins, $query-alias: null) {

  // get context margin-y value; fallback to line-height or just 1.5rem
  $context: get-query($query-alias);
  $margin-y: get($context, 'margin-y') or get($context, 'line-height') * 1rem or 1.5rem;
  $margin-x: get($context, 'margin-x') or 1rem;

  // calc and hold context margin lists
  $margins-y: (); $margins-x: ();
  @each $margin in $margins {
    $margins-y: append($margins-y, $margin * $margin-y, 'comma');
    $margins-x: append($margins-x, $margin * $margin-x, 'comma');
  }

  // put these together
  $margin-data: ('margin-y' $margins-y, 'margin-x' $margins-x);

  // merge them back to appropriate data
  @if $query-alias { $queries: merge($queries, nth($query-alias, 1), nth($query-alias, 2), $margin-data); }
  @else { $base: merge($base, $margin-data); }
}

// MASTER
@mixin setup-margins-from-to($query-aliases, $options...) {

  // options
  $factor: get($options, 'factor') or 2;
  $steps: get($options, 'steps') or 3;

  // defaults
  $range: get($margin-defaults, 'range') or 10;
  $spread: get($margin-defaults, 'spread') or 3;
  $offset: get($margin-defaults, 'offset');
  @if not $offset {
    $offset: floor($range / 3);
    $margin-defaults: merge($margin-defaults, 'offset' $offset); }

  // query-aliases
  $query-alias1: nth($query-aliases, 1); $query-alias2: null;
  @if length($query-aliases) > 1 { $query-alias2: nth($query-aliases, 2); }

  // calculate the margin-list, unitless
  $margins: (); @for $n from 1 through $range * $spread {
    $margin: m-scale($n - $offset * $spread, $factor, $steps * $spread);
    $margins: append($margins, $margin, 'comma'); // unitless, at first
  }

  // conditional: base actions via submixin
  @if $query-alias1 == null { @include merge-margins($margins); }

  // determine referenced queries
  $query-aliases: map-keys(map-get($queries, 'width'));
  $sliced-query-aliases: slice($query-aliases,
      if($query-alias1, index($query-aliases, $query-alias1), 1),
      if($query-alias2, index($query-aliases, $query-alias2) - 1, length($query-aliases)));

  // per referenced query actions
  $count: 1; @each $query-alias in $sliced-query-aliases {
    @include merge-margins($margins, 'width' $query-alias);
    @if $count == 1 and $query-alias1 != null { $queries-orig: merge($queries-orig, 'width', $query-alias, ('margin-bp' true)); }
    $count: $count + 1;
  }
}

// ALTERNATE
@mixin setup-margins($options...) { @include setup-margins-from-to(null, $options...); }