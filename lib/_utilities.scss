///////////
// OTHER //
///////////

// output stringified number w/ suffix e.g. 1st 2nd 3rd 4th
@function enum($n) {
  $h: abs($n) % 100; $t: $h % 10;
  @if $h > 3 and $h < 21 { @return #{$n}th; }
  @return #{$n}#{if($h == 1, 'st', if($t == 2, 'nd', if($t == 3, 'rd', 'th')))};
}

@mixin position($pos, $args...) {
  position: $pos;
  @each $arg in $args { #{nth($arg, 1)}: nth($arg, 2); }
}
@mixin absolute($args...) { @include position(absolute, $args...); }
@mixin fixed($args...) { @include position(fixed, $args...); }
@mixin relative($args...) { @include position(relative, $args...); }

@function opposite($dirs) {
  $out: ();
  $opposites: (top bottom, right left, bottom top, left right, ltr rtl, rtl ltr);
  @each $dir in $dirs { $opposite: map-get($opposites, $dir); @if $opposite {$out: append($out, $opposite); } }
  @return $out;
}

@function m-scale($index, $factor, $spread) { @return pow($factor, $index/$spread); }

@function trend($value, $basis: (0 0, 1 1)) {
  $c1: nth($basis, 1); $c2: nth($basis, 2);
  $x1: nth($c1, 1); $y1: nth($c1, 2);
  $x2: nth($c2, 1); $y2: nth($c2, 2);
  $m: ($y2 - $y1) / ($x2 - $x1);
  @return $y1 + $m * ($value - $x1);
}

@function gray($n) {
  $c: $n/100*255;
  @return rgb($c,$c,$c);
}

@mixin adjacent($args...) {
  @if length($args) == 0 {
    & + & { @content; }
  } @else {
    @if type_of(nth($args,1)) == list { $args: join($n, $args...); }
    $arr: unquote("#{nth($args, 1)} + &");
    @for $n from 2 through length($args) {
      $arr: append($arr, unquote(", #{nth($args,$n)} + &"));
    }
    #{$arr} { @content; }
  }
}

@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}

@function modular-scale($index, $basis: 2 4) {
  @return pow(nth($basis, 1), $index/nth($basis, 2));
}

//              _ _
//             (_) |
//  _   _ _ __  _| |_ ___
// | | | | '_ \| | __/ __|
// | |_| | | | | | |_\__ \
//  \__,_|_| |_|_|\__|___/

@function single($unit) {
  $units: 'em', 'ex', 'ch', 'rem', '%', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'in', 'px', 'pt', 'pc', 'deg', 'grad', 'rad', 'turn', 's', 'ms', 'dpi', 'dpcm', 'dppx';
  $singles: 1em, 1ex, 1ch, 1rem, 1%, 1vw, 1vh, 1vmin, 1vmax, 1cm, 1mm, 1in, 1px, 1pt, 1pc, 1deg, 1grad, 1rad, 1turn, 1s, 1ms, 1dpi, 1dpcm, 1dppx;
  $index: index($units, $unit); @if $index { @return nth($singles, $index); } @return 1; }
@function strip($value) { @return $value / single(unit($value)); }
@function assert($value, $unit) { @return strip($value) * single($unit); }

//  _ _     _
// | (_)   | |
// | |_ ___| |_ ___
// | | / __| __/ __|
// | | \__ \ |_\__ \
// |_|_|___/\__|___/

// convert a list to comma-separated values
@function csv($list) {
  $output: ();
  @each $item in $list {
    $output: append($output, $item, 'comma');
  }
  @return $output;
}

// convert a list to space-separated values
@function ssv($list) {
  $output: ();
  @each $item in $list {
    $output: append($output, $item, 'space');
  }
  @return $output;
}

@function remove($list, $tests...) {
  $out:(); @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
    @if not index($tests, $item) { $out: append($out, $item); } }
  @return $out;
}

@function reduce($list) { @return remove($list, null, false); }


// collect and reject by type comparison
@function collect-types($list, $type) {
  $out: ();
  @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
      @if type_of($item) == $type {
          $out: append($out, $item);
      }
  }
  @return if(length($out) == 1, nth($out, 1), $out);
}

@function reject-types($list, $type) {
  @if length($list) == 1 { $list: nth($list, 1); }
  @each $item in $list {
      @if type_of($item) == $type {
          $list: reject($list, $item);
      }
  }
  @return if(length($list) == 1, nth($list, 1), $list);
}

// shortcuts for above
@function collect-strings($list) { @return collect-types($list, 'string'); }
@function reject-strings($list) { @return reject-types($list, 'string'); }
@function collect-numbers($list) { @return collect-types($list, 'number'); }
@function reject-numbers($list) { @return reject-types($list, 'number'); }
@function collect-bools($list) { @return collect-types($list, 'bool'); }
@function reject-bools($list) { @return reject-types($list, 'bool'); }

@function contains($list, $item) {
  @if index($list, $item) { @return true; }
  @return false;
}

@function contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }
  @return false;
}

@function slice($list, $start: 1, $end: length($list), $sep: 'comma') {
  $output: ();
  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i), $sep);
    }
  }
  @return $output;
}



//  _ __ ___   __ _ _ __  ___
// | '_ ` _ \ / _` | '_ \/ __|
// | | | | | | (_| | |_) \__ \
// |_| |_| |_|\__,_| .__/|___/
//                 | |
//                 |_|

@function map-get-all($map, $keys...) {
  $out: (); @each $key in $keys {
    $out: append($out, map-get($map, $key)); }
  @return $out;
}

@function get-all($args...) { @return map-get-all($args...); }

@function map-prev-key($map, $key) {
  $keys: map-keys($map);
  @return nth($keys, index($keys, $key) - 1)
}

@function map-next-key($map, $key) {
  $keys: map-keys($map);
  @return nth($keys, index($keys, $key) + 1)
}

@function map-subkey-sort($list-map, $key) {
  $list-map: list-map-check($list-map);
  @if length($list-map) > 1 {
    $less: (); $equal: (); $greater: ();
    $seed: nth($list-map, ceil(length($list-map) / 2));
    @each $tuple in $list-map {
      @if get(tuple-value($tuple), $key) == get(tuple-value($seed), $key) { $equal: append($equal, $tuple, 'comma'); }
      @else if get(tuple-value($tuple), $key) < get(tuple-value($seed), $key) { $less: append($less, $tuple, 'comma'); }
      @else { $greater: append($greater, $tuple, 'comma'); } }
    @return join(join(map-subkey-sort($less, $key), $equal), map-subkey-sort($greater, $key)); }
  @return $list-map;
}

@function map-subvalues($map, $key, $depth) {
  $output: ();
  @if $depth > 1 { @each $tuple in $map { $output: append($output, map-subvalues(value($tuple), $key, $depth - 1)); } }
  @else { $output: get($map, $key); }
  @return $output;
}


/////////////
// STRINGS //
/////////////

@function str-remove($str, $sub) {
  $i: str-index($str, $sub);
  @if $i == 0 { @return $str; }
  @else { @return str-remove(str-slice($str, 1, $i - 1) + str-slice($str, $i + 1, str-length($str)), $sub); }
}

