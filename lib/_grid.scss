//                           88           88
//                           ""           88
//                                        88
//   ,adPPYb,d8  8b,dPPYba,  88   ,adPPYb,88
//  a8"    `Y88  88P'   "Y8  88  a8"    `Y88
//  8b       88  88          88  8b       88
//  "8a,   ,d88  88          88  "8a,   ,d88
//   `"YbbdP"Y8  88          88   `"8bbdP"Y8
//   aa,    ,88
//    "Y8bbdP"

// NEXT
// - put top and bottom padding on all elements, according to get-margin() / get-margin-x()
// - apply for each query containing margin-y or margin-x in query-orig
// - convert this to attribute-module (am) system
// %wrap
  // padding-x
  // padding-y
// %row
  // margin-x
  // margin-y
// %col
  // padding-x
  // padding-y
  //
  //

@mixin setup-grid($args...) {

  $margin-x: get-margin-x($args...);
  $margin-y: get-margin($args...);

  %col {
    float: left;
    width: 100%;
    // min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    margin-top: -1px;
    padding-top: 1px; // fix margin and horiz collapsing: http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    padding-left: $margin-x / 2;
    padding-right: $margin-x / 2;
  }
  .col,
  [class*='col--'],
  [ln-grid~='col'] { @extend %col; }

  %row {
    @include clearfix();
    margin-top: -1px;
    margin-left: - $margin-x / 2;
    margin-right: - $margin-x / 2;
  }
  .row,
  [class*='row--'],
  [ln-grid~='row'] { @extend %row; }

  %wrap {
    @include clearfix();
    padding-top: 1px; // fix margin collapsing
    margin-left: auto;
    margin-right: auto;
  }
  .wrap,
  [class*='wrap--'],
  [ln-grid~='wrap'] {
    @extend %wrap;
    &[ln-grid~='alpha'] { max-width: get($queries, 'width', 'alpha', 'content-width'); }
    &[ln-grid~='beta'] { max-width: get($queries, 'width', 'alpha', 'content-width'); }
    &[ln-grid~='gamma'] { max-width: get($queries, 'width', 'alpha', 'content-width'); }
    &[ln-grid~='delta'] { max-width: get($queries, 'width', 'alpha', 'content-width'); }
  }

  %wrapkids {
    margin-left: auto;
    margin-right: auto;
  }

  @each $query-alias in map-keys(get($queries, 'width')) {
    // here apply if margin-x or margin-y exists in query-orig
    @if get($queries-orig, 'width', $query-alias, 'margin-x') {
      @include query($query-alias) {
        $margin-x: get-margin-x($args...);
        $margin-y: get-margin($args...);
        .col {
          padding-left: $margin-x / 2;
          padding-right: $margin-x / 2;
        }
        .row {
          margin-left: - $margin-x / 2;
          margin-right: - $margin-x / 2;
        }
      }
    }
  }
}

// column sizing mixin
@mixin col-size($span, $offsets...) {
  $n: nth($span, 1); $d: nth($span, 2);
  width: $n / $d * 100%;
  @each $offset in $offsets {
    $dir: nth($offset, 1); $o: nth($offset, 2);
    @if length($offset) > 2 { $d: nth($offset, 3); }
    @if $o == out {
      margin-#{get($opposite, $dir)}: 100%;
      margin-#{$dir}: $n / $d * -100%;
      margin-bottom: -100%; }
    @else { margin-#{$dir}: $o / $d * 100%; }
  }
}

// new mixin; either assigns or
@mixin col($args...) { @extend %col;
  @if $args != () { @include col-size($args...); }
}

// row sizing mixin
@mixin row-size($cols: false) {
  @if $cols {
    &::before {
      content: '#{$cols} .col';
      display: none;
    }
  }
}

@mixin wrap() {
  @extend %wrap;
}