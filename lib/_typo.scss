//    ,d
//    88
//  MM88MMM  8b       d8  8b,dPPYba,    ,adPPYba,
//    88     `8b     d8'  88P'    "8a  a8"     "8a
//    88      `8b   d8'   88       d8  8b       d8
//    88,      `8b,d8'    88b,   ,a8"  "8a,   ,a8"
//    "Y888      Y88'     88`YbbdP"'    `"YbbdP"'
//               d8'      88
//              d8'       88

// TODO
// - do setup-typo and setup-query-typo, separating global from per-query calculations

$typo-data: (
  main (
    definition (
      font-family (sans-serif),
      letter-spacing 0.0125em
    ),
    metrics (
      size-modifier 1,
      capline (50 0.125, 200 0.2),
      baseline (50 0.175, 200 0.25)
    )
  )
) !default;

////////////////////////////
// base set-typo function //
////////////////////////////

%typo {
  &.single {
    line-height: 1;
    margin-top: 0;
    margin-bottom: 0;
  }
}

@mixin get-typo($alias) {

  // check for $alias in typo map for current context
  $context: get-query();
  $context-typo: get($context, typo, $alias);

  @if $context-typo != null { // i.e. if it exists ->

    // parse typo to output
    font-size: get($context-typo, size);
    line-height: get($context-typo, line-height);
    margin-top: get($context-typo, margin-top);
    margin-bottom: get($context-typo, margin-bottom);
    @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: get($context-typo, trim-top); } }
    @else { &:last-child, &.trim { margin-bottom: get($context-typo, trim-bottom); } }

  }
}

// MASTER
@mixin set-typo-per-query($query-aliases: null, $typo-alias: null, $size: null, $options: ()) {

  /////////////////////////////
  // ARGS, DEFAULTS, GLOBALS //
  /////////////////////////////

  // font and margin
  $font: map-get($options, 'font') or tuple-key(nth($typo-data, 1));
  $margin: map-get($options, 'margin') or get($margin-defaults, 'default');

  // size-index
  $size-index: null;
  @if type-of($size) == 'list' { $size-index: get-size-assignment($size...); }
  @else { $size-index: get-size-assignment($size); }

  // margin-index
  $margin-index: null;
  @if type-of($margin) == 'list' { $margin-index: get-margin-assignment($margin...); }
  @else { $margin-index: get-margin-assignment($margin); }

  // merge alias assignment back to the assignment lists
  $size-assignments: merge($size-assignments, $typo-alias, $size-index);
  $margin-assignments: merge($margin-assignments, $typo-alias, $margin-index);

  // globals
  $min-height: get($global-data, 'typo-min-line-height');
  $margin-dir: get($margin-defaults, 'margin-direction') or 'top';

  // query-aliases
  $query-alias1: nth($query-aliases, 1); $query-alias2: null;
  @if length($query-aliases) > 1 { $query-alias2: nth($query-aliases, 2); }

  // conditional: base actions
  @if $query-alias1 == null {

    // get query object + corresp. size, margin
    $context: $base-data;
    $size: nth(get($context,'font-size'), $size-index);
    $margin: nth(get($context,'margin-y'), $margin-index);

    // get trims
    $px-size: strip(px($size)); // better! works per html-scale
    $capline-trim: map-get($options, 'capline') or trend($px-size, get($typo-data, $font, 'metrics', 'capline'));
    $baseline-trim: map-get($options, 'baseline') or trend($px-size, get($typo-data, $font, 'metrics', 'baseline'));

    // global / default stuff
    $line-div: get($global-data, 'typo-line-div') or ceil($size) + 1; // set global value to null to automate

    // calc the values
    $ref-height: get($context, 'line-height') / strip($size);
    $line-height: $ref-height * ceil($min-height / $ref-height * $line-div) / $line-div;
    $line-trim: (1 - $line-height) / 2;
    $trim-top: ($line-trim - $capline-trim) * $size;
    $trim-bottom: ($line-trim - $baseline-trim) * $size;
    $margin-top: $trim-top + $margin * if($margin-dir == 'top', 1, 0);
    $margin-bottom: $trim-bottom + $margin * if($margin-dir == 'bottom', 1, 0);

    // merge them to current query under t-alias
    $base-data: merge($base-data, 'typo', $typo-alias, (
      'font-size' $size,
      'line-height' $line-height,
      'margin-top' $margin-top,
      'margin-bottom' $margin-bottom,
      'trim-top' $trim-top,
      'trim-bottom' $trim-bottom,
    ));

    // output
    @extend %typo;
    font-size: $size;
    line-height: $line-height;
    margin-top: $margin-top;
    margin-bottom: $margin-bottom;
    @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: $trim-top; } }
    @else { &:last-child, &.trim { margin-bottom: $trim-bottom; } }
  }

  /////////////////
  // QUERY SHITE //
  /////////////////

  // conditional: per query actions
  $query-aliases: map-keys(map-get($query-data, 'width'));
  $sliced-query-aliases: slice($query-aliases, if($query-alias1, index($query-aliases, $query-alias1), 1), if($query-alias2, index($query-aliases, $query-alias2) - 1, length($query-aliases)));
  @each $query-alias in $sliced-query-aliases {
    @include query($query-alias) {

      // get query object + corresp. size, margin
      $context: get-query();
      $size: nth(get($context,'font-size'), $size-index);
      $margin: nth(get($context,'margin-y'), $margin-index);

      // get trims
      $px-size: strip(px($size)); // better! works per html-scale
      $capline-trim: map-get($options, 'capline') or trend($px-size, get($typo-data, $font, 'metrics', 'capline'));
      $baseline-trim: map-get($options, 'baseline') or trend($px-size, get($typo-data, $font, 'metrics', 'baseline'));

      // global / default stuff
      $line-div: get($global-data, 'typo-line-div') or ceil($size) + 1; // set global value to null to automate

      // calc the values
      $ref-height: get($context, 'line-height') / strip($size);
      $line-height: $ref-height * ceil($min-height / $ref-height * $line-div) / $line-div;
      $line-trim: (1 - $line-height) / 2;
      $trim-top: ($line-trim - $capline-trim) * $size;
      $trim-bottom: ($line-trim - $baseline-trim) * $size;
      $margin-top: $trim-top + $margin * if($margin-dir == 'top', 1, 0);
      $margin-bottom: $trim-bottom + $margin * if($margin-dir == 'bottom', 1, 0);

      // merge them to current query under t-alias
      $query-data: merge($query-data, 'width', $query-alias, 'typo', $typo-alias, (
        'font-size' $size,
        'line-height' $line-height,
        'margin-top' $margin-top,
        'margin-bottom' $margin-bottom,
        'trim-top' $trim-top,
        'trim-bottom' $trim-bottom,
      ));

      // conditionally, output
      @if contains-any(map-keys(get($query-orig, 'width', $query-alias)), ('margin-y', 'line-height', 'size-bp', 'margin-bp')) {
        font-size: $size;
        line-height: $line-height;
        margin-top: $margin-top;
        margin-bottom: $margin-bottom;
        @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: $trim-top; } }
        @else { &:last-child, &.trim { margin-bottom: $trim-bottom; } }
      }
    }
  }
}

// ALIAS
@mixin set-typo($typo-alias, $size: $size-default, $options: ()) {
  @include set-typo-per-query(null, $typo-alias, $size, $options);
}
