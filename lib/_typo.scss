//    ,d
//    88
//  MM88MMM  8b       d8  8b,dPPYba,    ,adPPYba,
//    88     `8b     d8'  88P'    "8a  a8"     "8a
//    88      `8b   d8'   88       d8  8b       d8
//    88,      `8b,d8'    88b,   ,a8"  "8a,   ,a8"
//    "Y888      Y88'     88`YbbdP"'    `"YbbdP"'
//               d8'      88
//              d8'       88

$typo-data: (
  main (
    definition (
      font-family (sans-serif),
      letter-spacing 0.0125em
    ),
    metrics (
      size-modifier 1,
      capline (50 0.125, 200 0.2),
      baseline (50 0.175, 200 0.25)
    )
  )
) !default;

$typo-default: tuple-key(nth($typo-data, 1));

@mixin set-typo($alias, $size, $font: $typo-default, $margin: $margin-default, $output: true) {

  //////////
  // INIT //
  //////////

  // TODO: enable this to handle arbitrary size and margin if spec'd with rem units
  // TODO: bring in the size-modifier item to mod size and inverse-mod line-height

  // resolve size index, then size value
  $size-index: null;
  @if type-of($size) == 'list' { $size-index: get-assignment($size-assignments, $size...); }
  @else { $size-index: get-assignment($size-assignments, $size); }
  $size: nth($sizes, $size-index);

  // resolve margin index, then margin value
  $margin-index: null;
  @if type-of($margin) == 'list' { $margin-index: get-assignment($margin-assignments, $margin...); }
  @else { $margin-index: get-assignment($margin-assignments, $margin); }
  $margin: nth(get(get-query(),'margin-y'), $margin-index);

  // merge alias assignment back to the assignment lists
  $size-assignments: merge($size-assignments, $alias, $size-index);
  $margin-assignments: merge($margin-assignments, $alias, $margin-index);

  // TODO: parse next block on per-query basis wrt html-scale...?

  // retrieve the font metrics per the font-class and per px size
  $px-size: strip($size * get($base-data, 'font-size'));
  $capline-trim: trend($px-size, get($typo-data, $font, 'metrics', 'capline'));
  $baseline-trim: trend($px-size, get($typo-data, $font, 'metrics', 'baseline'));

  // get global line-height factors
  $line-div: get($global-data, 'typo-line-div') or ceil($size) + 1; // set global value to null to automate
  $min-height: get($global-data, 'typo-min-line-height');

  //////////////////////////////
  // BASE CALC AND MERGE BACK //
  //////////////////////////////

  // calc line height and corresponding relative trims
  $reference-height: get($base-data, 'line-height') / $size;
  $line-height: $reference-height * ceil($min-height / $reference-height * $line-div) / $line-div;
  $line-trim: (1 - $line-height) / 2;
  $trim-top: $line-trim - $capline-trim;
  $trim-bottom: $line-trim - $baseline-trim;

  // calc and bundle rem trims
  $rem-size: $size * 1rem;
  $rem-line-height: $line-height * $size * 1rem;
  $rem-trim-top: $trim-top * $size * 1rem;
  $rem-trim-bottom: $trim-bottom * $size * 1rem;
  // merge back to base-data
  $base-data: merge($base-data, 'typo', $alias, (
    'trim-top' $rem-trim-top,
    'trim-bottom' $rem-trim-bottom
  ));

  /////////////////
  // BASE OUTPUT //
  /////////////////

  %typo-#{$alias} {


    font-size: $rem-size;
    line-height: $line-height;
    margin-top: $rem-trim-top + get-margin();
    margin-bottom: $rem-trim-bottom;
    &:first-child, &.trim-top { margin-top: $rem-trim-top; }

  }


  @if get($global-data, 'typo-per-query') {

    // parse through width queries
    @each $query in get($query-data, 'width') {

      // init
      $query-alias: tuple-key($query);
      $query-spec: tuple-value($query);

      ////////////////////////////////////
      // PER-QUERY PARSE AND MERGE BACK //
      ////////////////////////////////////

      // calc line height and corresponding relative trims
      $reference-height: get($query-spec, 'line-height') / $size;
      $line-height: $reference-height * ceil($min-height / $reference-height * $line-div) / $line-div;
      $line-trim: (1 - $line-height) / 2;
      $trim-top: $line-trim - $capline-trim;
      $trim-bottom: $line-trim - $baseline-trim;

      // calc and bundle rem trims
      $rem-line-height: $line-height * $size * 1rem;
      $rem-trim-top: $trim-top * $size * 1rem;
      $rem-trim-bottom: $trim-bottom * $size * 1rem;

      // merge back to corresponding query
      $query-data: merge($query-data, 'width', $query-alias, 'typo', $alias, (
        'trim-top' $rem-trim-top,
        'trim-bottom' $rem-trim-bottom
      ));

      //////////////////////////////////
      // PER-QUERY CONDITIONAL OUTPUT //
      //////////////////////////////////

      @if get($query-orig, 'width', $query-alias, 'line-height') or get($query-orig, 'width', $query-alias, 'margin-y') {

        @include query($query-alias) {

          %typo-#{$alias} {

            line-height: $line-height;
            margin-top: $rem-trim-top + get-margin();
            margin-bottom: $rem-trim-bottom;
            &:first-child, &.trim-top { margin-top: $rem-trim-top; }

          }
        }
      }
    }
  }
}

// master mixin alternately defines or applies the shit
@mixin typo($alias, $options...) {
  @if length($options) >=1 { @include set-typo($alias, $options...); }
  @else { @extend %typo-#{$alias}; }
}

/*

@include set-query-typo(alpha, h1, s6) {

  // apply for alpha upwards
  // apply for any queries after alpha which have line-height or margin-y

}

 */