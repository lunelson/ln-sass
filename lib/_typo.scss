//    ,d
//    88
//  MM88MMM  8b       d8  8b,dPPYba,    ,adPPYba,
//    88     `8b     d8'  88P'    "8a  a8"     "8a
//    88      `8b   d8'   88       d8  8b       d8
//    88,      `8b,d8'    88b,   ,a8"  "8a,   ,a8"
//    "Y888      Y88'     88`YbbdP"'    `"YbbdP"'
//               d8'      88
//              d8'       88

// TODO
// - do setup-typo and setup-queries-typo, separating global from per-query calculations
// NEW
// - allow a list of aliases to the set-typo function
// - allow arbitrary size and margins
// - have set-typo function just populate data
// - create a render-typography() mixin to render the data, keeping mq's together
// - set-typo-from(null beta, kilo site-title, size 5, margin 1, options ())

$fonts: (
  main (
    definition (
      font-family (sans-serif),
      letter-spacing 0.0125em
    ),
    metrics (
      size-modifier 1,
      capline (50 0.125, 200 0.2),
      baseline (50 0.175, 200 0.25)
    )
  )
) !default;

$current-typo-alias: null;

///////////////
// FUNCTIONS //
///////////////

@function trim-top($typo-alias: $current-typo-alias) {
  $typo: get(get-query(), 'typo', $typo-alias);
  @if type-of($typo) == 'string' { @return trim-top($typo); }
  @return map-get($typo, 'trim-top');
}

@function trim-bottom($typo-alias: $current-typo-alias) {
  $typo: get(get-query(), 'typo', $typo-alias);
  @if type-of($typo) == 'string' { @return trim-bottom($typo); }
  @return map-get($typo, 'trim-bottom');
}

// generalized typo-value
@function typo-value($key, $typo-alias: $current-typo-alias) {
  $typo: get(get-query(), 'typo', $typo-alias);
  @if type-of($typo) == 'string' { @return typo-value($key, $typo); }
  @return map-get($typo, $key);
}
@function t-value($args...) { @return typo-value($args...); }
////////////
// MIXINS //
////////////

// MASTER
@mixin set-typo-from($query-aliases, $typo-aliases, $options...) {

  /////////////////////////////
  // ARGS, DEFAULTS, GLOBALS //
  /////////////////////////////

  // options
  $font-alias: map-get($options, 'font') or tuple-key(nth($fonts, 1));
  $size-arg: map-get($options, 'size') or 0;
  $margin-arg: map-get($options, 'margin') or 0;
  $from-query: map-get($options, 'from') or null;
  $to-query: map-get($options, 'to') or null;

  // globals
  $min-height: get($global-data, 'typo', 'min-line-height');
  $margin-dir: get($global-data, 'typo', 'margin-dir') or 'top';

  // query-aliases
  $query-alias1: nth($query-aliases, 1); $query-alias2: null;
  @if length($query-aliases) > 1 { $query-alias2: nth($query-aliases, 2); }

  // typo-aliases
  $typo-alias-main: nth($typo-aliases, 1);
  $typo-alias-alts: slice($typo-aliases, 2);

  // populate typo-alt-aliases object and compute placeholder string
  $typo-alt: (); $placeholder: '%typo-#{$typo-alias-main}';
  @each $alias in $typo-alias-alts {
    $typo-alt: append($typo-alt, $alias $typo-alias-main);
    $placeholder: $placeholder + ', %typo-#{$alias}';
  }

  // conditional: base actions
  @if $query-alias1 == null {

    // get query object + corresp. size, margin
    $context: $base;
    $size: get-size(join((), $size-arg)...);
    $margin: get-query-margin($context, join((), $margin-arg)...);

    // get trims
    $px-size: strip(px($size)); // better! works per html-scale
    $capline-trim: map-get($options, 'capline') or trend($px-size, get($fonts, $font-alias, 'metrics', 'capline'));
    $baseline-trim: map-get($options, 'baseline') or trend($px-size, get($fonts, $font-alias, 'metrics', 'baseline'));

    // global / default stuff
    $line-div: get($global-data, 'typo-line-div') or ceil($size) + 1; // set global value to null to automate

    // calc the values
    $ref-height: get($context, 'line-height') / strip($size);
    $line-height: $ref-height * ceil($min-height / $ref-height * $line-div) / $line-div;
    $line-trim: (1 - $line-height) / 2;
    $trim-top: ($line-trim - $capline-trim) * $size;
    $trim-bottom: ($line-trim - $baseline-trim) * $size;
    $margin-top: $trim-top + $margin * if($margin-dir == 'top', 1, 0);
    $margin-bottom: $trim-bottom + $margin * if($margin-dir == 'bottom', 1, 0);

    // merge main and alts to base data
    $typo-main: (
      'font-size' $size,
      'line-height' $line-height,
      'margin-top' $margin-top,
      'margin-bottom' $margin-bottom,
      'trim-top' $trim-top,
      'trim-bottom' $trim-bottom,
    );
    $typo-full: join($typo-alt, ($typo-alias-main $typo-main,));
    $base: merge($base, 'typo', $typo-full);

    // output
    #{$placeholder} {
      @extend %typo-all;
      font-size: $size;
      line-height: $line-height;
      margin-top: $margin-top;
      margin-bottom: $margin-bottom;
      @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: $trim-top; } }
      @else { &:last-child, &.trim { margin-bottom: $trim-bottom; } }
    }
  }

  /////////////////
  // QUERY SHITE //
  /////////////////

  // conditional: per query actions
  $query-aliases: map-keys(map-get($queries, 'width'));
  $sliced-query-aliases: slice(
    $query-aliases,
    if($query-alias1, index($query-aliases, $query-alias1), 1),
    if($query-alias2, index($query-aliases, $query-alias2) - 1, length($query-aliases))
  );
  @each $query-alias in $sliced-query-aliases {

    // get query object + corresp. size, margin
    $context: get-query('width' $query-alias);
    $size: get-query-size($context, join((), $size-arg)...);
    $margin: get-query-margin($context, join((), $margin-arg)...);

    // get trims
    $px-size: strip(px($size)); // better! works per html-scale
    $capline-trim: map-get($options, 'capline') or trend($px-size, get($fonts, $font-alias, 'metrics', 'capline'));
    $baseline-trim: map-get($options, 'baseline') or trend($px-size, get($fonts, $font-alias, 'metrics', 'baseline'));

    // global / default stuff
    $line-div: get($global-data, 'typo-line-div') or ceil($size) + 1; // set global value to null to automate

    // calc the values
    $ref-height: get($context, 'line-height') / strip($size);
    $line-height: $ref-height * ceil($min-height / $ref-height * $line-div) / $line-div;
    $line-trim: (1 - $line-height) / 2;
    $trim-top: ($line-trim - $capline-trim) * $size;
    $trim-bottom: ($line-trim - $baseline-trim) * $size;
    $margin-top: $trim-top + $margin * if($margin-dir == 'top', 1, 0);
    $margin-bottom: $trim-bottom + $margin * if($margin-dir == 'bottom', 1, 0);

    // merge them to current query under t-alias
    $query-bp: if($query-alias1 == $query-alias, ('query-bp' true,),());
    $typo-main: merge($query-bp, (
      'font-size' $size,
      'line-height' $line-height,
      'margin-top' $margin-top,
      'margin-bottom' $margin-bottom,
      'trim-top' $trim-top,
      'trim-bottom' $trim-bottom,
    ));
    $typo-full: join($typo-alt, ($typo-alias-main $typo-main,));
    $queries: merge($queries, 'width', $query-alias, 'typo', $typo-full);

    // conditionally, output
    $orig-query-keys: map-keys(get($queries-orig, 'width', $query-alias));
    $spec-check: contains-any($orig-query-keys, ('margin-y', 'line-height'));
    $size-check: contains($orig-query-keys, 'size-bp') and $size-arg != (0);
    $margin-check: contains($orig-query-keys, 'margin-bp') and $margin-arg != (0);
    $first-query: $query-alias == $query-alias1;
    // spec-check: $spec-check;
    // size-check: $size-check;
    // margin-check: $margin-check;
    // first-query-check: $first-query;
    @if $spec-check or $size-check or $margin-check or $first-query {
      @media #{query-string($query-alias)} {
        #{$placeholder} {
          font-size: $size;
          line-height: $line-height;
          margin-top: $margin-top;
          margin-bottom: $margin-bottom;
          @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: $trim-top; } }
          @else { &:last-child, &.trim { margin-bottom: $trim-bottom; } }
        }
      }
    }
  }
}

// SIMPLE call for ALL case
@mixin set-typo($args...) { @include set-typo-from(null, $args...); }

@mixin render-typo() {
  // WIP
  // output the styles merged through set- operations
}

// APPLY TYPO creates BLOCK CONTEXT
@mixin typo($typo-alias) {
  @extend %typo-#{$typo-alias};
  $temp-typo-alias: $current-typo-alias;
  $current-typo-alias: $typo-alias;
  @content;
  $current-typo-alias: $temp-typo-alias;
}

///////////////////////////
// UNIVERSAL TYPO STYLES //
///////////////////////////

%typo-all {
  &.single {
    line-height: 1;
    margin-top: 0;
    margin-bottom: 0;
  }
}


// @mixin get-query-typo($query-object, $alias) {

//   $query-typo: get($query-object, 'typo', $alias);

//   @if $query-typo != null { // i.e. if it exists ->

//     // parse typo to output
//     font-size: get($query-typo, size);
//     line-height: get($query-typo, line-height);
//     margin-top: get($query-typo, margin-top);
//     margin-bottom: get($query-typo, margin-bottom);
//     @if $margin-dir == 'top' { &:first-child, &.trim { margin-top: get($query-typo, trim-top); } }
//     @else { &:last-child, &.trim { margin-bottom: get($query-typo, trim-bottom); } }

//   }
// }

