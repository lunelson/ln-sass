//                                                                                                 88  88
//                                                                                          ,d     ""  88
//                                                                                          88         88
//   ,adPPYb,d8  88       88   ,adPPYba,  8b,dPPYba,  8b       d8            88       88  MM88MMM  88  88
//  a8"    `Y88  88       88  a8P_____88  88P'   "Y8  `8b     d8'  aaaaaaaa  88       88    88     88  88
//  8b       88  88       88  8PP"""""""  88           `8b   d8'   """"""""  88       88    88     88  88
//  "8a    ,d88  "8a,   ,a88  "8b,   ,aa  88            `8b,d8'              "8a,   ,a88    88,    88  88
//   `"YbbdP'88   `"YbbdP'Y8   `"Ybbd8"'  88              Y88'                `"YbbdP'Y8    "Y888  88  88
//           88                                           d8'
//           88                                          d8'


// width query string function
@function query-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($queries, width, $alias1, min-width)})', '')
    + if($alias2, ' and (max-width: #{get($queries, width, $alias2, min-width) - 0.001})', '');
}

// height query string function
@function query-string-y($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-height: #{get($queries, height, $alias1, min-width)})', '')
    + if($alias2, ' and (max-height: #{get($queries, height, $alias2, min-width) - 0.001})', '');
}

// function to retrieve current query-data-object based on $current-query-alias
@function get-query($alias: $current-query-alias) {
  @if $alias { @return get($queries, nth($alias, 1), nth($alias, 2)); }
  @return $base;
}

// function to retrieve current query-data-object based on $current-query-alias
@function get-orig-query($alias: $current-query-alias) {
  @if $alias { @return get($queries-orig  , nth($alias, 1), nth($alias, 2)); }
  @return $base;
}

// function to retrieve value for current query
@function get-query-value($key, $alias: $current-query-alias) {
  @return get(get-query($alias), $key);
}

// function to convert value(s) to rem, following context scale
@function rem($values...) {
  @if $values == null { @return null; }
  $scale: get-query-value('html-scale');
  $unit: if(get($global-data, 'em-for-rem'), 'em', 'rem');
  $out: ();
  @each $value in $values {
    @if index('rem' 'em', unit($value)) { $out: append($out, assert($value, $unit), 'space'); }
    @else { $out: append($out, assert($value / $scale / 16, $unit), 'space'); }
  }
  @return if(length($out) > 1, $out, nth($out, 1));
}

// function to convert value(s) to px, following context scale
@function px($values...) {
  @if $values == null { @return null; }
  $scale: get-query-value('html-scale');
  $out: ();
  @each $value in $values {
    @if unit($value) == 'px' { $out: append($out, $value, 'space'); }
    @else { $out: append($out, assert($value * $scale * 16, 'px'), 'space'); }
  }
  @return if(length($out) > 1, $out, nth($out, 1));
}

// mixin to output width media query
@mixin query($aliases...) {
  // save the context (not really necessary cause there's no nesting)
  $query-temp: $current-query-alias;
  @if length($aliases) > 0 {
    // get current alias or at least the previous one if in max-width query
    $alias: nth($aliases, 1) or map-prev-key(get($queries, 'width'), nth($aliases, 2));
    // set current context to width plus alias
    $current-query-alias: 'width' $alias;
  }
  // run the content in context
  @media #{query-string($aliases...)} { @content }
  // reset the context (no nesting; could just reset to null)
  $current-query-alias: $query-temp;
}

// mixin to output height media query
@mixin height-query($aliases...) {
  // save the context (not really necessary cause there's no nesting)
  $query-temp: $current-query-alias;
  @if length($aliases) > 0 {
    // get current alias or at least the previous one if in max-height query
    $alias: nth($aliases, 1) or map-prev-key(get($queries, 'height'), nth($aliases, 2));
    // set current context to height plus alias
    $current-query-alias: 'height' $alias;
  }
  // run the content in context
  @media #{query-string-y($aliases...)} { @content }
  // reset the context (no nesting; could just reset to null)
  $current-query-alias: $query-temp;
}

// hd widtquery-y mixin
@mixin query-hd($aliases...) {

  // compute the hd-ratio shite
  $hd-ratio: get($global-data, 'hd-ratio');
  $n: nth($hd-ratio, 1); $d: nth($hd-ratio, 2);
  $ratio: $n/$d;

  // save the context (not really necessary cause there's no nesting)
  $query-temp: $current-query-alias;
  @if length($aliases) > 0 {
    // get current alias or at least the previous one if in max-width query
    $alias: nth($aliases, 1) or map-prev-key(get($queries, 'width'), nth($aliases, 2));
    // set current context to width plus alias
    $current-query-alias: 'width' $alias;
  }

  // run the content in context
  @media
    #{query-string($aliases...)} and (-webkit-min-device-pixel-ratio: $ratio),
    #{query-string($aliases...)} and (min--moz-device-pixel-ratio: $ratio),
    #{query-string($aliases...)} and (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    #{query-string($aliases...)} and (min-device-pixel-ratio: $ratio),
    #{query-string($aliases...)} and (min-resolution: $ratio * 96dpi),
    #{query-string($aliases...)} and (min-resolution: $ratio * 1dppx) {
    @content;
  }
  // reset the context (no nesting; could just reset to null)
  $current-query-alias: $query-temp;
}

//  88
//  88                         ,d
//  88                         88
//  88,dPPYba,    ,adPPYba,  MM88MMM  ,adPPYYba,
//  88P'    "8a  a8P_____88    88     ""     `Y8
//  88       d8  8PP"""""""    88     ,adPPPPP88
//  88b,   ,a8"  "8b,   ,aa    88,    88,    ,88
//  8Y"Ybbd8"'    `"Ybbd8"'    "Y888  `"8bbdP"Y8

@mixin query-each($query-aliases) {

  // query aliases
  $query-alias1: nth($query-aliases, 1); $query-alias2: null;
  @if length($query-aliases) > 1 { $query-alias2: nth($query-aliases, 2); }

  // conditional base action
  @if $query-alias1 == null { @content; }

  // determine referenced queries
  $query-aliases: map-keys(map-get($queries, 'width'));
  $sliced-query-aliases: slice($query-aliases,
      if($query-alias1, index($query-aliases, $query-alias1), 1),
      if($query-alias2, index($query-aliases, $query-alias2) - 1, length($query-aliases)));

  // per referenced query actions
  @each $query-alias in $sliced-query-aliases {
    @include query($query-alias) { @content; }
  }
}

@mixin query-for($keys...) {
  @if contains-any($keys, margin margin-y margins) { $keys: join($keys, margin-bp margin-y)}
  @if contains-any($keys, size sizes) { $keys: join($keys, size-bp font-size); }
  @if contains-any($keys, trim height line-height) { $keys: join($keys, line-height size-bp); }
  @if contains-any(keys($base), $keys) {
    @content;
  }
  @each $query in get($queries-orig, width) {
    @if contains-any(keys(value($query)), $keys) {
      @include query(key($query)) {
        @content;
      }
    }
  }
}

// // dumb application across all queries, no checks
@mixin queries($options...) {

  // get 'from', 'to' and 'keys'
  $from-query: get($options, 'from') or null;
  $to-query: get($options, 'to') or null;
  $keys: get($options, 'keys') or null;

  // transform/correct options
  @if contains(root base null, $from-query) { $from-query: null; }
  @if contains-any($keys, margin margin-y margins) { $keys: join($keys, margin-bp margin-y)}
  @if contains-any($keys, size sizes) { $keys: join($keys, size-bp font-size); }
  @if contains-any($keys, trim height line-height) { $keys: join($keys, line-height size-bp); }

  // conditional base action
  @if $from-query == null {
    @if $keys == null { @content; }
    @else if contains-any(keys($base), $keys) { @content; }
  }

  // determine referenced queries
  $query-aliases: map-keys(map-get($queries, 'width'));
  $sliced-aliases: slice($query-aliases,
      if($from-query, index($query-aliases, $from-query), 1),
      if($to-query, index($query-aliases, $to-query) - 1, length($query-aliases)));

  // conditional per-query actions
  @each $query-alias in $sliced-aliases {
    @if not $keys { @include query($query-alias) { @content; } }
    @else if contains-any(keys(value($query)), $keys) { @include query($query-alias) { @content; } }
  }
}