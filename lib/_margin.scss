//                                                           88
//                                                           ""
//
//  88,dPYba,,adPYba,   ,adPPYYba,  8b,dPPYba,   ,adPPYb,d8  88  8b,dPPYba,
//  88P'   "88"    "8a  ""     `Y8  88P'   "Y8  a8"    `Y88  88  88P'   `"8a
//  88      88      88  ,adPPPPP88  88          8b       88  88  88       88
//  88      88      88  88,    ,88  88          "8a,   ,d88  88  88       88
//  88      88      88  `"8bbdP"Y8  88           `"YbbdP"Y8  88  88       88
//                                               aa,    ,88
//                                                "Y8bbdP"


@mixin set-all-margins($options:()) {
  $query-aliases: map-keys(map-get($query-data, 'width'));
  // base output
  @include set-margins($options);
  // per query output
  @each $alias in $query-aliases {
    $query-options: merge($options, (query-alias (width $alias)));
    @include set-margins($query-options);
  }
}

@mixin set-query-margins($aliases: null, $options:()) {
  $query-aliases: map-keys(map-get($query-data, 'width'));
  // parse args
  $alias1: nth($aliases, 1); $alias2: null;
  @if length($aliases) > 1 { $alias2: nth($aliases, 2); }
  // base output
  @if $alias1 == null { @include set-margins($options); }
  // per query output
  @each $alias in slice($query-aliases,
      if($alias1, index($query-aliases, $alias1), 1),
      if($alias2, index($query-aliases, $alias2) - 1, length($query-aliases))
    ) {
    $query-options: merge($options, (query-alias (width $alias)));
    @include set-margins($query-options);
  }
}


@mixin set-margins($options: ()) {

  // defaults vs. options
  $range: get($options, 'range') or 6;
  $factor: get($options, 'factor') or 2;
  $steps: get($options, 'steps') or 3;
  $spread: get($options, 'spread') or 2;
  $offset: get($options, 'offset') or 4;
  $superclasses: kilo mega giga tera;

  $query-alias: get($options, 'query-alias') or $query-current-alias;
  $context: get-query($query-alias);

  // get context margin-y value; fallback to line-height or just 1.5rem
  $margin-y: get($context, 'margin-y') or get($context, 'line-height') * 1rem or 1.5rem;
  $margin-x: get($context, 'margin-x') or 1rem;

  // calc and hold context margin lists
  $margins-y-temp: (); $margins-x-temp: ();
  @for $n from 1 through ($range + length($superclasses)) * $spread {
    $margin: m-scale($n - $offset * $spread, $factor, $steps * $spread);
    $margins-y-temp: append($margins-y-temp, $margin * $margin-y, 'comma');
    $margins-x-temp: append($margins-x-temp, $margin * $margin-x, 'comma');
  }

  // merge margin-lists to context
  $context: merge($context, 'margin-y' $margins-y-temp);
  $context: merge($context, 'margin-x' $margins-x-temp);

  // merge this back to appropriate data
  @if $query-alias != null {
    $query-data: merge($query-data, nth($query-alias, 1), nth($query-alias, 2), $context);
  } @else {
    $base-data: merge($base-data, $context);
  }

  // create margin assignments
  @for $n from 1 through $range {
    // $n: $range - $n + 1; $index: ($range - $n + 1) * $spread; // inverted
    $index: $n * $spread;
    $margin-assignments: merge($margin-assignments, 'm#{$n}', $index);
  }

  // create super margin assignments
  @for $n from 1 through length($superclasses) {
    $index: ($range + $n) * $spread;
    $margin-assignments: merge($margin-assignments, '#{nth($superclasses, $n)}' $index);
  }
}