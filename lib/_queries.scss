//   ,adPPYb,d8  88       88   ,adPPYba,  8b,dPPYba,  8b       d8
//  a8"    `Y88  88       88  a8P_____88  88P'   "Y8  `8b     d8'
//  8b       88  88       88  8PP"""""""  88           `8b   d8'
//  "8a    ,d88  "8a,   ,a88  "8b,   ,aa  88            `8b,d8'
//   `"YbbdP'88   `"YbbdP'Y8   `"Ybbd8"'  88              Y88'
//           88                                           d8'
//           88                                          d8'

// width queries (default type everywhere)
$queries: (
  alpha (
    min-width 20em
  ),
  beta (
    min-width 30em
  ),
  gamma (
    min-width 48em
  ),
  delta (
    min-width 64em
  ),
  epsilon (
    min-width 80em
  )
) !default;

// height queries
$height-queries: () !default;

// backup maps
$queries-orig: ();
$height-queries-orig: ();

@mixin setup-queries($output: true){

  // backup data first
  $queries-orig: $queries;

  @if $queries != () {

    // sort
    $queries: map-sort($queries, 'min-width');

    // parse width-queries relative to base properties
    $reference-spec: $base;

    @each $query in $queries {

      // init
      $query-alias: key($query);
      $query-spec: value($query);

      // merge query to reference
      $reference-spec: merge($reference-spec, $query-spec);

      // get font-size for reference
      $font-size: get($reference-spec, 'font-size');

      // proof/convert values other than font-size and line-height
      $spec-for-unit-check: map-remove($reference-spec, 'font-size', 'min-width');
      @each $item in $spec-for-unit-check {
        $item-value: value($item);
        @if unit($item-value) == 'px' { $reference-spec: merge($reference-spec, key($item), $item-value / $font-size * 1rem); }
      }

      // do other values
      $min-width: get($reference-spec, 'min-width');
      $html-scale: $font-size / 16px;
      $content-width: strip($min-width) / $html-scale - get($reference-spec, 'body-left') - get($reference-spec, 'body-right');
      $reference-spec: merge($reference-spec, (
        'html-scale' $html-scale,
        'content-width' $content-width
      ));

      // merge it all back to queries
      $queries: merge($queries, $query-alias, $reference-spec);

      // output values for whatever appeared in query-spec
      @if $output {

        $font-size: get($query-spec, 'font-size');
        $line-height: get($query-spec, 'line-height');
        $margin-x: get($query-spec, 'margin-x');
        $margin-y: get($query-spec, 'margin-y');
        $body-top: get($query-spec, 'body-top');
        $body-right: get($query-spec, 'body-right');
        $body-bottom: get($query-spec, 'body-bottom');
        $body-left: get($query-spec, 'body-left');

        @include query($query-alias) {

          // output for JS; ref: http://dropshado.ws/post/79494424279/conditional-css-doesnt-work-in-chrome
          // head { font-family: '#{$query-alias}'; }

          // output CSS if spec'd by user
          @if $font-size { html { font-size: percentage($html-scale); } }
          @if $line-height { body { line-height: $line-height; } }
          @if $body-top { body { margin-top: $body-top; } }
          @if $body-bottom { body { margin-bottom: $body-bottom; } }
          @if $body-right { body { margin-right: $body-right; } }
          @if $body-left { body { margin-left: $body-left; } }
        }
      }
    }
  }
}

@mixin setup-height-queries($output: true){

  // backup data first
  $height-queries-orig: $height-queries;

  @if $height-queries != () {

    // parse height-queries relative to empty properites
    $height-queries: map-sort($height-queries, 'min-height');
    $reference-spec: ();
    @each $query in $height-queries {
      $query-alias: tuple-key($query);
      $query-spec: tuple-value($query);

      // merge query to reference, merge this back to source
      $reference-spec: merge($reference-spec, $query-spec);
      $height-queries: merge($height-queries, $query-alias, $reference-spec);
    }
  }
}

//           88              88
//           88              88
//           88              88
//   ,adPPYb,88   ,adPPYba,  88,dPPYba,   88       88   ,adPPYb,d8
//  a8"    `Y88  a8P_____88  88P'    "8a  88       88  a8"    `Y88
//  8b       88  8PP"""""""  88       d8  88       88  8b       88
//  "8a,   ,d88  "8b,   ,aa  88b,   ,a8"  "8a,   ,a88  "8a,   ,d88
//   `"8bbdP"Y8   `"Ybbd8"'  8Y"Ybbd8"'    `"YbbdP'Y8   `"YbbdP"Y8
//                                                      aa,    ,88
//                                                       "Y8bbdP"


// @if $debug-toggle {
//   $column-count: get($reference-query, column-count);
//   $margin-x: get($reference-query, margin-x);
//   body::before { content: '#{$query-alias}'; }
//   body::after {
//     $row-width: $content-width + $margin-x;
//     width: $row-width; margin-left: ($row-width + $margin-x)/-2;
//     background: linear-gradient(to right,
//       rgba(0, 0, 0, 0) $margin-x,
//       $debug-color $margin-x,
//       $debug-color $row-width / $column-count - $margin-x
//     );
//     background-size: $row-width / $column-count;
//   }
// }

// // output stuff for the debug
// @if $debug-toggle {
//   body {
//     &:before, &:after {
//       position: fixed;
//       pointer-events: none;
//       user-select: none;
//       z-index: 999;
//     }
//     &:before {
//       text-align: right;
//       padding: 0.25rem;
//       width: 100%;
//       display: block;
//       color: black;
//       bottom: 0;
//       background-color: $debug-color;
//     }
//     &:after {
//       content: '';
//       top: 0;
//       bottom: 0;
//       left: 50%;
//     }
//   }
// }
