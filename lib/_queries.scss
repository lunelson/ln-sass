//   ,adPPYb,d8  88       88   ,adPPYba,  8b,dPPYba,  8b       d8
//  a8"    `Y88  88       88  a8P_____88  88P'   "Y8  `8b     d8'
//  8b       88  88       88  8PP"""""""  88           `8b   d8'
//  "8a    ,d88  "8a,   ,a88  "8b,   ,aa  88            `8b,d8'
//   `"YbbdP'88   `"YbbdP'Y8   `"Ybbd8"'  88              Y88'
//           88                                           d8'
//           88                                          d8'

$queries: (
  width (
    alpha (
      min-width 20em
    ),
    beta (
      min-width 30em
    ),
    gamma (
      min-width 48em
    ),
    delta (
      min-width 64em
    ),
    epsilon (
      min-width 80em
    ),
  ),
  height (
  )
) !default;

// init backup of user spec
$queries-orig: ();

// var to hold current query; will be set by query() mixin
$current-query-alias: null;

@mixin setup-queries($output: true){

  // backup data first
  $queries-orig: $queries;

  ///////////
  // WIDTH //
  ///////////

  $width-queries: get($queries, 'width');
  @if $width-queries {

    // sort
    $width-queries: map-sort($width-queries, 'min-width');

    // parse width-queries relative to base properties
    $reference-spec: $base;
    @each $query in $width-queries {

      // init
      $query-alias: tuple-key($query);
      $query-spec: tuple-value($query);

      // merge query to reference
      $reference-spec: merge($reference-spec, $query-spec);

      // calc new values and merge with reference back to width-queries
      $min-width: get($reference-spec, 'min-width');
      $html-scale: get($reference-spec, 'font-size') / 16px;
      $content-width: strip($min-width) / $html-scale - get($reference-spec, 'body-left') - get($reference-spec, 'body-right');
      $width-queries: merge($width-queries, $query-alias, merge($reference-spec, (
        'html-scale' $html-scale,
        'content-width' $content-width,
      )));

      // output values for whatever appeared in query-spec
      @if $output {

        $spec-keys: map-keys($query-spec);
        $font-size: index($spec-keys, 'font-size');
        $line-height: index($spec-keys, 'line-height');
        $margin-x: index($spec-keys, 'margin-x');
        $margin-y: index($spec-keys, 'margin-y');
        $body-top: index($spec-keys, 'body-top');
        $body-right: index($spec-keys, 'body-right');
        $body-bottom: index($spec-keys, 'body-bottom');
        $body-left: index($spec-keys, 'body-left');

        @include query($query-alias) {

          // output for JS; ref: http://dropshado.ws/post/79494424279/conditional-css-doesnt-work-in-chrome
          head { font-family: '#{$query-alias}'; }

          // output CSS if spec'd by user
          @if $font-size { html { font-size: percentage($html-scale); } }
          @if $line-height { body { line-height: $line-height; } }
          @if $body-top { body { margin-top: $body-top; } }
          @if $body-bottom { body { margin-bottom: $body-bottom; } }
          @if $body-right {
            .body-col { margin-right: $body-right; }
            .body-row { margin-right: - $body-right; }
          }
          @if $body-left {
            .body-col { margin-left: $body-left; }
            .body-row { margin-left: - $body-left; }
          }
        }

      }
    }
    // merge back to query-data
    $queries: merge($queries, 'width', $width-queries);
  }

  ////////////
  // HEIGHT //
  ////////////

  $height-queries: get($queries, height);
  @if $height-queries {

    // parse height-queries relative to empty properites
    $height-queries: map-sort($height-queries, min-height);
    $reference-spec: ();
    @each $query in $height-queries {
      $query-alias: tuple-key($query);
      $query-spec: tuple-value($query);

      // merge query to reference, merge this back to source
      $reference-spec: merge($reference-spec, $query-spec);
      $height-queries: merge($height-queries, $query-alias, $reference-spec);
    }

    $queries: merge($queries, 'height', $height-queries);
  }
}
