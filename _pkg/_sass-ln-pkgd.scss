@mixin parse-resets() {
  @include reset-n3();
  @include reset-ln();
}
@mixin reset-n3(){
  html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
  body{margin:0}
  article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}
  audio,canvas,progress,video{display:inline-block;vertical-align:baseline}
  audio:not([controls]){display:none;height:0}
  [hidden],template{display:none}
  a{background-color:transparent}
  a:active,a:hover{outline:0}
  abbr[title]{border-bottom:1px dotted}
  b,strong{font-weight:bold}
  dfn{font-style:italic}
  h1{font-size:2em;margin:.67em 0}
  mark{background:#ff0;color:#000}
  small{font-size:80%}
  sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
  sup{top:-0.5em}
  sub{bottom:-0.25em}
  img{border:0}
  svg:not(:root){overflow:hidden}
  figure{margin:1em 40px}
  hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
  pre{overflow:auto}
  code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}
  button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}
  button{overflow:visible}
  button,select{text-transform:none}
  button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
  button[disabled],html input[disabled]{cursor:default}
  button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
  input{line-height:normal}
  input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
  input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}
  input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}
  input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
  fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
  legend{border:0;padding:0}
  textarea{overflow:auto}
  optgroup{font-weight:bold}
  table{border-collapse:collapse;border-spacing:0}
  td,th{padding:0}
}
@mixin reset-ln(){
  *, *:before, *:after { box-sizing: inherit; } 
  html, body { height: 100%; } 
  html {
    box-sizing: border-box; 
    -webkit-font-smoothing: antialiased; 
    -moz-osx-font-smoothing: grayscale; 
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0); 
    text-rendering: optimizespeed; 
  }
  img, video {
    display: block;
    max-width: 100%;
    height: auto;
  }
}

$base: () !default;
$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;
$base-orig: ();
$media-orig: ();
@mixin parse-media($output: true) {
  $base-orig: $base;
  $base: map-merge((
      font-size: 16px,
      line-height: 1.5,
      font-size-mod: 1.5,
      margin-x: 1rem,
      margin-x-mod: 2,
      margin-y: 1rem,
      margin-y-mod: 2,
      page-top: 1rem,
      page-right: 1rem,
      page-bottom: 1rem,
      page-left: 1rem,
    ), $base);
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
  $html-scale: strip($font-size / 16px);
  $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
  }
  $base: map-merge($base, $corrected-values);
  @if $output {
    $medium-key-list: ();
    @each $key in map-keys($media) {
      $medium-key-list: append($medium-key-list, quote($key), 'comma');
    }
    body::before {
      width: 0;
      height: 0;
      display: block;
      overflow: hidden;
      content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
    }
    head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }
    .util--medium { width: 0; transition: width 1ms; }
    html { font-size: assert(map-get($base, 'html-scale'), em); }
    body { line-height: map-get($base, 'line-height');
    }
  }
  $media-orig: $media;
  @if $media != () {
    $reference-medium: $base;
    $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');
    @each $medium-alias, $medium in $sorted-media {
      $reference-medium: map-merge($reference-medium, $medium);
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
      $html-scale: strip($font-size / 16px);
      $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
      }
      $reference-medium: map-merge($reference-medium, $corrected-values);
      $body-width: assert(map-get($reference-medium, 'breakpoint') / $html-scale, rem);
      $content-width: $body-width - (map-get($reference-medium, 'page-left') + map-get($reference-medium, 'page-right'));
      $reference-medium: map-merge($reference-medium, ('body-width': $body-width, 'content-width': $content-width));
      $media: map-merge($media, ($medium-alias: $reference-medium));
      @if $output {
        $font-size: map-get($medium, 'font-size');
        $line-height: map-get($medium, 'line-height');
        @include medium($medium-alias) {
          body::before { content: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          .util--medium { width: index(map-keys($media), $medium-alias) * 1px; }
          @if $font-size { html { font-size: assert(map-get($reference-medium, 'html-scale'), em); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
        }
      }
    }
  }
}


$current-medium-alias: null;
@function medium-value($key, $alias: $current-medium-alias) { @return map-get(medium($alias), $key); }
@function media-value($args...) { @return medium-value($args...); } 
@function m-value($args...) { @return medium-value($args...); } 
@function margin-x($index: 0, $basis: 10) {
  @if not unitless($index) { @return $index; }
  $factor: medium-value('margin-x-mod'); $spread: ceil($basis/6);
  @return pow($factor, $index/$spread) * medium-value('margin-x');
}
@function margin-y($index: 0, $basis: 10) {
  @if not unitless($index) { @return $index; }
  $factor: medium-value('margin-y-mod'); $spread: ceil($basis/6);
  @return pow($factor, $index/$spread) * medium-value('margin-y');
}
@function size($index: 0, $basis: 10) {
  @if not unitless($index) { @return $index; }
  $factor: medium-value('font-size-mod'); $spread: ceil($basis/6);
  @return pow($factor, $index/$spread) * 1rem;
}
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
@function m-string($args...) { @return medium-string($args...); }
@function medium($alias: $current-medium-alias) {
  @if $alias { @return map-get($media, $alias); }
  @return $base;
}
@function m($args...) { @return medium($args...); }
@function medium-orig($alias: $current-medium-alias) {
  @if $alias { @return map-get($media-orig, $alias); }
  @return $base-orig;
}
@function m-orig($args...) { @return medium-orig($args...); }
@mixin medium($aliases...) {
  $prev-medium-alias: $current-medium-alias;
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }
  @media #{medium-string($aliases...)} { @content }
  $current-medium-alias: $prev-medium-alias;
}
@mixin media($args...) { @include medium($args...) { @content; } }
@mixin m($args...) { @include medium($args...) { @content; } }
$medium-hd-ratio: (3,2);
@mixin hidpi($aliases...) {
  $n: nth($medium-hd-ratio, 1);
  $d: nth($medium-hd-ratio, 2);
  $ratio: $n/$d;
  $prev-medium-alias: $current-medium-alias;
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }
  @media screen and
    (-webkit-min-device-pixel-ratio: $ratio),
    (min--moz-device-pixel-ratio: $ratio),
    (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    (min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi),
    (min-resolution: $ratio * 1dppx) {
    @content;
  }
  $current-medium-alias: $prev-medium-alias;
}
@mixin hd($args...) { @include hidpi($args...) { @content; } }
@mixin each-medium($options:()) {
  $from: get($options, 'from');
  $to: get($options, 'to');
  $for: get($options, 'for');
  @if $for {
    @if contains($for, typo) { $for: join($for, margin-y line-height font-size-mod); }
    @if contains($for, margin-y) { $for: join($for, margin-y-mod); }
    @if contains($for, margin-x) { $for: join($for, margin-x-mod); }
  }
  @if $from == null { @content; }
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));
  @each $medium-alias in $sliced-aliases {
    $orig-keys: map-keys(medium-orig($medium-alias));
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any($orig-keys, $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}
@mixin all-media($args...) { @include each-medium($args...) { @content; } }

@function rem($values...) {
  @if $values == null { @return null; }
  @if type-of(nth($values, 1)) == 'list' { $values: nth($values, 1); }
  $size: strip(medium-value('font-size')); $result: ();
  @each $value in $values {
    @if index('rem' 'em', unit($value)) { $result: append($result, assert($value, rem), 'space'); }
    @else { $result: append($result, assert($value / $size, rem), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}
@function px($values...) {
  @if $values == null { @return null; }
  @if type-of(nth($values, 1)) == 'list' { $values: nth($values, 1); }
  $size: strip(medium-value('font-size')); $result: ();
  @each $value in $values {
    @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
    @else { $result: append($result, assert($value * $size, 'px'), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}
@function strip-lite($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }
@function relativize($val, $ref: 1) {
  $val-unit: unit($val); $ref-unit: unit($ref);
  $scale: medium-value('html-scale');
  @if $ref-unit == '%' { @warn 'cannot relativize value to a relative reference; exiting'; @return $val; }
  @if index($ref-unit $val-unit, 'em') { @warn 'cannot reliably relativize to em reference; plz use rem'; }
  @if $val-unit == '%' { $ref: 100; }
  @else if $val-unit == 'px' and index('em' 'rem', $ref-unit) { $ref: strip-lite($ref) * 16 * $scale; }
  @else if $ref-unit == 'px' and index('em' 'rem', $val-unit) { $ref: strip-lite($ref) / 16 / $scale; }
  @else if not unitless($ref) { $ref: strip-lite($ref); }
  @return strip-lite($val) / $ref;
}

$l_pre: 'l_' !default;
$l_page-class: 'page' !default;
$l_wrap-class: 'wrap' !default;
$l_sect-class: 'sect' !default;
$l_grid-class: 'grid' !default;
$l_col-class: 'col' !default;
$l-use-float: false !default; 
$l_grid-align: left !default; 
$l_wrap-align: false !default; 
$l_margin-x: 1rem !default;
$l_margin-y: 1rem !default;
$l_page-top: 1rem !default;
$l_page-right: 1rem !default;
$l_page-bottom: 1rem !default;
$l_page-left: 1rem !default;
@mixin grid-size($cols) {
  &::before { content: '#{$cols} .col'; }
}
@mixin grid-set($args...) {
  @extend %#{$l_grid-class};
  @if length($args) > 0 { @include grid-size($args...); }
}
@mixin col-size($span: 1 1, $right: null, $left: null, $cycle: null, $out: null) {
  @if type-of($span) == 'map' { @include col-size($span...); } @else {
  $n: nth($span, 1); $d: nth($span, 2);
  width: $n / $d * 100%;
  @if $right { margin-right: nth($right, 1) / if(length($right) > 1, nth($right, 2), $d) * 100%; }
  @if $left { margin-left: nth($left, 1) / if(length($left) > 1, nth($left, 2), $d) * 100%; }
  @if $cycle { &:nth-child(#{$cycle}n+1) { clear: left; } }
  @else if $out { position: absolute; #{opposite($out)}: 100%; }
  }
}
@mixin col-set($args...) {
  @extend %#{$l_col-class};
  @if length($args) > 0 { @include col-size($args...); }
}
@mixin parse-layout($output: true){
  @if $output {
    $margin-x: $l_margin-x;
    $margin-y: $l_margin-y;
    $page-top: $l_page-top;
    $page-right: $l_page-right;
    $page-bottom: $l_page-bottom;
    $page-left: $l_page-left;
    @if variable-exists('base') {
      $margin-x: get($base, 'margin-x');
      $margin-y: get($base, 'margin-y');
      $page-top: get($base, 'page-top');
      $page-right: get($base, 'page-right');
      $page-bottom: get($base, 'page-bottom');
      $page-left: get($base, 'page-left');
    }
    .#{$l_pre}#{$l_page-class}_top, [layout~='#{$l_page-class}_top'] {
      padding-top: $page-top;
    }
    .#{$l_pre}#{$l_page-class}_right, [layout~='#{$l_page-class}_right'] {
      padding-right: $page-right;
    }
    .#{$l_pre}#{$l_page-class}_bottom, [layout~='#{$l_page-class}_bottom'] {
      padding-bottom: $page-bottom;
    }
    .#{$l_pre}#{$l_page-class}_left, [layout~='#{$l_page-class}_left'] {
      padding-left: $page-left;
    }
    .#{$l_pre}#{$l_page-class}_x, [layout~='#{$l_page-class}_x'] {
      padding-left: $page-left;
      padding-right: $page-right;
    }
    .#{$l_pre}#{$l_page-class}_y, [layout~='#{$l_page-class}_y'] {
      padding-top: $page-top;
      padding-bottom: $page-bottom;
    }
    %#{$l_pre}#{$l_wrap-class}, [class*='#{$l_pre}#{$l_wrap-class}'], [layout*='#{$l_wrap-class}'] {
      @include clearfix();
      @if $l_wrap-align != left { margin-left: auto; }
      @if $l_wrap-align != right { margin-right: auto; }
    }
    .#{$l_pre}#{$l_wrap-class}--left, [layout~='#{$l_wrap-class}--left'] { margin-left: 0; }
    .#{$l_pre}#{$l_wrap-class}--right, [layout~='#{$l_wrap-class}--right'] { margin-right: 0; }
    .#{$l_pre}#{$l_sect-class},
    [layout*='#{$l_sect-class}_'],
    [class*='#{$l_pre}#{$l_sect-class}_'] {
      padding-top: $margin-y / 2;
      padding-bottom: $margin-y / 2;
    }
    %#{$l_pre}#{$l_grid-class},
    .#{$l_pre}#{$l_grid-class},
    [layout*='#{$l_grid-class}_'],
    [class*='#{$l_pre}#{$l_grid-class}_'] {
      &:before { display: none; }
      width: calc(100% + #{$margin-x}); 
      position: relative; 
      margin-left: $margin-x / -2;
      margin-right: $margin-x / -2;
      @if $l-use-float {
        @include clearfix();
      } @else {
        font-size: 0rem;
        & > * { font-size: 1rem; }
      }
    }
    %#{$l_pre}#{$l_col-class},
    .#{$l_pre}#{$l_col-class},
    [layout*='#{$l_col-class}_'],
    [class*='#{$l_pre}#{$l_col-class}_'] {
      width: 100%;
      min-height: 1px; 
      padding-left: $margin-x / 2;
      padding-right: $margin-x / 2;
      @if $l-use-float {
        display: block;
        float: $l_grid-align;
      } @else {
        display: inline-block;
        text-align: $l_grid-align;
        vertical-align: top;
      }
    }
    @if variable-exists('media') {
      @each $alias, $medium in $media {
        $margin-x: get($medium, 'margin-x');
        $margin-y: get($medium, 'margin-y');
        $page-top: get($medium, 'page-top');
        $page-right: get($medium, 'page-right');
        $page-bottom: get($medium, 'page-bottom');
        $page-left: get($medium, 'page-left');
        @include medium($alias) {
          $orig: medium-orig();
          .#{$l_pre}#{$l_page-class}_top { @if map-has-key($orig, 'page-top') { padding-top: $page-top; } }
          .#{$l_pre}#{$l_page-class}_right { @if map-has-key($orig, 'page-right') { padding-right: $page-right; } }
          .#{$l_pre}#{$l_page-class}_bottom { @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; } }
          .#{$l_pre}#{$l_page-class}_left { @if map-has-key($orig, 'page-left') { padding-left: $page-left; } }
          .#{$l_pre}#{$l_page-class}_x {
            @if map-has-key($orig, 'page-left') { padding-left: $page-left; }
            @if map-has-key($orig, 'page-right') { padding-right: $page-right; }
          }
          .#{$l_pre}#{$l_page-class}_y {
            @if map-has-key($orig, 'page-top') { padding-top: $page-top; }
            @if map-has-key($orig, 'page-bottom') { padding-bottom: $page-bottom; }
          }
          @if map-has-key($orig, 'margin-y') {
            .#{$l_pre}#{$l_sect-class},
            [layout*='#{$l_sect-class}_'],
            [class*='#{$l_pre}#{$l_sect-class}_'] {
              padding-top: $margin-y / 2;
              padding-bottom: $margin-y / 2;
            }
          }
          $media-keys: map-keys($media); $wrap_to: (); $wrap_fr: ();
          @each $alias in slice($media-keys, 1, index($media-keys, $alias)) {
            $wrap_fr: append($wrap_fr, unquote('.#{$l_pre}#{$l_wrap-class}_fr--#{$alias}'), 'comma');
            $wrap_fr: append($wrap_fr, unquote('[layout~="#{$l_wrap-class}_fr--#{$alias}"]'), 'comma');
          }
          @each $alias in slice($media-keys, index($media-keys, $alias), length($media-keys)) {
            $wrap_to: append($wrap_to, unquote('.#{$l_pre}#{$l_wrap-class}_to--#{$alias}'), 'comma');
            $wrap_to: append($wrap_to, unquote('[layout~="#{$l_wrap-class}_to--#{$alias}"]'), 'comma');
          }
          .#{$l_pre}#{$l_wrap-class}_all,
          [layout~='#{$l_wrap-class}_all'],
          .#{$l_pre}#{$l_wrap-class}_each,
          [layout~='#{$l_wrap-class}_each'],
          .#{$l_pre}#{$l_wrap-class}_at--#{$alias},
          [layout~='#{$l_wrap-class}_at--#{$alias}'],
          #{$wrap_fr}, #{$wrap_to} {
            max-width: medium-value('content-width');
          }
          @if map-has-key($orig, 'margin-x') {
            %#{$l_pre}#{$l_grid-class},
            .#{$l_pre}#{$l_grid-class},
            [layout*='#{$l_grid-class}_'],
            [class*='#{$l_pre}#{$l_grid-class}_'] {
              width: calc(100% + #{$margin-x}); 
              margin-left: $margin-x / -2;
              margin-right: $margin-x / -2;
            }
            %#{$l_pre}#{$l_col-class},
            .#{$l_pre}#{$l_col-class},
            [layout*='#{$l_col-class}_'],
            [class*='#{$l_pre}#{$l_col-class}_'] {
              padding-left: $margin-x / 2;
              padding-right: $margin-x / 2;
            }
          }
        }
      }
    }
  }
}

@mixin clearfix() {
  & { *zoom: 1; }
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
}
@mixin cf() { @include clearfix(); }
@function child-selector($selector) {
  @if str-index($selector, '&'){
    @return '#{$selector}';
  } @else {
    @return '& > #{$selector}';
  }
}
@mixin child-layout($selector, $type, $options...) {
  @if index(table-cell table-row cell row, $type) {
    width: 100%; 
    display: table;
    table-layout: fixed;
    border-collapse: collapse;
    #{child-selector($selector)} {
      @if index(table-row row, $type) {
        display: table-row;
        height: auto; 
        @if index($options, center) or index($options, centre) { text-align: center; }
        @else if index($options, right) { text-align: right;}
        @else { text-align: left; }
      }
      @else {
        display: table-cell;
        width: auto; 
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      overflow: hidden;
      @content;
    }
  }
  @else if index(inline-block iblock ib, $type) {
    font-size: 0px;
    @if index($options, justify) {
      text-align: justify;
      &:after, #{child-selector($selector)} {
        display: inline-block;
        max-width: 100%; 
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      &:after {
        content: '';
        width: 100%;
      }
      #{child-selector($selector)} {
        font-size: 1rem;
        @content;
      }
    }
    @else {
      &:before, #{child-selector($selector)} {
        display: inline-block;
        max-width: 100%; 
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      &:before {
        content: '';
        height: 100%;
      }
      #{child-selector($selector)} {
        font-size: 1rem;
        @content;
      }
      @if index($options, center) or index($options, centre) { text-align: center; }
      @else if index($options, right) { text-align: right;}
      @else { text-align: left; }
    }
  }
}

$t_current-size: null !default;
$t_current-height: null !default;
$t_min-height: 1.125 !default;
$t_line-div: 2 !default;
$t_pre: 't_' !default;
$t_single-class: 'single' !default;
$t_block-class: 'block' !default;
$t_container-class: 'contain' !default;
@mixin typo($size: 0, $height: auto){
  $size: if(unitless($size), size($size), if(unit($size) == 'px', rem($size), $size));
  @if $height == 'auto' {
    $line-div: $t_line-div or ceil($size);
    $rel-height: medium-value('line-height') / strip($size);
    $height: $rel-height * ceil($t_min-height / $rel-height * $t_line-div) / $t_line-div;
    $trim: (1 - $height) / 2;
  }
  font-size: $size;
  line-height: $height;
  margin-top: 0;
  margin-bottom: 0;
  $t_current-size: $size !global;
  $t_current-height: $height !global;
  &.#{$t_pre}#{$t_single-class}, [typo~='#{$t_single-class}'] {
    line-height: 1;
  }
  &.#{$t_pre}#{$t_block-class}, &[typo~='#{$t_block-class}'] {
    margin-top: margin-t(0rem);
    margin-bottom: margin-t(0rem);
  }
  .#{$t_pre}#{$t_container-class} &, [typo~='#{$t_container-class}'] & {
    @content;
    &:first-child { margin-top: margin-t(0rem); }
  }
  $t_current-size: null !global;
  $t_current-height: null !global;
}
@mixin t($args...) { @include typo($args...) { @content; } }
@function line-trim($line-height: null){
  $line-height: $line-height or $t_current-height or medium-value('line-height');
  @return ($line-height - 1em) / 2;
}
@function typo-margin($margin, $line-height: null){
  $margin: if(unitless($margin), margin-y($margin), $margin);
  @if strip($margin) == 0 { @return - line-trim($line-height); }
  @return calc(#{$margin} - #{line-trim($line-height)});
}
@function t-margin($args...) { @return typo-margin($args...); }
@function margin-t($args...) { @return typo-margin($args...); }
