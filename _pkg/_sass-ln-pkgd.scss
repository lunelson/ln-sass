//                     _
//                    | |
//  _ __ ___  ___  ___| |_ ___
// | '__/ _ \/ __|/ _ \ __/ __|
// | | |  __/\__ \  __/ |_\__ \
// |_|  \___||___/\___|\__|___/

@mixin resets() {
  @include reset-n3();
  @include reset-ln();
}

@mixin reset-n3(){
  // normalize.css v3.0.2 | MIT License | git.io/normalize
  html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
  body{margin:0}
  article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}
  audio,canvas,progress,video{display:inline-block;vertical-align:baseline}
  audio:not([controls]){display:none;height:0}
  [hidden],template{display:none}
  a{background-color:transparent}
  a:active,a:hover{outline:0}
  abbr[title]{border-bottom:1px dotted}
  b,strong{font-weight:bold}
  dfn{font-style:italic}
  h1{font-size:2em;margin:.67em 0}
  mark{background:#ff0;color:#000}
  small{font-size:80%}
  sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
  sup{top:-0.5em}
  sub{bottom:-0.25em}
  img{border:0}
  svg:not(:root){overflow:hidden}
  figure{margin:1em 40px}
  hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
  pre{overflow:auto}
  code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}
  button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}
  button{overflow:visible}
  button,select{text-transform:none}
  button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
  button[disabled],html input[disabled]{cursor:default}
  button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
  input{line-height:normal}
  input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
  input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}
  input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}
  input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
  fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
  legend{border:0;padding:0}
  textarea{overflow:auto}
  optgroup{font-weight:bold}
  table{border-collapse:collapse;border-spacing:0}
  td,th{padding:0}
}

@mixin reset-ln(){
  *, *:before, *:after { box-sizing: inherit; } // inherit box sizing (from html)
  html, body { height: 100%; } // set height to 100%; needed for various shit
  html {
    box-sizing: border-box; // will be inherited by all elements
    -webkit-font-smoothing: antialiased; // unify font rendering
    -moz-osx-font-smoothing: grayscale; // ''
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0); // remove webkit tap highlight color
    text-rendering: optimizespeed; // fixes a webkit bug re: optimizelegibility?
  }
}

//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

$base: () !default;
$base-orig: ();

$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;
$media-orig: ();

@mixin parse-media($output: true) {

  // backup and merge against defaults
  $base-orig: $base;

  $base: map-merge((
      font-size: 16px,
      font-size-mod: 1.5,
      line-height: 1.5,
      margin-x: 1rem,
      margin-x-mod: 1.5,
      margin-y: 1.5rem,
      margin-y-mod: 1.5,
      body-top: 1rem,
      body-right: 1rem,
      body-bottom: 1rem,
      body-left: 1rem,
    ), $base);

  // correct for font-size and line-height units/non-units
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) == 'px' { $font-size: $font-size / 16px; }
  $font-size: assert($font-size, rem);
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
  $html-scale: strip($font-size);
  // .. and for pixel-united other values
  $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
  }

  // merge it all back to default
  $base: map-merge($base, $corrected-values);

  @if $output {

    /////////////////////
    // default-medium //
    /////////////////////

    // JSON format string output for pickup in JS

    $medium-key-list: ();
    @each $key in map-keys($media) {
      $medium-key-list: append($medium-key-list, quote($key), 'comma');
    }

    body::before {
      width: 0;
      height: 0;
      display: block;
      overflow: hidden;
      content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
    }

    // nb: some approaches recommend using html instead of head here, and then resetting real font-family on body
    head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }

    .util--medium { width: 0; transition: width 1ms; }

    // styles

    html { font-size: percentage(map-get($base, 'html-scale')); }

    body {
      line-height: map-get($base, 'line-height');
      padding-top: map-get($base, 'body-top');
      padding-bottom: map-get($base, 'body-bottom');
    }
  }

  //////////////
  // media //
  //////////////

  // backup data first
  $media-orig: $media;

  // TODO: add a conditional re-assignment here, rather than the default thing above

  @if $media != () {

    // maintain a reference-medium upon which to merge each medium in media
    $reference-medium: $base;

    // collect and sort the breakpoint media
    $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');

    @each $medium-alias, $medium in $sorted-media {

      // merge medium to reference
      $reference-medium: map-merge($reference-medium, $medium);

      // correct for font-size and line-height units/non-units
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) == 'px' { $font-size: $font-size / 16px; }
      @else { $font-size: assert($font-size, rem); }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
      $html-scale: strip($font-size);
      // ..and for pixel-united other values
      $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
      }
      // merge corrections back to reference
      $reference-medium: map-merge($reference-medium, $corrected-values);

      // merge some additions to reference
      $body-width: assert(map-get($reference-medium, 'breakpoint') / $html-scale, rem);
      $content-width: $body-width - (map-get($reference-medium, 'body-left') + map-get($reference-medium, 'body-right'));
      $reference-medium: map-merge($reference-medium, ('body-width': $body-width, 'content-width': $content-width));

      // merge reference back to master
      $media: map-merge($media, ($medium-alias: $reference-medium));

      @if $output {
        $font-size: map-get($medium, 'font-size');
        $line-height: map-get($medium, 'line-height');
        $body-top: map-get($medium, 'body-top');
        $body-bottom: map-get($medium, 'body-bottom');

        @include medium($medium-alias) {

          body::before { content: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }

          .util--medium { width: index(map-keys($media), $medium-alias) * 1px; }

          // output CSS if spec'd by user

          @if $font-size { html { font-size: percentage(map-get($reference-medium, 'html-scale')); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
          @if $body-top { body { margin-top: map-get($reference-medium, 'body-top'); } }
          @if $body-bottom { body { margin-bottom: map-get($reference-medium, 'body-bottom'); } }

        }
      }
    }
  }
}


//                     _ _                    _   _ _
//                    | (_)                  | | (_) |
//  _ __ ___   ___  __| |_  __ _ ______ _   _| |_ _| |
// | '_ ` _ \ / _ \/ _` | |/ _` |______| | | | __| | |
// | | | | | |  __/ (_| | | (_| |      | |_| | |_| | |
// |_| |_| |_|\___|\__,_|_|\__,_|       \__,_|\__|_|_|

/////////////
// GLOBALS //
/////////////

$current-medium-alias: null;

///////////////
// FUNCTIONS //
///////////////

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
// alias
@function m-string($args...) { @return medium-string($args...); }


// retrieve current width medium object
@function medium($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media, $medium-alias); }
  @return if($medium, $medium, $base);
}
// alias
@function m($args...) { @return medium($args...); }

// function to retrieve current medium-data-object based on $current-medium-alias
@function medium-orig($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media-orig, $medium-alias); }
  @return if($medium, $medium, $base);
}
// alias
@function m-orig($args...) { @return medium-orig($args...); }

// function to retrieve value for current medium
@function medium-value($key, $alias: $current-medium-alias) {
  @return map-get(medium($alias), $key);
}
// alias
@function m-value($args...) { @return medium-value($args...); }

////////////
// MIXINS //
////////////

// mixin to output width media medium
@mixin medium($aliases...) {

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media #{medium-string($aliases...)} { @content }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin m($args...) { @include medium($args...); }

// default hd ratio
$medium-hd-ratio: (3,2);

// hd media query
@mixin hidpi($aliases...) {

  $n: nth($medium-hd-ratio, 1);
  $d: nth($medium-hd-ratio, 2);
  $ratio: $n/$d;

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media screen and
    (-webkit-min-device-pixel-ratio: $ratio),
    (min--moz-device-pixel-ratio: $ratio),
    (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    (min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi),
    (min-resolution: $ratio * 1dppx) {
    @content;
  }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin hd($args...) { @include hidpi($args...); }

// multi width medium -- combines both medium-each() and medium-for()
@mixin each-medium($options:()) {

  // get 'from', 'to' and 'for'
  $from: get($options, 'from');
  $to: get($options, 'to');
  $for: get($options, 'for');

  // correct 'for' options
  @if contains(root base default, $from) { $from: null; }
  @if $for {
    @if contains($for, margin-y) { $for: append($for, margin-y-modulation)}
    @if contains($for, margin-x) { $for: append($for, margin-x-modulation)}
    @if contains($for, font-size) { $for: append($for, font-size-modulation); }
    @if contains($for, trim) { $for: append($for, line-height); }
    @if contains($for, line-height) { $for: append($for, trim); }
  }

  // output the @content raw, if $from is null
  @if $from == null { @content; }

  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));

  // conditional per-medium actions
  @each $medium-alias in $sliced-aliases {
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any(keys(medium-orig($medium-alias)), $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}
// alias
@mixin media($args...) { @include each-medium($args...); }

//                     _ _                          _ _
//                    | (_)                        (_) |
//  _ __ ___   ___  __| |_  __ _ ______ _   _ _ __  _| |_ ___
// | '_ ` _ \ / _ \/ _` | |/ _` |______| | | | '_ \| | __/ __|
// | | | | | |  __/ (_| | | (_| |      | |_| | | | | | |_\__ \
// |_| |_| |_|\___|\__,_|_|\__,_|       \__,_|_| |_|_|\__|___/

/////////////
// GLOBALS //
/////////////

// unit preference
$media-use-rems: true;

///////////////
// FUNCTIONS //
///////////////

// function to convert value(s) to rem, following medium scale
@function rem($values...) {
  @if $values == null { @return null; }
  $scale: medium-value('html-scale');
  $unit: if($media-use-rems, 'rem', 'em');
  $result: ();
  @each $value in $values {
    @if index('rem' 'em', unit($value)) { $result: append($result, assert($value, $unit), 'space'); }
    @else { $result: append($result, assert($value / $scale / 16, $unit), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}

// function to convert value(s) to px, following medium scale
@function px($values...) {
  @if $values == null { @return null; }
  $scale: medium-value('html-scale');
  $result: ();
  @each $value in $values {
    @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
    @else { $result: append($result, assert($value * $scale * 16, 'px'), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}

@function unit-strip($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }

@function relativize($val, $ref: 1) {
  $val-unit: unit($val); $ref-unit: unit($ref);
  $scale: medium-value('html-scale');
  // checks
  @if $ref-unit == '%' { @warn 'cannot relativize value to a relative reference; exiting'; @return $val; }
  @if index($ref-unit $val-unit, 'em') { @warn 'cannot reliably relativize to em reference; plz use rem'; }
  // corrections
  @if $val-unit == '%' { $ref: 100; }
  @else if $val-unit == 'px' and index('em' 'rem', $ref-unit) { $ref: unit-strip($ref) * 16 * $scale; }
  @else if $ref-unit == 'px' and index('em' 'rem', $val-unit) { $ref: unit-strip($ref) / 16 / $scale; }
  @else if not unitless($ref) { $ref: unit-strip($ref); }
  @return unit-strip($val) / $ref;
}


// layout fundaments
$layout-grid-float: left !default; // right | left | false
$layout-wrap-alignment: false !default; // right | left | false

@mixin parse-layout($output: true){

  @if $output {

    $margin-x: 2rem;
    $margin-y: 2rem;
    $body-right: 2rem;
    $body-left: 2rem;

    // get dimensions from '$base' if it exists
    @if variable-exists('base') {
      $margin-x: get($base, 'margin-x');
      $margin-y: get($base, 'margin-y');
      $body-right: get($base, 'body-right');
      $body-left: get($base, 'body-left');
    }

    // SPREAD, WRAP, GRID, CELL
    %spread, .spread, [class*='spread--'], [l='spread'] {
      padding-left: $body-left;
      padding-right: $body-right;
    }
    %wrap, .wrap, [class*='wrap--'], [l='wrap'] {
      margin-left: auto;
      margin-right: auto;
    }
    %section, .section, [class*='section--'], [l='section'] {
      padding-top: $margin-y / 2;
      padding-bottom: $margin-y / 2;
    }
    %grid, .grid, [class*='grid--'], [l='grid'] {
      width: calc(100% + #{$margin-x});
      margin-left: $margin-x / -2;
      margin-right: $margin-x / -2;
    }
    %cell, .cell, [class*='cell--'], [l='cell'] {
      display: block; float: left;
      width: 100%;
      padding-left: $margin-x / 2;
      padding-right: $margin-x / 2;
    }

    @if variable-exists('media') {

      @each $alias, $medium in $media {
        $margin-x: get($medium, 'margin-x');
        $margin-y: get($medium, 'margin-y');
        $body-right: get($medium, 'body-right');
        $body-left: get($medium, 'body-left');

        @include medium($alias) {

          $orig: medium-orig();

          // SPREAD
          %spread, .spread, [class*='spread--'], [l='spread'] {
            @if map-has-key($orig, 'body-left') { padding-left: $body-left; }
            @if map-has-key($orig, 'body-right') { padding-right: $body-right; }
          }

          // SECTION
          @if map-has-key($orig, 'margin-y') {
            %section, .section, [class*='section--'], [l='section'] {
              padding-top: $margin-y / 2;
              padding-bottom: $margin-y / 2;
            }
          }

          // WRAP
          $keys: map-keys($media); $wrap-each-to: (); $wrap-each-from: ();
          @each $alias in slice($keys, 1, index($keys, $alias)) {
            $wrap-each-from: append($wrap-each-from, unquote('.wrap--each_from--#{$alias}'), 'comma');
          }
          @each $alias in slice($keys, index($keys, $alias), length($keys)) {
            $wrap-each-to: append($wrap-each-to, unquote('.wrap--each_to--#{$alias}'), 'comma');
          }
          .wrap--#{$alias} { max-width: medium-value('content-width', $alias); }
          .wrap--each, #{$wrap-each-from}, #{$wrap-each-to} { max-width: medium-value('content-width'); }

          // GRID, CELL
          @if map-has-key($orig, 'margin-x') {
            %grid, .grid, [class*='grid--'], [l='grid'] {
              width: calc(100% + #{$margin-x});
              margin-left: $margin-x / -2;
              margin-right: $margin-x / -2;
            }
            %cell, .cell, [class*='cell--'], [l='cell'] {
              padding-left: $margin-x / 2;
              padding-right: $margin-x / 2;
            }
          }
        }
      }
    }
  }

}

//       _     _ _     _        _                         _
//      | |   (_) |   | |      | |                       | |
//   ___| |__  _| | __| |______| | __ _ _   _  ___  _   _| |_
//  / __| '_ \| | |/ _` |______| |/ _` | | | |/ _ \| | | | __|
// | (__| | | | | | (_| |      | | (_| | |_| | (_) | |_| | |_
//  \___|_| |_|_|_|\__,_|      |_|\__,_|\__, |\___/ \__,_|\__|
//                                       __/ |
//                                      |___/

// RE peudo elements

// http://nicolasgallagher.com/an-introduction-to-css-pseudo-element-hacks/
// http://css-tricks.com/pseudo-element-roundup/

// RE table display

// table-layout - CSS | MDN | https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout
// Fixed Table Layouts | CSS-Tricks | http://css-tricks.com/fixing-tables-long-strings/
// ungrid - the simplest responsive css grid | https://chrisnager.github.io/ungrid/
// Pure CSS, equal-width navigation tabs | http://jsfiddle.net/csswizardry/zfSt4/


@function child-selector($selector) {
  @if str-index($selector, '&'){
    @return '#{$selector}';
  } @else {
    @return '& > #{$selector}';
  }
}

@mixin child-layout($selector, $type, $options...) {

  ///////////
  // TABLE //
  ///////////

  @if index(table-cell table-row cell row, $type) {
    width: 100%; // force auto size of children
    display: table;
    table-layout: fixed;
    border-collapse: collapse;
    #{child-selector($selector)} {
      @if index(table-row row, $type) {
        display: table-row;
        height: auto; // base setting
        @if index($options, center) or index($options, centre) { text-align: center; }
        @else if index($options, right) { text-align: right;}
        @else { text-align: left; }
      }
      @else {
        display: table-cell;
        width: auto; // base setting
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      overflow: hidden;
      @content;
    }
  }

  //////////////////
  // INLINE BLOCK //
  //////////////////

  @else if index(inline-block iblock ib, $type) {
    font-size: 0px;
    @if index($options, justify) {
      text-align: justify;
      &:after, #{child-selector($selector)} {
        display: inline-block;
        max-width: 100%; // ff bug
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      &:after {
        content: '';
        width: 100%;
      }
      #{child-selector($selector)} {
        font-size: 1rem;
        @content;
      }
    }
    @else {
      &:before, #{child-selector($selector)} {
        display: inline-block;
        max-width: 100%; // ff bug
        @if index($options, bottom) { vertical-align: bottom; }
        @else if index($options, middle) { vertical-align: middle;}
        @else { vertical-align: top; }
      }
      &:before {
        content: '';
        height: 100%;
      }
      #{child-selector($selector)} {
        font-size: 1rem;
        @content;
      }
      @if index($options, center) or index($options, centre) { text-align: center; }
      @else if index($options, right) { text-align: right;}
      @else { text-align: left; }
    }
  }
}

// @mixin col($span, $margins-and-edge...) {}
// span: 1 or 2 item list
// margins: list-map with right and/or left args
// edge: cycle [d], alpha, omega, both
// .test {
//   @include col(1 2, right 1, left -1);
//   @include col(1 2, cycle);
//   @include col(1 2, right 1, cycle);
//   @include col(1 1)
//   // if no span argp
// }




// @mixin cell2($span, $margins-and-edge...){
//   $margins: null; $edge: cycle;
//   // $right: null; $left: null;
//   $args-length: length($margins-and-edge);
//   @if $args-length > 0 {
//     $margins: slice($margins-and-edge, 1, $args-length - 1);
//     $edge: nth($margins-and-edge, $args-length);
//     $right: list-get($margins, right);
//     $left: list-get($margins, left);
//   }
//   $gutter: medium-value('margin-x');

//   $span-n: nth($span, 1);
//   $span-d: nth($span, 2);
//   width: calc((100% + #{$gutter}) * (#{$span-n} / #{$span-d}));

//   $left-n: nth($left, 1);
//   $left-d: if(length($left) > 1, nth($left, 2), $span-d);
//   $left-width: if($left, '(100% + #{$gutter}) * (#{$left-n} / #{$left-d})', '0%');

//   $right-n: nth($right, 1);
//   $right-d: if(length($right) > 1, nth($right, 2), $span-d);
//   $right-width: if($right, '(100% + #{$gutter}) * (#{$right-n} / #{$right-d})', '0%');

//   $cycle-d: if(length($edge) > 1, nth($edge, 2), $span-d);

//   $is-alpha: $edge == alpha;
//   $is-omega: $edge == omega;
//   $is-cycle: nth($edge, 1) == cycle;

//   $left-corr: if($is-alpha or $is-cycle, '#{$gutter / -2}', '0');
//   $right-corr: if($is-omega or $is-cycle, '#{$gutter / -2}', '0');

//   @if index(out outside, $left-n) {
//     margin-left: calc(#{$left-corr} + (100% + #{$gutter}) * (-#{$span-n} / #{$span-d}));
//   }
//   @else if index(out outside, $right-n) {
//     margin-right: calc(#{$right-corr} + #{$right-width});
//   }
//   @else if $cycle-d == 1 {
//     // require both corrected
//     margin-left: calc(#{$left-corr} + #{$left-width});
//     margin-right: calc(#{$right-corr} + #{$right-width});
//   }
//   @else if $is-cycle and $cycle-d > 1 {
//     // output both uncorrected if given
//     margin-right: if($right, calc(#{$right-width}), 0);
//     margin-left: if($left, calc(#{$left-width}), 0);
//     // @if $left { margin-left: calc(#{$left-width}); }
//     // @if $right { margin-right: calc(#{$right-width}); }
//     // require both corrected for nth-child cases
//     &:nth-child(#{$cycle-d}n+1){
//       @if $layout-grid-float { clear: left; } // clear if layout is float
//       margin-left: calc(#{$left-corr} + #{$left-width});
//     }
//     &:nth-child(#{$cycle-d}n){
//       margin-right: calc(#{$right-corr} + #{$right-width});
//     }
//   }
//   @else if $is-alpha {
//     // clear if layout is float
//     @if $layout-grid-float { clear: left; }
//     // require left corrected
//     margin-left: calc(#{$left-corr} + #{$left-width});
//     // output right uncorrected if given, or 0
//     margin-right: if($right, calc(#{$right-width}), 0);
//   }
//   @else if $is-omega {
//     // require right corrected
//     margin-right: calc(#{$right-corr} + #{$right-width});
//     // output left uncorrected if given, or 0
//     margin-left: if($left, calc(#{$left-width}), 0);
//   }
//   @else {
//     // output both uncorrected if given, or 0
//     margin-right: if($right, calc(#{$right-width}), 0);
//     margin-left: if($left, calc(#{$left-width}), 0);
//     // @if $left { margin-left: calc(#{$left-width}); }
//     // @if $right { margin-right: calc(#{$right-width}); }
//     // require both corrected for first-/last-child cases
//     &:first-child, &.alpha { margin-left: calc(#{$gutter / -2} + #{$left-width}); }
//     &:last-child, &.omega { margin-right: calc(#{$gutter / -2} + #{$right-width}); }

//   }


//   .debug {
//     span: $span;
//     right: $right;
//     right-width: $right-width;
//     left: $left-width;
//     edge: $edge;
//     cycle-d: $cycle-d;
//   }

// }

// @mixin cell($spec: ()) {

//   $span: map-get($spec, span);
//   $left: map-get($spec, left);
//   $right: map-get($spec, right);
//   $edge: map-get($spec, edge) or map-get($spec, edges) or cycle;

//   $is-alpha: $edge == alpha;
//   $is-omega: $edge == omega;
//   $is-both: $edge == both;
//   $is-cycle: nth($edge, 1) == cycle;

//   $span-n: nth($span, 1);
//   $span-d: nth($span, 2);
//   width: calc((100% + #{$gutter}) * (#{$span-n} / #{$span-d}));

//   $left-n: nth($left, 1);
//   $left-d: if(length($left) > 1, nth($left, 2), $span-d);
//   $left-width: if($left, '(100% + #{$gutter}) * (#{$left-n} / #{$left-d})', '0%');

//   $right-n: nth($right, 1);
//   $right-d: if(length($right) > 1, nth($right, 2), $span-d);
//   $right-width: if($right, '(100% + #{$gutter}) * (#{$right-n} / #{$right-d})', '0%');

//   $left-corr: if($is-alpha or $is-both or $is-cycle, '#{$gutter / -2}', '0');
//   $right-corr: if($is-omega or $is-both or $is-cycle, '#{$gutter / -2}', '0');

//   @if index(out outside, $left-n) {
//     margin-left: calc(#{$left-corr} + (100% + #{$gutter}) * (-#{$span-n} / #{$span-d}));
//     // margin-right: 100%;
//     // margin-bottom: -100%;
//   }
//   @else if index(out outside, $right-n) {
//     margin-right: calc(#{$right-corr} + #{$right-width});
//     // margin-left: 100%;
//     // margin-bottom: -100%;
//   }
//   @else if $is-cycle and $cycle-d > 1 {
//     // output both uncorrected if given
//     // require both corrected for nth-child cases
//     @if $left { margin-left: calc(#{$left-width}); }
//     @if $right { margin-right: calc(#{$right-width}); }
//     &:nth-child(#{$cycle-d}n+1){
//       @if $float { clear: left; } // clear if layout is float
//       margin-left: calc(#{$left-corr} + #{$left-width});
//     }
//     &:nth-child(#{$cycle-d}n){
//       margin-right: calc(#{$right-corr} + #{$right-width});
//     }
//   }
//   @else if $cycle-d == 1 or $is-both {
//     // require both corrected
//     margin-left: calc(#{$left-corr} + #{$left-width});
//     margin-right: calc(#{$right-corr} + #{$right-width});
//   }
//   @else if $is-alpha {
//     // require left corrected; output right if given
//     @if $float { clear: left; } // clear if layout is float
//     margin-left: calc(#{$left-corr} + #{$left-width});
//     @if $right { margin-right: calc(#{$right-width}); }
//   }
//   @else if $is-omega {
//     // require right corrected; output left if given
//     margin-right: calc(#{$right-corr} + #{$right-width});
//     @if $left { margin-left: calc(#{$left-width}); }
//   }
//   @else {
//     // output both uncorrected if given
//     // require both corrected for first-/last-child cases
//     @if $left { margin-left: calc(#{$left-width}); }
//     @if $right { margin-right: calc(#{$right-width}); }
//     &:first-child, &.alpha { margin-left: calc(#{$gutter / -2} + #{$left-width}); }
//     &:last-child, &.omega { margin-right: calc(#{$gutter / -2} + #{$right-width}); }

//   }
// }



//  _                                           _
// | |                                         | |
// | |_ _   _ _ __   ___   __ _ _ __ __ _ _ __ | |__  _   _
// | __| | | | '_ \ / _ \ / _` | '__/ _` | '_ \| '_ \| | | |
// | |_| |_| | |_) | (_) | (_| | | | (_| | |_) | | | | |_| |
//  \__|\__, | .__/ \___/ \__, |_|  \__,_| .__/|_| |_|\__, |
//       __/ | |           __/ |         | |           __/ |
//      |___/|_|          |___/          |_|          |___/

/////////////
// GLOBALS //
/////////////

$typo-current-size: null;
$typo-current-height: null;
$typo-min-height: 1.125;
$typo-line-div: 2;

///////////
// MIXIN //
///////////

@mixin typo($size, $height: auto){
  $size: if(unit($size) == 'px', rem($size), $size);
  @if $height == 'auto' {
    $line-div: $typo-line-div or ceil($size);
    $rel-height: medium-value('line-height') / strip($size);
    $height: $rel-height * ceil($typo-min-height / $rel-height * $typo-line-div) / $typo-line-div;
    $trim: (1 - $height) / 2;
  }
  $typo-current-size: $size !global;
  $typo-current-height: $height !global;
  font-size: $size;
  line-height: $height;
  @content;
  $typo-current-size: null !global;
  $typo-current-height: null !global;
}

///////////////
// FUNCTIONS //
///////////////

@function margin-x($index: 1, $basis: 10) {
  $factor: medium-value('margin-x-mod');
  $spread: ceil($basis/6);
  @return if($index == 0, 0rem, pow($factor, ($index - 1)/$spread) * medium-value('margin-x'));
}

@function margin-y($index: 1, $basis: 10) {
  $factor: medium-value('margin-y-mod');
  $spread: ceil($basis/6);
  @return if($index == 0, 0rem, pow($factor, ($index - 1)/$spread) * medium-value('margin-y'));
}

@function size($index: 1, $basis: 10) {
  $factor: medium-value('font-size-mod');
  $spread: ceil($basis/6);
  @return if($index == 0, 0rem, pow($factor, ($index - 1)/$spread) * medium-value('font-size'));
}

@function typo-margin($margin, $line-height: null){
  $margin: if(unitless($margin), margin-y($margin), $margin);
  $line-height: $line-height or $typo-current-height or medium-value('line-height');
  @return calc(#{$margin} - #{($line-height - 1em)/2});
}
// alias
@function t-margin($args...) { @return typo-margin($args...); }
@function margin-t($args...) { @return typo-margin($args...); }