typo2
-	allow set-typo to take arbitrary size and margin
	- if rem, leave it alone
	- if px, convert to rem
	- if unitless, assume it's a pos/neg index, default 0
-	configure size() and margin() functions to take index and sub-index arguments
	e.g. size(1, -1); margin(0, 1)
-

typo
-	new -- set-typo()
	-	bring the logic in to a single 'set-typo()' mixin
		- function works for current-query; meant to be nested in a query() mixin
	-	set-typo($t-alias, [args...])
		-	possibly use $options map in place of args
		-	get the current query
		-	check for t-alias in current-query [ typo = if get(current, t-alias)]
		-	if yes -> parse typo to output
		-	if no -> calc the values, merge them to current query under t-alias, output them
-	new -- set-typo-all() or set-all-typo() or setup-typo($t-alias, [args...])
	-	run all query scopes from base through any queries with line-height or margin-y
	-	using 'set-typo()' function inside a query() mixin block
-	new -- set-typo-query() or set-query-typo or query-typo($q-alias, $t-alias, [args...])
	-	$q-alias can be a single string or a list; must parse whether this is min-width or max-width
	-	if min-width, slice query-keys at index(query-keys, q-alias)
		-	process from there UP
		-	only for queries with margin-y or line-height
	-	if max-width, slide query-keys at index(query-keys, q-alias)
		-	process base, then queries up to slice point, if they contain margin-y or line-height
	-	alternate function `set-query-typo($query-alias, h1, s1)`
		-	* NB $query-alias can be a list i.e. 'null beta'
		-	* if max-width, do base and everything up to query
		-	* if min-width, do query and following queries
		-	* if min and max, do in between obvi
-	feat -- margins vs height queries
	-	how to manage tracking margins over different kinds of queries?
	-	probably have to choose between width/height or width-only query system, fundamentally

-	typo stuff generally -- make more flexible, less opinionated
	-	forget use of @extend until @at-root and '&' interpolation arrive in libsass
	-	remove the margin-ref and size-ref resolution code in favor of get-size, get-margin
	-	allow the setup function to take and register new assignments
		-	* NB this means that size-assignments have to be merge to query-data
	-	allow it to handle 'size-modifier' from $font-data

-	* create html test suite for typesetting
	-	nb. will need adjacent selector handling

margin and size
-	make less opinionated
	-	write the set-margin() and set-size() mixins
	-	start with margin first
		-	base function creates margins only for given context;
			-	allows different modular scales at different queries
			-	could even create some generic classes along with grid setup e.g. .mt3, .mb5 etc.
		-	set-query-margin() function runs base function per query/ies, as with typo
-	create functions to define font-family
+-	add grid routines, parsing through query to set .col & .row vars
+-	allow setup-margins() and setup-sizes() mixins to take arguments; resolve offset question
-	add query-value() and q-value() alias functions
- 	add query-for($keys...) mixin -- media query for all aliases that have given keys;
+- 	figure out why get returns double-nested map
+- 	include reset code in base setup?
-	implement JSON output of query-data to head { font-family }
-	reset stuff
	-	font normalization
	-	svg normalization
	-	supports for picturefill 2
	-	other html5 shit
