//                     _ _                    _   _ _
//                    | (_)                  | | (_) |
//  _ __ ___   ___  __| |_  __ _ ______ _   _| |_ _| |
// | '_ ` _ \ / _ \/ _` | |/ _` |______| | | | __| | |
// | | | | | |  __/ (_| | | (_| |      | |_| | |_| | |
// |_| |_| |_|\___|\__,_|_|\__,_|       \__,_|\__|_|_|

/////////////
// GLOBALS //
/////////////

$current-medium-alias: null;

///////////////
// FUNCTIONS //
///////////////

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
// alias
@function m-string($args...) { @return medium-string($args...); }


// retrieve current width medium object
@function medium($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media, $medium-alias); }
  @return if($medium, $medium, $base);
}
// alias
@function m($args...) { @return medium($args...); }

// function to retrieve current medium-data-object based on $current-medium-alias
@function medium-orig($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media-orig, $medium-alias); }
  @return if($medium, $medium, $base);
}
// alias
@function m-orig($args...) { @return medium-orig($args...); }

// function to retrieve value for current medium
@function medium-value($key, $alias: $current-medium-alias) {
  @return map-get(medium($alias), $key);
}
// alias
@function m-value($args...) { @return medium-value($args...); }

////////////
// MIXINS //
////////////

// mixin to output width media medium
@mixin medium($aliases...) {

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media #{medium-string($aliases...)} { @content }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin m($args...) { @include medium($args...); }

// default hd ratio
$medium-hd-ratio: (3,2);

// hd media query
@mixin hidpi($aliases...) {

  $n: nth($medium-hd-ratio, 1);
  $d: nth($medium-hd-ratio, 2);
  $ratio: $n/$d;

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media screen and
    (-webkit-min-device-pixel-ratio: $ratio),
    (min--moz-device-pixel-ratio: $ratio),
    (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    (min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi),
    (min-resolution: $ratio * 1dppx) {
    @content;
  }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin hd($args...) { @include hidpi($args...); }

// multi width medium -- combines both medium-each() and medium-for()
@mixin each-medium($options:()) {

  // get 'from', 'to' and 'for'
  $from: get($options, 'from');
  $to: get($options, 'to');
  $for: get($options, 'for');

  // correct 'for' options
  @if contains(root base default, $from) { $from: null; }
  @if $for {
    @if contains($for, margin-y) { $for: append($for, margin-y-modulation)}
    @if contains($for, margin-x) { $for: append($for, margin-x-modulation)}
    @if contains($for, font-size) { $for: append($for, font-size-modulation); }
    @if contains($for, trim) { $for: append($for, line-height); }
    @if contains($for, line-height) { $for: append($for, trim); }
  }

  // output the @content raw, if $from is null
  @if $from == null { @content; }

  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));

  // conditional per-medium actions
  @each $medium-alias in $sliced-aliases {
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any(keys(medium-orig($medium-alias)), $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}
// alias
@mixin media($args...) { @include each-medium($args...); }
