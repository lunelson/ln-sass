//              _ _
//             (_) |
//  _   _ _ __  _| |_ ___
// | | | | '_ \| | __/ __|
// | |_| | | | | | |_\__ \
//  \__,_|_| |_|_|\__|___/

@function one($unit:'') {
  $one: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
  @return map-get($one, $unit) or 1;
}
@function strip($value) { @return if(unitless($value), $value, $value / one(unit($value))); }
@function assert($value, $unit: '') { @return strip($value) * one($unit); }
// @function convert($value, $unit: '') { @return one($unit) + $value; }

// the classic unit stripping hack
@function strip-alt($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }

@function has-unit($number, $unit: null) {
  @if $unit { @return unit($number) == $unit; }
  @return not unitless($number);
}

@function unit-relative($number){
  @return index('%' 'ex' 'rem' 'em' 'vh' 'vw' 'vmin' 'vmax', unit($number));
}
@function unit-absolute($number){
  @return not index('%' 'ex' 'rem' 'em' 'vh' 'vw' 'vmin' 'vmax', unit($number)) and not unitless($number);
}

@function unit-type($number) {
  @if index('%' 'ex' 'rem' 'em' 'vh' 'vw' 'vmin' 'vmax', unit($number)) {
    @return "relative";
  } @else if not unitless($number) {
    @return "absolute";
  } @else {
    @return "unitless";
  }
}


//                  _   _
//                 | | | |
//  _ __ ___   __ _| |_| |__
// | '_ ` _ \ / _` | __| '_ \
// | | | | | | (_| | |_| | | |
// |_| |_| |_|\__,_|\__|_| |_|

@function modular-scale($base, $power, $spread) { @return pow($base, $power / $spread); }

@function trend($value, $c1: 0 0, $c2: 1 1) {
  $x1: nth($c1, 1); $y1: nth($c1, 2);
  $x2: nth($c2, 1); $y2: nth($c2, 2);
  $m: ($y2 - $y1) / ($x2 - $x1);
  @return $y1 + $m * ($value - $x1);
}

@function sum(){}

@function average(){}

@function weighted-average(){}

@function gcd($a, $b) {
  @if $b == 0 { @return abs($a); }
  @return gcd($b, $a % $b);
}

@function reduce($n, $d) {
  $g: gcd($n, $d);
  @return ($n/$g, $d/$g)
}

// NEW

@function limit($number, $limit1, $limit2) {
  $max: max($limit1, $limit2);
  $min: min($limit1, $limit2);
  @if comparable($number, $min) and comparable($number, $max) {
    $number: min(max($number, $min), $max);
  }
  @return $number;
}

@function E() {
  @return 2.71828182845;
}
@function PI() {
  @return 3.14159265359;
}
@function TAU() {
  @return 2 * PI();
}
@function PHI() {
  @return 1.61803398874;
}

@function int-exp($base, $exponent) {
  $result: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $result: $result * $base;
    }
  }
  @if $exponent < 1 {
    @for $i from 0 through abs($exponent) {
      $result: $result / $base;
    }
  }
  @return $result;
}

@function ceil-to($number, $precision) {
  $precision: int-exp(10, $precision);
  @return ceil($number * $precision) / $precision;
}

@function floor-to($number, $precision) {
  $precision: int-exp(10, $precision);
  @return floor($number * $precision) / $precision;
}

@function round-to($number, $precision) {
  $precision: int-exp(10, $precision);
  @return round($number * $precision) / $precision;
}

.test {
  out: opposite(right top);
  out: opposite(right, top bottom);
  out: has-unit(4rem, px);
  out: has-unit(4rem, rem);
  out: has-unit(4rem);
  out: max(1rem, 5rem);
  out: min(1rem, 5rem);
  out: limit(8rem, 1rem, 5rem);
  out: limit(-3rem, 1rem, 5rem);
  out: floor-to(5.226, 1);
  out: ceil-to(5.226, 1);
  out: round-to(5.226, 1);
}