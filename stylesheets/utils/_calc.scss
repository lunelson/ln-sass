// CALC functions

// @function is-zero($n) {
//   @return if(type-of($n) == 'number', unitless($n) and $n == 0, false);
// }

// @function no-unit($n) {
//   @return if(type-of($n) == 'number', unitless($n), false);
// }

// @function zero-calc($value) {
//   @if $value == 0 { @return $value + '%'; }
//   @return $value;
// }

@function pre-calc($value){
  @if not $value{
    @return 0%;
  } @else if no-unit($value) {
    @return $value + 'rem';
  } @else if type-of($value) == 'string' {
    $is-calc: str-index($value, 'calc') == 1;
    $start: str-index($value, '(');
    $end: str-last-index($value, ')');
    @if $is-calc and $start and $end {
      @return unquote(str-slice($value, $start, $end));
    } @else {
      @return unquote('(#{$value})');
    }
  } @else {
    @return unquote('#{$value}');
  }
}

// // re-calc... ?
// @function re-calc($calc1, $calc2, $op: '+'){
//   @return unquote('calc(#{pre-calc($calc1)} #{$op} #{pre-calc($calc2)})');
// }

// add/sub -- both args can be calc()
@function add-calc($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @return unquote('calc(#{pre-calc($calc1)} + #{pre-calc($calc2)})');
}
@function sub-calc($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @return unquote('calc(#{pre-calc($calc1)} - #{pre-calc($calc2)})');
}

// mul/div -- second arg must be number
@function mul-calc($calc, $n){
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @return unquote('calc(#{pre-calc($calc)} * #{$n})');
}
@function div-calc($calc, $n){
  @if $n == 0 { @error 'div-calc: attempt to divide by zero'; }
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @return unquote('calc(#{pre-calc($calc)} / #{$n})');
}
