//                     _ _                          _ _
//                    | (_)                        (_) |
//  _ __ ___   ___  __| |_  __ _ ______ _   _ _ __  _| |_ ___
// | '_ ` _ \ / _ \/ _` | |/ _` |______| | | | '_ \| | __/ __|
// | | | | | |  __/ (_| | | (_| |      | |_| | | | | | |_\__ \
// |_| |_| |_|\___|\__,_|_|\__,_|       \__,_|_| |_|_|\__|___/

///////////////
// FUNCTIONS //
///////////////

// PX TO REM wrt MEDIA
@function rem($values...) {
  @if $values == null { @return null; }
  @if type-of(nth($values, 1)) == 'list' { $values: nth($values, 1); }
  $size: strip(medium-value('font-size')); $result: ();
  @each $value in $values {
    @if index('rem' 'em', unit($value)) { $result: append($result, assert($value, rem), 'space'); }
    @else { $result: append($result, assert($value / $size, rem), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}

// REM TO PX wrt MEDIA
@function px($values...) {
  @if $values == null { @return null; }
  @if type-of(nth($values, 1)) == 'list' { $values: nth($values, 1); }
  $size: strip(medium-value('font-size')); $result: ();
  @each $value in $values {
    @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
    @else { $result: append($result, assert($value * $size, 'px'), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}

// RELATIVIZE wrt MEDIA
@function strip-lite($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }
@function relativize($val, $ref: 1) {
  $val-unit: unit($val); $ref-unit: unit($ref);
  $scale: medium-value('html-scale') or 1;
  // checks
  @if $ref-unit == '%' { @warn 'cannot relativize value to a relative reference; exiting'; @return $val; }
  @if index($ref-unit $val-unit, 'em') { @warn 'cannot reliably relativize to em reference; plz use rem'; }
  // corrections
  @if $val-unit == '%' { $ref: 100; }
  @else if $val-unit == 'px' and index('em' 'rem', $ref-unit) { $ref: strip-lite($ref) * 16 * $scale; }
  @else if $ref-unit == 'px' and index('em' 'rem', $val-unit) { $ref: strip-lite($ref) / 16 / $scale; }
  @else if not unitless($ref) { $ref: strip-lite($ref); }
  @return strip-lite($val) / $ref;
}

// VIEWPORT UNIT INTERPOLATION
// TODO: make the $unit argument functional
@function vx($base, $rate, $unit: 'vw') {
  $rel1: null;
  $brk1: null;
  $rel2: null;
  $brk2: null;

  @if type-of($base) == 'list' and length($base) > 1 {
    $brk1: nth($base, 2);
    $rel1: relativize(nth($base, 1), $brk1);

    @if type-of($rate) == 'list' {
      $brk2: relativize(nth($rate, 2), $brk1) * $brk1;
      $rel2: relativize(nth($rate, 1), $brk1);
      $rate: ($rel2 - $rel1) * $brk1 / ($brk2 - $brk1) * 100;

    }
    $rate: strip-lite($rate);
    $base: ($rel1 - $rate/100) * $brk1;

  }
  $op: if($base < 0, '-', '+');
  @return calc(#{$rate * 1vw} #{$op} #{abs($base)});
}

// BETA
// @function vx($rate, $base: 0, $vunit: 1vw) {
//   $relbase1: null;
//   $break1: null;
//   $relbase2: null;
//   $break2: null;
//   @if type-of($base) == 'list' {
//     $break1: nth($base, 2);
//     // relativize base relative to break1
//     $relbase1: relativize(nth($base, 1), $break1);
//     @if type-of($rate) == 'list' {
//       // resolve break2 in units of break1
//       $break2: relativize(nth($rate, 2), $break1) * $break1;
//       // resolve base2 in units of break1
//       $relbase2: relativize(nth($rate, 1), $break1);
//       // resolve rate in units of break2-break1
//       $rate: ($relbase2 - $relbase1) * $break1 / ($break2 - $break1) * 100;
//     }
//     $rate: strip-alt($rate);
//     $base: ($relbase1 - $rate/100) * $break1;
//   }
//   @return calc(#{$rate * $vunit} + #{$base})
//   // @return '
//   //   base: #{$base},
//   //   rate: #{$rate},
//   //   break-1 #{$break1},
//   //   break-2: #{$break2}
//   // ';
// }

// @function vwx($rate, $base:0) { @return vx($rate, $base, 1vw); }
// @function vhx($rate, $base:0) { @return vx($rate, $base, 1vh); }