////////////////////
// media mixins 2 //
////////////////////

// single
@mixin medium($min, $max: null) {
  $prev-medium-key: $curr-medium-key;
  $curr-medium-key: $min !global;
  @media #{width-query($min, $max)} { @content }
  $curr-medium-key: $prev-medium-key !global;
}

// multiple
@mixin media-each($keys: map-keys($media), $add-head: true, $add-tail: true) {
  $set: range-pair-set($keys, $add-head, $add-tail);
  @if length($set) == 0 { @content; }
  @else {
    @each $pair in $set {
      @include medium($pair...) {
        @content;
      }
    }
  }
}

// multiple, for
@mixin media-for($props...) {
  @include media-each(media-for($props...)) {
    @content;
  }
}

// multiple, range (sliced)
@mixin media-range($start-key: null, $end-key: null) {
  $media-keys: map-keys($media);
  $media-length: length($media-keys);
  $start: if($start-key, (index($media-keys, $start-key) or 1), 1);
  $end: if($end-key, (index($media-keys, $end-key) or $media-length), $media-length);
  $range: slice($media-keys, $start, $end);
  $add-head: ($start-key or nth($media-keys, $start)) == first($media-keys);
  $add-tail: ($end-key or nth($media-keys, $end)) == last($media-keys);
  @include media-each($range, $add-head, $add-tail) {
    @content;
  }
}

// hidpi / retina query; should combine with media() via nesting
@mixin hidpi($ratio: $media-hd-ratio) {
  $n: nth($ratio, 1); $d: nth($ratio, 2);
  $ratio: ($n / $d);
  @media screen and
  (-webkit-min-device-pixel-ratio: $ratio),
  (min--moz-device-pixel-ratio: $ratio),
  (-o-min-device-pixel-ratio: #{$n}/#{$d}),
  (min-device-pixel-ratio: $ratio),
  (min-resolution: $ratio * 96dpi),
  (min-resolution: $ratio * 1dppx) {
    @content;
  }
}
// alias
@mixin hd($args...) { @include hidpi($args...) { @content; } }

/////////////////////
// media mixins v3 //
/////////////////////

@mixin m($min, $max: null) {
  $prev-medium-key: $curr-medium-key;
  $curr-medium-key: $min !global;
  @media #{width-query($min, $max)} { @content }
  $curr-medium-key: $prev-medium-key !global;
}

@mixin mm-at($keys: map-keys($media), $head: true, $tail: true) {
  $pair-set: range-pair-set($keys, $head, $tail);
  @if length($pair-set) == 0 { @content; }
  @else {
    @each $pair in $pair-set {
      @include m($pair...) {
        @content;
      }
    }
  }
}

@mixin mm-for($props...) {
  @include mm-at(media-for($props...)) {
    @content;
  }
}

@mixin mm($lo: map-keys($media), $hi: null) {
  @if type-of($lo) == 'list' {
    @include mm-at($lo) { @content; }
  } @else {
    $media-keys: map-keys($media);
    $media-length: length($media-keys);
    $start: if($lo, (index($media-keys, $lo) or 1), 1);
    $end: if($hi, (index($media-keys, $hi) or $media-length), $media-length);
    $range: slice($media-keys, $start, $end);
    $head: ($lo or nth($media-keys, $start)) == first($media-keys);
    $tail: ($hi or nth($media-keys, $end)) == last($media-keys);
    @include mm-at($range, $head, $tail) { @content; }
  }
}