/////////////
// LN-GRID //
/////////////

// setup-mixin
@mixin grid-setup() {
  $margin-x: get($base-data, 'margin-x');
  @if $force-rems { $margin-x: rem($margin-x); }

  .col {
    float: left;
    width: 100%;
    padding-left: $margin-x / 2;
    padding-right: $margin-x / 2;
    &.alpha { padding-left: 0; }
    &.omega { padding-right: 0; }
  }
  .row {
    @include clearfix();
    margin-left: - $margin-x / 2;
    margin-right: - $margin-x / 2;
  }
  .wrap, [class*="wrap--"] {
    @include clearfix();
    margin-left: auto;
    margin-right: auto;
  }

  @each $query-alias in $query-aliases {
    $margin-x: query-spec-value('margin-x', $query-alias);
    @if $margin-x {
      @include query($query-alias) {
        @if $force-rems { $margin-x: rem($margin-x); }
        .col {
          padding-left: $margin-x / 2;
          padding-right: $margin-x / 2;
        }
        .row {
          margin-left: - $margin-x / 2;
          margin-right: - $margin-x / 2;
        }
      }
    }
  }
}

// column sizing mixin
@mixin col-size($span, $offsets...) {
  $n: nth($span, 1); $d: nth($span, 2);
  width: $n / $d * 100%;
  @each $offset in $offsets {
    @if index('cycle' 'repeat', $offset) {
      &:nth-child(#{$d}n+1) { clear: left; }
    } @else {
      $dir: nth($offset, 1); $o: nth($offset, 2);
      @if length($offset) > 2 { $d: nth($offset, 3); }
      @if $o == out {
        margin-#{get($opposite, $dir)}: 100%;
        margin-#{$dir}: $n / $d * -100%;
        margin-bottom: -100%; }
      @else { margin-#{$dir}: $o / $d * 100%; }
    }
  }
}

// row sizing mixin
@mixin row-size($cols: false) {
  @if $cols {
    &::before {
      content: '#{$cols} .col';
      display: none;
    }
  }
}
