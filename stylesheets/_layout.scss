
// layout fundaments
$layout-grid-float: left !default; // right | left | false
$layout-wrap-alignment: false !default; // right | left | false

@mixin parse-layout($output: true){

  @if $output {

    $margin-x: 2rem;
    $margin-y: 2rem;
    $body-right: 2rem;
    $body-left: 2rem;

    // get dimensions from '$base' if it exists
    @if variable-exists('base') {
      $margin-x: get($base, 'margin-x');
      $margin-y: get($base, 'margin-y');
      $body-right: get($base, 'body-right');
      $body-left: get($base, 'body-left');
    }

    // SPREAD, WRAP, GRID, CELL
    %spread, .spread, [class*='spread--'], [l='spread'] {
      padding-left: $body-left;
      padding-right: $body-right;
    }
    %wrap, .wrap, [class*='wrap--'], [l='wrap'] {
      margin-left: auto;
      margin-right: auto;
    }
    %section, .section, [class*='section--'], [l='section'] {
      padding-top: $margin-y / 2;
      padding-bottom: $margin-y / 2;
    }
    %grid, .grid, [class*='grid--'], [l='grid'] {
      width: calc(100% + #{$margin-x});
      margin-left: $margin-x / -2;
      margin-right: $margin-x / -2;
    }
    %cell, .cell, [class*='cell--'], [l='cell'] {
      display: block; float: left;
      width: 100%;
      padding-left: $margin-x / 2;
      padding-right: $margin-x / 2;
    }

    @if variable-exists('media') {

      @each $alias, $medium in $media {
        $margin-x: get($medium, 'margin-x');
        $margin-y: get($medium, 'margin-y');
        $body-right: get($medium, 'body-right');
        $body-left: get($medium, 'body-left');

        @include medium($alias) {

          $orig: medium-orig();

          // SPREAD
          %spread, .spread, [class*='spread--'], [l='spread'] {
            @if map-has-key($orig, 'body-left') { padding-left: $body-left; }
            @if map-has-key($orig, 'body-right') { padding-right: $body-right; }
          }

          // SECTION
          @if map-has-key($orig, 'margin-y') {
            %section, .section, [class*='section--'], [l='section'] {
              padding-top: $margin-y / 2;
              padding-bottom: $margin-y / 2;
            }
          }

          // WRAP
          $keys: map-keys($media); $wrap-each-to: (); $wrap-each-from: ();
          @each $alias in slice($keys, 1, index($keys, $alias)) {
            $wrap-each-from: append($wrap-each-from, unquote('.wrap--each_from--#{$alias}'), 'comma');
          }
          @each $alias in slice($keys, index($keys, $alias), length($keys)) {
            $wrap-each-to: append($wrap-each-to, unquote('.wrap--each_to--#{$alias}'), 'comma');
          }
          .wrap--#{$alias} { max-width: medium-value('content-width', $alias); }
          .wrap--each, #{$wrap-each-from}, #{$wrap-each-to} { max-width: medium-value('content-width'); }

          // GRID, CELL
          @if map-has-key($orig, 'margin-x') {
            %grid, .grid, [class*='grid--'], [l='grid'] {
              width: calc(100% + #{$margin-x});
              margin-left: $margin-x / -2;
              margin-right: $margin-x / -2;
            }
            %cell, .cell, [class*='cell--'], [l='cell'] {
              padding-left: $margin-x / 2;
              padding-right: $margin-x / 2;
            }
          }
        }
      }
    }
  }

}
