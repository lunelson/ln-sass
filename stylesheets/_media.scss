//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

/////////////
// GLOBALS //
/////////////

$base: () !default;

$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;

$base-orig: ();
$media-orig: ();

/////////////////
// SETUP MIXIN //
/////////////////

@mixin parse-media($output: true) {

  // backup and merge against defaults
  $base-orig: $base;

  $base: map-merge((
      font-size: 16px,
      line-height: 1.5,
      font-size-mod: 1.5,
      margin-x: 1rem,
      margin-x-mod: 2,
      margin-y: 1rem,
      margin-y-mod: 2,
      page-top: 1rem,
      page-right: 1rem,
      page-bottom: 1rem,
      page-left: 1rem,
    ), $base);

  // correct for font-size and line-height units/non-units
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
  // $font-size: assert($font-size, rem);
  $html-scale: strip($font-size / 16px);

  // .. and for pixel-united other values
  $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
  }

  // merge it all back to default
  $base: map-merge($base, $corrected-values);

  @if $output {

    /////////////////////
    // default-medium //
    /////////////////////

    // JSON format string output for pickup in JS

    $medium-key-list: ();
    @each $key in map-keys($media) {
      $medium-key-list: append($medium-key-list, quote($key), 'comma');
    }

    body::before {
      width: 0;
      height: 0;
      display: block;
      overflow: hidden;
      content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
    }

    // nb: some approaches recommend using html instead of head here, and then resetting real font-family on body
    head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }

    .util--medium { width: 0; transition: width 1ms; }

    // styles

    html { font-size: assert(map-get($base, 'html-scale'), em); }
    body { line-height: map-get($base, 'line-height');
      // padding-top: map-get($base, 'page-top');
      // padding-bottom: map-get($base, 'page-bottom');
    }
  }

  //////////////
  // media //
  //////////////

  // backup data first
  $media-orig: $media;

  // TODO: add a conditional re-assignment here, rather than the default thing above

  @if $media != () {

    // maintain a reference-medium upon which to merge each medium in media
    $reference-medium: $base;

    // collect and sort the breakpoint media
    $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');

    @each $medium-alias, $medium in $sorted-media {

      // merge medium to reference
      $reference-medium: map-merge($reference-medium, $medium);

      // correct for font-size and line-height units/non-units
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
      // $font-size: assert($font-size, rem);
      $html-scale: strip($font-size / 16px);

      // ..and for pixel-united other values
      $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); }
      }
      // merge corrections back to reference
      $reference-medium: map-merge($reference-medium, $corrected-values);

      // merge some additions to reference
      $body-width: assert(map-get($reference-medium, 'breakpoint') / $html-scale, rem);
      $content-width: $body-width - (map-get($reference-medium, 'page-left') + map-get($reference-medium, 'page-right'));
      $reference-medium: map-merge($reference-medium, ('body-width': $body-width, 'content-width': $content-width));

      // merge reference back to master
      $media: map-merge($media, ($medium-alias: $reference-medium));

      @if $output {
        $font-size: map-get($medium, 'font-size');
        $line-height: map-get($medium, 'line-height');
        // $page-top: map-get($medium, 'page-top');
        // $page-bottom: map-get($medium, 'page-bottom');

        @include medium($medium-alias) {

          body::before { content: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }

          .util--medium { width: index(map-keys($media), $medium-alias) * 1px; }

          // output CSS if spec'd by user

          @if $font-size { html { font-size: assert(map-get($reference-medium, 'html-scale'), em); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
          // @if $page-top { body { margin-top: map-get($reference-medium, 'page-top'); } }
          // @if $page-bottom { body { margin-bottom: map-get($reference-medium, 'page-bottom'); } }

        }
      }
    }
  }
}

//                     _ _                    _   _ _
//                    | (_)                  | | (_) |
//  _ __ ___   ___  __| |_  __ _ ______ _   _| |_ _| |
// | '_ ` _ \ / _ \/ _` | |/ _` |______| | | | __| | |
// | | | | | |  __/ (_| | | (_| |      | |_| | |_| | |
// |_| |_| |_|\___|\__,_|_|\__,_|       \__,_|\__|_|_|

/////////////
// GLOBALS //
/////////////

$current-medium-alias: null;

///////////////
// FUNCTIONS //
///////////////

@function medium-value($key, $alias: $current-medium-alias) { @return map-get(medium($alias), $key); }
@function media-value($args...) { @return medium-value($args...); } // alias
@function m-value($args...) { @return medium-value($args...); } // alias

@function margin-x($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-x', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-x-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-x'), strip(medium-value('margin-x')));
}

@function margin-y($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-y', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-y-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-y'), strip(medium-value('margin-y')));
}

@function font-size($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('font-size', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('font-size-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, 1rem, strip(1rem));
}
// alias of above
@function size($args...) { @return font-size($args...); }

///////////////
// FUNCTIONS //
///////////////

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
// alias
@function m-string($args...) { @return medium-string($args...); }

// retrieve current width medium object
@function medium($alias: $current-medium-alias) {
  @if $alias { @return map-get($media, $alias); }
  @return $base;
}
// alias
@function m($args...) { @return medium($args...); }

// function to retrieve current medium-data-object based on $current-medium-alias
@function medium-orig($alias: $current-medium-alias) {
  @if $alias { @return map-get($media-orig, $alias); }
  @return $base-orig;
}
// alias
@function m-orig($args...) { @return medium-orig($args...); }

////////////
// MIXINS //
////////////

// mixin to output width media medium
@mixin medium($aliases...) {

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media #{medium-string($aliases...)} { @content }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin media($args...) { @include medium($args...) { @content; } }
@mixin m($args...) { @include medium($args...) { @content; } }

// default hd ratio
$medium-hd-ratio: (3,2);

// hd media query
@mixin hidpi($aliases...) {

  $n: nth($medium-hd-ratio, 1);
  $d: nth($medium-hd-ratio, 2);
  $ratio: $n/$d;

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media screen and
    (-webkit-min-device-pixel-ratio: $ratio),
    (min--moz-device-pixel-ratio: $ratio),
    (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    (min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi),
    (min-resolution: $ratio * 1dppx) {
    @content;
  }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}
// alias
@mixin hd($args...) { @include hidpi($args...) { @content; } }

// multi width medium -- combines both medium-each() and medium-for()
@mixin each-medium($options:()) {

  // get 'from', 'to' and 'for'
  $from: get($options, 'from');
  $to: get($options, 'to');
  $for: get($options, 'for');

  // correct 'for' options
  @if $for {
    @if contains($for, typo) { $for: join($for, margin-y line-height font-size-mod); }
    @if contains($for, margin-y) { $for: join($for, margin-y-mod); }
    // @if contains($for, font-size) { $for: join($for, font-size-mod); }
    @if contains($for, margin-x) { $for: join($for, margin-x-mod); }
  }

  // output the @content raw, if $from is null
  @if $from == null { @content; }

  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));

  // conditional per-medium actions
  @each $medium-alias in $sliced-aliases {
    $orig-keys: map-keys(medium-orig($medium-alias));
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any($orig-keys, $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}
// alias
@mixin all-media($args...) { @include each-medium($args...) { @content; } }
