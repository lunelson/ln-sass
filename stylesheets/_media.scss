@function one($unit) {
  $one: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
  @return map-get($one, $unit) or 1;
}

@function strip($value) { @return if(unitless($value), $value, $value / one(unit($value))); }
@function assert($value, $unit: '') { @return strip($value) * one($unit); }
@function strip-alt($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }

//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

$default-medium: (
  font-size: 16px,
  line-height: 1.5,
  margin-x: 1rem,
  margin-y: 1.5rem,
  page-top: 1rem,
  page-right: 1rem,
  page-bottom: 1rem,
  page-left: 1rem
) !default;

$media: (
  alpha: (min-width: 20em),
  beta: (min-width: 30em),
  gamma: (min-width: 48em),
  delta: (min-width: 64em),
  epsilon: (min-width: 80em)
) !default;

// backup maps
$media-orig: ();

// ==========================================================================
// parse-media()
// ==========================================================================

@mixin parse-media() {

  /////////////////////
  // default-medium //
  /////////////////////

  // control for non-pixel-united font-size value
  $html-scale: 1;
  $px-font-size: map-get($default-medium, 'font-size');
  @if unit($px-font-size) != 'px' { $html-scale: strip($px-font-size); $px-font-size: $px-font-size * 16px; }
  @else { $html-scale: $px-font-size / 16px; }

  // control for pixel-united other values
  $normalized-values: ('html-scale': $html-scale, 'font-size': $px-font-size);
  @each $prop, $value in map-remove($default-medium, 'font-size') {
    @if unit($value) == 'px' { $normalized-values: map-merge($normalized-values, ($prop: $value / $px-font-size * 1rem)); }
  }

  // merge it all back to default
  $default-medium: map-merge($default-medium, $normalized-values);

  //////////////
  // media //
  //////////////

  // backup data first
  $media-orig: $media;

  @if $media != () {

    // maintain a reference-medium upon which to merge each context in media
    $reference-medium: $default-medium;

    // collect and sort the min-width media
    $min-width-media: maps-sort(maps-collect($media, 'min-width'), 'min-width');

    @each $current-alias, $current-medium in $min-width-media {

      // merge context to reference
      $reference-medium: map-merge($reference-medium, $current-medium);

      // control for non-pixel-united font-size value
      $html-scale: 1;
      $px-font-size: map-get($reference-medium, 'font-size');
      @if unit($px-font-size) != 'px' { $html-scale: $px-font-size; $px-font-size: $px-font-size * 16px; }
      @else { $html-scale: $px-font-size / 16px; }

      // control for pixel-united other values
      $normalized-values: ('html-scale': $html-scale, 'font-size': $px-font-size);
      @each $prop, $value in map-remove($default-medium, 'font-size', 'min-width') {
        @if unit($value) == 'px' { $normalized-values: map-merge($normalized-values, ($prop: $value / $px-font-size * 1rem)); }
      }
      $reference-medium: map-merge($reference-medium, $normalized-values);

      // merge in content-width
      $reference-medium: map-merge($reference-medium, (
        'content-width': strip(map-get($reference-medium, 'min-width')) / $html-scale - map-get($reference-medium, 'page-left') - map-get($reference-medium, 'page-right')
      ));

      // map-merge it all back to media
      $media: map-merge($media, ($current-alias: $reference-medium));
    }
  }
}

// ==========================================================================
// media()
// ==========================================================================

@mixin media($output: true){

  @include parse-media();

  @if $output {

    /////////////////////
    // default-medium //
    /////////////////////

    // JSON format string output for pickup in JS

    body::before {
      display: block;
      width: 0;
      height: 0;
      overflow: hidden;
      content: '{ "current" : "default", "all": [#{map-keys($media)}] }';
    }
    head { font-family: '{ "current" : "default", "all": [#{map-keys($media)}] }'; }

    // styles

    html { font-size: percentage(get($default-medium, 'html-scale')); }

    body {
      line-height: get($default-medium, 'line-height');
      padding-top: get($default-medium, 'page-top');
      padding-bottom: get($default-medium, 'page-bottom');
    }

    //////////////
    // media //
    //////////////

    @each $current-alias, $current-medium in $media {

      $font-size: map-get($current-medium, 'font-size');
      $html-scale: map-get($current-medium, 'html-scale');
      $line-height: map-get($current-medium, 'line-height');
      $margin-x: map-get($current-medium, 'margin-x');
      $margin-y: map-get($current-medium, 'margin-y');
      $page-top: map-get($current-medium, 'page-top');
      $page-bottom: map-get($current-medium, 'page-bottom');

      @include context($current-alias) {

        // JSON format string output for pickup in JS

        body::before {
          display: block;
          width: 0;
          height: 0;
          overflow: hidden;
          content: '{ "current" : "#{$current-alias}", "all": [#{map-keys($media)}] }';
        }
        head { font-family: '{ "current" : "#{$current-alias}", "all": [#{map-keys($media)}] }'; }

        // output CSS if spec'd by user

        @if $font-size { html { font-size: percentage($html-scale); } }
        @if $line-height { body { line-height: $line-height; } }
        @if $page-top { body { margin-top: $page-top; } }
        @if $page-bottom { body { margin-bottom: $page-bottom; } }

      }
    }

    // add any additional content
    @content;
  }
}

//                  _            _                _   _ _
//                 | |          | |              | | (_) |
//   ___ ___  _ __ | |_ _____  _| |_ ______ _   _| |_ _| |
//  / __/ _ \| '_ \| __/ _ \ \/ / __|______| | | | __| | |
// | (_| (_) | | | | ||  __/>  <| |_       | |_| | |_| | |
//  \___\___/|_| |_|\__\___/_/\_\\__|       \__,_|\__|_|_|

// vars to hold current media
$current-medium-alias: null;

///////////////////
// WIDTH CONTEXTS //
///////////////////

// [width] context string function
@function context-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, min-width)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, min-width) - 0.001})', '');
}

// retrieve current width context object
@function get-medium($context-alias: $current-medium-alias) {
  $context: null;
  @if $context-alias { $context: get($media, $context-alias); }
  @return if($context, $context, $default-medium);
}

// function to retrieve current context-data-object based on $current-medium-alias
@function get-medium($context-alias: $current-medium-alias) {
  $context: null;
  @if $context-alias { $context: get($media-orig, $context-alias); }
  @return if($context, $context, $default-medium);
}

// function to retrieve value for current context
@function get-medium-value($key, $alias: $current-medium-alias) {
  @return get(get-medium($alias), $key);
}

// aliases
@function context-value($args...) { @return get-medium-value($args...); }
@function qval($args...) { @return get-medium-value($args...); }

// mixin to output width media context
@mixin context($aliases...) {

  // save the context (not really necessary cause there's no nesting)
  $context-temp: $current-medium-alias;

  // save current alias or at least the previous one if in max-width context
  // @if length($aliases) > 0 { $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2)); }
  // TODO: revert the line above, remove line below, when map-prev-key is implemented
  $current-medium-alias: nth($aliases, 1);

  // run the content in context
  @media #{context-string($aliases...)} { @content }

  // reset the context (no nesting; could just reset to null)
  $current-medium-alias: $context-temp;
}
