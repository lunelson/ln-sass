//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

/////////////
// GLOBALS //
/////////////

$base: () !default;

$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;

$base-orig: ();
$media-orig: ();

$media-transition-utility-class: '.u--media_trans' !default;
$media-current-alias: null;
$media-hd-ratio: 3 2 !default;


/////////////////
// SETUP MIXIN //
/////////////////

@mixin parse-media($output: true) {

  //////////
  // BASE //
  //////////

  // backup and merge against defaults
  $base-orig: $base;
  $base: map-merge((
      font-size: 16px,
      line-height: 1.5,
      font-size-mod: 1.5,
      margin-x: 1rem,
      margin-x-mod: 2,
      margin-y: 1rem,
      margin-y-mod: 2,
      page-top: 1rem,
      page-right: 1rem,
      page-bottom: 1rem,
      page-left: 1rem,
      typo-measure: 30,
      typo-col-ratio: 1
    ), $base);

  // correct for font-size and line-height units/non-units
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }

  // derive html-scale
  $html-scale: strip($font-size / 16px);

  // correct for other pixel-united values; merge back in
  $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); } }
  $base: map-merge($base, $corrected-values);

  // do output, if true
  @if $output {

    // simplistic JSON $media information
    @if $media != () {
      $medium-key-list: ();
      @each $key in map-keys($media) {
        $medium-key-list: append($medium-key-list, quote($key), 'comma'); }
      body::before {
        width: 0;
        height: 0;
        display: block;
        overflow: hidden;
        content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
      }
      // this is still best recommendation but there are other approaches
      head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }
      // dummy element to catch breakpoint transitions
      #{$media-transition-utility-class} { width: 0; transition: width 1ms; }
    }

    // styles
    html { font-size: assert(map-get($base, 'html-scale'), em); }
    body { line-height: map-get($base, 'line-height');
    }
  }

  ///////////
  // MEDIA //
  ///////////

  // backup data first
  $media-orig: $media;

  @if $media != () {

    // temp variable for recursive merging
    $reference-medium: $base;

    // collect and sort the breakpoint media
    // $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');
    // !!! above is obsolete, if we are now allowing typo-columns to retro-determine breakpoint

    @each $medium-alias, $medium in $media {

      // merge medium to reference
      $reference-medium: map-merge($reference-medium, $medium);

      // correct for font-size and line-height units/non-units
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) != 'px' { $font-size: strip($font-size) * 16px; }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }

      // get html-scale
      $html-scale: strip($font-size / 16px);

      // correct for other pixel-united values, merge back to reference
      $corrected-values: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-values: map-merge($corrected-values, ($key: $value / $font-size * 1rem)); } }
      $reference-medium: map-merge($reference-medium, $corrected-values);

      // solve breakpoint vs typo-col-ratio
      $page-x: map-get($reference-medium, 'page-right') + map-get($reference-medium, 'page-left');
      $typo-measure: map-get($reference-medium, 'typo-measure');
      $typo-col-ratio: map-get($medium, 'typo-col-ratio'); // spec medium only
      $breakpoint: map-get($reference-medium, 'breakpoint');
      @if $typo-col-ratio and $typo-col-ratio < 1 {
        $margin-x: map-get($reference-medium, 'margin-x');
        $breakpoint: assert((($typo-measure) / $typo-col-ratio  - $margin-x + $page-x) * $html-scale, em); // correct ?
        $reference-medium: map-merge($reference-medium, ('breakpoint': $breakpoint))
      }

      // merge some additional props
      $body-width: assert($breakpoint / $html-scale, rem);
      $content-width: $body-width - $page-x;
      $reference-medium: map-merge($reference-medium, (
        'body-width': $body-width,
        'content-width': $content-width
      ));

      // merge reference back to master
      $media: map-merge($media, ($medium-alias: $reference-medium));

      @if $output {
        $font-size: map-get($medium, 'font-size');
        $line-height: map-get($medium, 'line-height');

        @include medium($medium-alias) {

          // simplistic JSON info
          body::before { content: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$medium-alias}", "all": ["#{$medium-key-list}"] }'; }
          // dummy element to track breakpoint transition
          #{$media-transition-utility-class} { width: index(map-keys($media), $medium-alias) * 1px; }

          // styles, if spec'd
          @if $typo-col-ratio { .l--col_typo { width: percentage($typo-col-ratio) !important; } }
          @if $font-size { html { font-size: assert(map-get($reference-medium, 'html-scale'), em); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
        }
      }
    }
  }

  // check if breakpoint order is okay; warn if not
  $keys-sorted: map-keys(maps-sort($media, 'breakpoint'));
  $keys-orig: map-keys($media-orig);
  @if $keys-sorted != $keys-orig { @warn 'breakpoints out of order; should be #{$keys-sorted}.'; }
}

///////////////
// FUNCTIONS //
///////////////

@function medium-value($key, $alias: $media-current-alias) { @return map-get(medium($alias), $key); }
@function media-value($args...) { @return medium-value($args...); } // alias
@function m-value($args...) { @return medium-value($args...); } // alias

@function margin-x($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-x', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-x-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-x'), strip(medium-value('margin-x')));
}

@function margin-y($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-y', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-y-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-y'), strip(medium-value('margin-y')));
}
// alias; default 'margin' is vertical
@function margin($args...){ @return margin-y($args...); }

@function font-size($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('font-size', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('font-size-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, 1rem, strip(1rem));
}
// alias of above
@function size($args...) { @return font-size($args...); }

///////////////
// FUNCTIONS //
///////////////

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
// alias
@function m-string($args...) { @return medium-string($args...); }

// retrieve current width medium object
@function medium($alias: $media-current-alias) {
  @if $alias { @return map-get($media, $alias); }
  @return $base;
}
// alias
@function m($args...) { @return medium($args...); }

// function to retrieve current medium-data-object based on $media-current-alias
@function medium-orig($alias: $media-current-alias) {
  @if $alias { @return map-get($media-orig, $alias); }
  @return $base-orig;
}
// alias
@function m-orig($args...) { @return medium-orig($args...); }

////////////
// MIXINS //
////////////

// SINGLE

@mixin media-single($args...) {
  // save alias reference; assign current
  $media-prev-alias: $media-current-alias;
  $media-current-alias: nth($args, 1) or map-prev-key($media, nth($args, 2));
  // run the content in medium
  @media #{medium-string($args...)} { @content }
  // reset the medium (no nesting; could just reset to null)
  $media-current-alias: $media-prev-alias;
}

// MULTIPLE

@mixin media-multiple($from: null, $to: null, $for: null) {
  // correct 'for' options
  @if $for {
    @if contains($for, typo) { $for: join($for, margin-y line-height font-size-mod); }
    @if contains($for, margin-y) { $for: join($for, margin-y-mod); }
    @if contains($for, font-size) { $for: join($for, font-size-mod); }
    @if contains($for, margin-x) { $for: join($for, margin-x-mod); }
  }
  // output the @content for $base medium if $from is null
  @if $from == null { @content; }
  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));
  // conditional per-medium actions

  @each $medium-alias in $sliced-aliases {
    $orig-keys: map-keys(medium-orig($medium-alias));
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any($orig-keys, $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}

// MASTER

@mixin media($args...) {
  $arg1: nth($args, 1);
  @if type-of($arg1) == 'map' { @include media-multiple($arg1...) { @content; } }
  @else { @include media-single($args...) { @content; } }
}

// alias
@mixin medium($args...){ @include media($args...) { @content; } }

// HIDPI

@mixin hidpi($ratio: $media-hd-ratio) {
  $n: nth($ratio, 1); $d: nth($ratio, 2);
  $ratio: ($n / $d);
  @media screen and
  (-webkit-min-device-pixel-ratio: $ratio),
  (min--moz-device-pixel-ratio: $ratio),
  (-o-min-device-pixel-ratio: #{$n}/#{$d}),
  (min-device-pixel-ratio: $ratio),
  (min-resolution: $ratio * 96dpi),
  (min-resolution: $ratio * 1dppx) {
    @content;
  }
}

// alias
@mixin hd($args...) { @include hidpi($args...) { @content; } }
