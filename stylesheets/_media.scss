//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

$base: () !default;
$base-orig: ();

$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;
$media-orig: ();

@mixin parse-media($output: true) {

  // backup and merge against defaults
  $base-orig: $base;

  $base: map-merge((
      font-size: 16px,
      font-size-mod: 1.5,
      line-height: 1.5,
      margin-x: 1rem,
      margin-x-mod: 1.5,
      margin-y: 1.5rem,
      margin-y-mod: 1.5,
      body-top: 1rem,
      body-right: 1rem,
      body-bottom: 1rem,
      body-left: 1rem,
    ), $base);

  // control for font-size and line-height units/non-units
  $html-scale: 1;
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) != 'px' {
    $html-scale: strip($font-size);
    $font-size: assert($font-size, px) * 16; }
  @else { $html-scale: $font-size / 16px; }
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }

  // control for pixel-united other values
  $corrected-medium: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-medium: map-merge($corrected-medium, ($key: $value / $font-size * 1rem)); }
  }

  // merge it all back to default
  $base: map-merge($base, $corrected-medium);

  @if $output {

    /////////////////////
    // default-medium //
    /////////////////////

    // JSON format string output for pickup in JS

    $medium-key-list: ();
    @each $key in map-keys($media) {
      $medium-key-list: append($medium-key-list, quote($key), 'comma');
    }

    body::before {
      width: 0;
      height: 0;
      display: block;
      overflow: hidden;
      content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
    }

    // nb: some approaches recommend using html instead of head here, and then resetting real font-family on body
    head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }

    .util--medium { width: 0; transition: width 1ms; }

    // styles

    html { font-size: percentage(map-get($base, 'html-scale')); }

    body {
      line-height: map-get($base, 'line-height');
      padding-top: map-get($base, 'body-top');
      padding-bottom: map-get($base, 'body-bottom');
    }
  }

  //////////////
  // media //
  //////////////

  // backup data first
  $media-orig: $media;

  // TODO: add a conditional re-assignment here, rather than the default thing above

  @if $media != () {

    // maintain a reference-medium upon which to merge each medium in media
    $reference-medium: $base;

    // collect and sort the breakpoint media
    $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');

    @each $current-alias, $current-medium in $sorted-media {

      // merge medium to reference
      $reference-medium: map-merge($reference-medium, $current-medium);

      // correct for font-size and line-height units/non-units
      $html-scale: 1;
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) != 'px' {
        $html-scale: strip($font-size);
        $font-size: assert($font-size, px) * 16; }
      @else { $html-scale: $font-size / 16px; }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
      // ..and for pixel-united other values
      $corrected-medium: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-medium: map-merge($corrected-medium, ($key: $value / $font-size * 1rem)); }
      }
      // merge corrections back to reference
      $reference-medium: map-merge($reference-medium, $corrected-medium);

      // merge some additions to reference
      $device-width: assert(map-get($reference-medium, 'breakpoint') / $html-scale, rem);
      $content-width: $device-width - (map-get($reference-medium, 'body-left') + map-get($reference-medium, 'body-right'));
      $reference-medium: map-merge($reference-medium, ('device-width': $device-width, 'content-width': $content-width));

      // merge reference back to master
      $media: map-merge($media, ($current-alias: $reference-medium));

      @if $output {
        $font-size: map-get($current-medium, 'font-size');
        $line-height: map-get($current-medium, 'line-height');
        $body-top: map-get($current-medium, 'body-top');
        $body-bottom: map-get($current-medium, 'body-bottom');

        @include medium($current-alias) {

          body::before { content: '{ "current" : "#{$current-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$current-alias}", "all": ["#{$medium-key-list}"] }'; }

          .util--medium { width: index(map-keys($media), $current-alias) * 1px; }

          // output CSS if spec'd by user

          @if $font-size { html { font-size: percentage(map-get($reference-medium, 'html-scale')); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
          @if $body-top { body { margin-top: map-get($reference-medium, 'body-top'); } }
          @if $body-bottom { body { margin-bottom: map-get($reference-medium, 'body-bottom'); } }

        }

        // add any additional content
        @content;
      }
    }
  }
}

