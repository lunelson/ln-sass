@function one($unit) { $one: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
  @return map-get($one, $unit) or 1; }
@function strip($value) { @return if(unitless($value), $value, $value / one(unit($value))); }
@function assert($value, $unit: '') { @return strip($value) * one($unit); }
@function strip-alt($value){ @return if(unitless($value), $value, $value / (0 * $value + 1)); }

//                     _ _
//                    | (_)
//  _ __ ___   ___  __| |_  __ _
// | '_ ` _ \ / _ \/ _` | |/ _` |
// | | | | | |  __/ (_| | | (_| |
// |_| |_| |_|\___|\__,_|_|\__,_|

$base: () !default;
$base-orig: ();

$media: (
  alpha: (breakpoint: 20em),
  beta: (breakpoint: 30em),
  gamma: (breakpoint: 48em),
  delta: (breakpoint: 64em),
  epsilon: (breakpoint: 80em)
) !default;
$media-orig: ();

@mixin parse-media($output: true) {

  // backup and merge against defaults
  $base-orig: $base;

  $base: map-merge((
      font-size: 16px,
      font-size-modulation: 1.5,
      line-height: 1.5,
      margin-x: 1rem,
      margin-x-modulation: 1.5,
      margin-y: 1.5rem,
      margin-y-modulation: 1.5,
      body-top: 1rem,
      body-right: 1rem,
      body-bottom: 1rem,
      body-left: 1rem,
    ), $base);

  // control for font-size and line-height units/non-units
  $html-scale: 1;
  $font-size: map-get($base, 'font-size');
  $line-height: map-get($base, 'line-height');
  @if unit($font-size) != 'px' {
    $html-scale: strip($font-size);
    $font-size: assert($font-size, px) * 16; }
  @else { $html-scale: $font-size / 16px; }
  @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }

  // control for pixel-united other values
  $corrected-medium: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
  @each $key, $value in map-remove($base, 'font-size', 'line-height') {
    @if unit($value) == 'px' { $corrected-medium: map-merge($corrected-medium, ($key: $value / $font-size * 1rem)); }
  }

  // merge it all back to default
  $base: map-merge($base, $corrected-medium);

  @if $output {

    /////////////////////
    // default-medium //
    /////////////////////

    // JSON format string output for pickup in JS

    $medium-key-list: ();
    @each $key in map-keys($media) {
      $medium-key-list: append($medium-key-list, quote($key), 'comma');
    }

    body::before {
      width: 0;
      height: 0;
      display: block;
      overflow: hidden;
      content: '{ "current" : "default", "all": ["#{$medium-key-list}"] }';
    }

    // nb: some approaches recommend using html instead of head here, and then resetting real font-family on body
    head { font-family: '{ "current" : "default", "all": ["#{$medium-key-list}"] }'; }

    .util--medium { width: 0; transition: width 1ms; }

    // styles

    html { font-size: percentage(map-get($base, 'html-scale')); }

    body {
      line-height: map-get($base, 'line-height');
      padding-top: map-get($base, 'body-top');
      padding-bottom: map-get($base, 'body-bottom');
    }
  }

  //////////////
  // media //
  //////////////

  // backup data first
  $media-orig: $media;

  // TODO: add a conditional re-assignment here, rather than the default thing above

  @if $media != () {

    // maintain a reference-medium upon which to merge each medium in media
    $reference-medium: $base;

    // collect and sort the breakpoint media
    $sorted-media: maps-sort(maps-collect($media, 'breakpoint'), 'breakpoint');

    @each $current-alias, $current-medium in $sorted-media {

      // merge medium to reference
      $reference-medium: map-merge($reference-medium, $current-medium);

      // correct for font-size and line-height units/non-units
      $html-scale: 1;
      $font-size: map-get($reference-medium, 'font-size');
      $line-height: map-get($reference-medium, 'line-height');
      @if unit($font-size) != 'px' {
        $html-scale: strip($font-size);
        $font-size: assert($font-size, px) * 16; }
      @else { $html-scale: $font-size / 16px; }
      @if unit($line-height) == 'px' { $line-height: $line-height / $font-size; }
      // ..and for pixel-united other values
      $corrected-medium: ('html-scale': $html-scale, 'font-size': $font-size, 'line-height': $line-height);
      @each $key, $value in map-remove($reference-medium, 'font-size', 'breakpoint', 'line-height') {
        @if unit($value) == 'px' { $corrected-medium: map-merge($corrected-medium, ($key: $value / $font-size * 1rem)); }
      }
      // merge corrections back to reference
      $reference-medium: map-merge($reference-medium, $corrected-medium);

      // merge some additions to reference
      $device-width: assert(map-get($reference-medium, 'breakpoint') / $html-scale, rem);
      $content-width: $device-width - (map-get($reference-medium, 'body-left') + map-get($reference-medium, 'body-right'));
      $reference-medium: map-merge($reference-medium, ('device-width': $device-width, 'content-width': $content-width));

      // merge reference back to master
      $media: map-merge($media, ($current-alias: $reference-medium));

      @if $output {
        $font-size: map-get($current-medium, 'font-size');
        $line-height: map-get($current-medium, 'line-height');
        $body-top: map-get($current-medium, 'body-top');
        $body-bottom: map-get($current-medium, 'body-bottom');

        @include medium($current-alias) {

          body::before { content: '{ "current" : "#{$current-alias}", "all": ["#{$medium-key-list}"] }'; }
          head { font-family: '{ "current" : "#{$current-alias}", "all": ["#{$medium-key-list}"] }'; }

          .util--medium { width: index(map-keys($media), $current-alias) * 1px; }

          // output CSS if spec'd by user

          @if $font-size { html { font-size: percentage(map-get($reference-medium, 'html-scale')); } }
          @if $line-height { body { line-height: map-get($reference-medium, 'line-height'); } }
          @if $body-top { body { margin-top: map-get($reference-medium, 'body-top'); } }
          @if $body-bottom { body { margin-bottom: map-get($reference-medium, 'body-bottom'); } }

        }

        // add any additional content
        @content;
      }
    }
  }
}

//                  _            _                _   _ _
//                 | |          | |              | | (_) |
//   ___ ___  _ __ | |_ _____  _| |_ ______ _   _| |_ _| |
//  / __/ _ \| '_ \| __/ _ \ \/ / __|______| | | | __| | |
// | (_| (_) | | | | ||  __/>  <| |_       | |_| | |_| | |
//  \___\___/|_| |_|\__\___/_/\_\\__|       \__,_|\__|_|_|

// ==========================================================================
// medium-related functions
// ==========================================================================

@function contains($list, $item) {
  @if index($list, $item) { @return true; }
  @return false;
}

@function contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }
  @return false;
}

$current-medium-alias: null;

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}

// retrieve current width medium object
@function medium($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media, $medium-alias); }
  @return if($medium, $medium, $base);
}

// function to retrieve current medium-data-object based on $current-medium-alias
@function medium-orig($medium-alias: $current-medium-alias) {
  $medium: null;
  @if $medium-alias { $medium: map-get($media-orig, $medium-alias); }
  @return if($medium, $medium, $base);
}

// function to retrieve value for current medium
@function medium-value($key, $alias: $current-medium-alias) {
  @return map-get(medium($alias), $key);
}

// ==========================================================================
// medium() mixins
// ==========================================================================

// mixin to output width media medium
@mixin medium($aliases...) {

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media #{medium-string($aliases...)} { @content }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}

// default hd ratio
$medium-hd-ratio: (3,2);

// hd media query
@mixin hd($aliases...) {

  $n: nth($medium-hd-ratio, 1);
  $d: nth($medium-hd-ratio, 2);
  $ratio: $n/$d;

  // save the medium
  $prev-medium-alias: $current-medium-alias;

  // get the current alias or at least the previous one if in max-width medium
  @if length($aliases) > 0 {
    $current-medium-alias: nth($aliases, 1) or map-prev-key($media, nth($aliases, 2));
  }

  // run the content in medium
  @media screen and
    (-webkit-min-device-pixel-ratio: $ratio),
    (min--moz-device-pixel-ratio: $ratio),
    (-o-min-device-pixel-ratio: #{$n}/#{$d}),
    (min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi),
    (min-resolution: $ratio * 1dppx) {
    @content;
  }

  // reset the medium (no nesting; could just reset to null)
  $current-medium-alias: $prev-medium-alias;
}

// multi width medium -- combines both medium-each() and medium-for()
@mixin each-medium($options:()) {

  // get 'from', 'to' and 'for'
  $from: get($options, 'from');
  $to: get($options, 'to');
  $for: get($options, 'for');

  // correct 'for' options
  @if contains(root base default, $from) { $from: null; }
  @if $for {
    @if contains($for, margin-y) { $for: append($for, margin-y-modulation)}
    @if contains($for, margin-x) { $for: append($for, margin-x-modulation)}
    @if contains($for, font-size) { $for: append($for, font-size-modulation); }
    @if contains($for, trim) { $for: append($for, line-height); }
    @if contains($for, line-height) { $for: append($for, trim); }
  }

  // output the @content raw, if $from is null
  @if not $from { @content; }

  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));

  // conditional per-medium actions
  @each $medium-alias in $sliced-aliases {
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any(keys(medium-orig($medium-alias)), $for) {
      @include medium($medium-alias) { @content; }
    }
  }
}


// ==========================================================================
// medium-related units
// ==========================================================================

// unit preference
$media-use-rems: true;

// function to convert value(s) to rem, following medium scale
@function rem($values...) {
  @if $values == null { @return null; }
  $scale: medium-value('html-scale');
  $unit: if($media-use-rems, 'rem', 'em');
  $result: ();
  @each $value in $values {
    @if index('rem' 'em', unit($value)) { $result: append($result, assert($value, $unit), 'space'); }
    @else { $result: append($result, assert($value / $scale / 16, $unit), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}

// function to convert value(s) to px, following medium scale
@function px($values...) {
  @if $values == null { @return null; }
  $scale: medium-value('html-scale');
  $result: ();
  @each $value in $values {
    @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
    @else { $result: append($result, assert($value * $scale * 16, 'px'), 'space'); }
  }
  @return if(length($result) > 1, $result, nth($result, 1));
}
