// @import "../_pkg/sass-master";
@import "../_sass-ln";

@mixin vx($base, $rate, $unit: 'vw') {

  $rel1: null;
  $brk1: null;
  $rel2: null;
  $brk2: null;

  @if type-of($base) == 'list' and length($base) > 1 {

    $brk1: nth($base, 2);

    brk1: $brk1;

    $rel1: relativize(nth($base, 1), $brk1);
    rel1: $rel1;

    @if type-of($rate) == 'list' {

      $brk2: relativize(nth($rate, 2), $brk1) * $brk1;
      brk2: $brk2;

      $rel2: relativize(nth($rate, 1), $brk1);
      rel2: $rel2;

      // resolve rate in units of break2-break1
      $rate: ($rel2 - $rel1) * $brk1 / ($brk2 - $brk1) * 100;

    }

    $rate: strip-lite($rate);
    $base: ($rel1 - $rate/100) * $brk1;

  }

  rate: $rate;
  base: $base;
  $op: if($base < 0, '-', '+');
  return: 'calc(#{$rate * 1vw} #{$op} #{abs($base)})'
}

@function vx($base, $rate, $unit: 'vw') {
  $rel1: null;
  $brk1: null;
  $rel2: null;
  $brk2: null;

  @if type-of($base) == 'list' and length($base) > 1 {

    $brk1: nth($base, 2);
    $rel1: relativize(nth($base, 1), $brk1);

    @if type-of($rate) == 'list' {

      $brk2: relativize(nth($rate, 2), $brk1) * $brk1;
      $rel2: relativize(nth($rate, 1), $brk1);
      $rate: ($rel2 - $rel1) * $brk1 / ($brk2 - $brk1) * 100;

    }

    $rate: strip-lite($rate);
    $base: ($rel1 - $rate/100) * $brk1;

  }

  $op: if($base < 0, '-', '+');
  @return calc(#{$rate * 1vw} #{$op} #{abs($base)});
}



//  _            _
// | |          | |
// | |_ ___  ___| |_
// | __/ _ \/ __| __|
// | ||  __/\__ \ |_
//  \__\___||___/\__|

.test1 {
  // out: relativize(2rem, 20rem);
  // out: relativize(1rem, 40rem);

  // @include vx(10px, 20);

  // @include vx(1rem 40rem, 2rem 70rem);
  out: vx(1rem 40rem, 2rem 70rem);
  out: vx(1rem 640px, 2rem 70rem);
  out: vx(0.5rem 30rem, 2.5);
}

