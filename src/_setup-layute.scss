@mixin setup-layute {

  svg {
    fill: inherit;
    stroke: inherit;
    stroke-width: inherit;
    // transform: inherit;
    // stroke: currentColor; // this technique will allow a second color
    // & { width: 100%; height: 100%; }
    &.icon {
      width: 1em;
      height: 1em;
      display: inline-block;
      vertical-align: middle;
      fill: currentColor;
      margin-right: 0.75em;
      position: relative;
      top: calc((1ex - 1em)/4);
    }
  }

  // IE fix for fluid resizing
  img.svg, object.svg { width: 100%; }

  span { position: relative; }

  /////////////
  // iscroll //
  /////////////

  .iscroll {
    position: absolute;
    left: 0; top: 0;
    width: 100vw;
    margin-right: calc(100% - 100vw);
    height: 100vh;
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
  }

  //////////
  // clip //
  //////////

  @include bemify('clip', false);
  .clip, %clip { @include clip; }
  .clip--circle { border-radius: 50%; }

  //////////
  // hide //
  //////////

  .hide, %hide { @include hide; }

  //////////
  // show //
  //////////

  .show, %show { @include show; }

  //////////
  // hold //
  //////////

  // TODO : resolve in terms of
  // hold--fit
  // hold--center
  // hold--cover
  //     object-fit
  // hold--contain
  //     object-fit
  @include bemify('hold', false);
  .hold, %hold { position: relative; }

  // .hold--abs, %hold--abs {
  //   @extend %hold;
  //   z-index: 0; // make sure container can clip
  //   & > *:not(picture),
  //   & > picture > img {
  //     z-index: 0; // make sure container can clip
  //     display: block;
  //     position: absolute;
  //     width: 100%;
  //     top: 50%; left: 50%;
  //     transform: translate(-50%, -50%);
  //   }
  //   & > iframe {
  //     z-index: 0; // make sure container can clip
  //     top: 0;
  //     left: 0;
  //     height: 100%;
  //     transform: none;
  //   }
  //   // & > picture {
  //   //   width: 100% !important;
  //   //   height: 100% !important;
  //   //   // position: relative;
  //   // }
  // }
  // .hold--bg[data-bg-size='cover'] { background-size: cover; }
  // .hold--bg[data-bg-size='contain'] { background-size: contain; }

  // .hold--cover {
  //   @extend %hold--abs;
  //   overflow: hidden;
  //   & > *:not(picture),
  //   & > picture > img {
  //     width: auto !important;
  //     height: auto !important;
  //     min-width: calc(100% + 2px);
  //     min-height: calc(100% + 2px);
  //     max-width: none;
  //     max-height: none;
  //   }
  // }
  // .hold--contain {
  //   @extend %hold--abs;
  //   & > *:not(picture),
  //   & > picture > img {
  //     width: auto !important;
  //     height: auto !important;
  //     min-width: none;
  //     min-height: none;
  //     max-width: 100%;
  //     max-height: 100%;
  //   }
  // }

  .hold--aspect {
    height: 0;
    overflow: hidden;
    padding: 0 0 100%;
    &>img, &>svg, &>object, &>iframe, &>video, &>picture {
      display: block;
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      &:not(img) {
        height: 100%;
      }
    }
  }

  //////////
  // FLEX //
  //////////
  /// NB flex-basis is buggy cross browser; better use 'auto' and set 'width' instead
  /// NB flex-shrink is buggy cross browser; better avoid and keep at 0

  .flex, %flex {
    @include flex();
  }

  .flex-y, %flex-y {
    @include flex-y();
  }

  // this is for flex aspect divs
  @include bemify('flex', false) {
    &:before {
      content: '';
      display: table; // non-inline display req'd for IE; block fails in FF
      flex: 0 0 0%; // explicit 0 basis unit req'd for IE
    }
  }

  /////////////
  // aspects //
  /////////////

  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );

  @each $n, $denoms in $aspects {
    @each $d in $denoms {

      $gcd: gcd($n,$d);
      $r: $n/$gcd;

      .flex--#{$n}-#{$d} {
        @if $r < $n { @extend .flex--#{$r}-#{$d/$gcd}; }
        @else { &:before { padding-bottom: $d/$n * 100%; } }
      }

      .hold--#{$n}-#{$d} {
        @if $r < $n { @extend .hold--#{$r}-#{$d/$gcd}; }
        @else { padding-bottom: $d/$n * 100%; }
      }
    }
  }

  //////////
  // TURN //
  //////////

  .turn, [class^="turn--"], [class*=" turn--"] {
    white-space: pre;
    position: absolute;
    top: 50%;
  }
  .turn, .turn--cw {
    transform-origin: left top;
    &.alignleft {
      left: 0;
      transform: rotate(90deg) translateY(-100%) translateX(-50%);
    }
    &.aligncenter {
      left: 50%;
      transform: rotate(90deg) translateY(-50%) translateX(-50%);
    }
    &.alignright {
      left: 100%;
      transform: rotate(90deg) translateX(-50%);
    }
  }
  .turn--ccw {
    transform-origin: right top;
    &.alignleft {
      right: 100%;
      transform: rotate(-90deg) translateX(50%);
    }
    &.aligncenter {
      right: 50%;
      transform: rotate(-90deg) translateY(-50%) translateX(50%);
    }
    &.alignright {
      right: 0;
      transform: rotate(-90deg) translateY(-100%) translateX(50%);
    }
  }

    /////////////
    // margins //
    /////////////

    // @include media((for: margin-y mults-y)) {

    //   @each $m, $mult in map-merge((base: 1), medium-value('mults-y')) {
    //     $margin-y: $mult * medium-value('margin-y');
    //     .sect#{multify($m)} { @extend .my#{multify($m)}; }
    //     .my#{multify($m)} { @extend .mt#{multify($m)}, .mb#{multify($m)}; }
    //     .mt#{multify($m)} { margin-top: $margin-y; }
    //     .mb#{multify($m)} { margin-bottom: $margin-y; }
    //   }
    // }

    // @include media((for: margin-x mults-x)) {

    //   @each $m, $mult in map-merge((base: 1), medium-value('mults-x')) {
    //     $margin-x: $mult * medium-value('margin-x');
    //     .mx#{multify($m)} { @extend .mr#{multify($m)}, .ml#{multify($m)}; }
    //     .mr#{multify($m)} { margin-right: $margin-x; }
    //     .ml#{multify($m)} { margin-left: $margin-x; }
    //   }
    // }

  // TODO: add layout classes
  // - posn // relative
  // - posn--f // fixed
  // - posn--f-...
  // - posn--a // absolute
  // - posn--a-...

}