//////////
// JSON //
//////////

@function _proof-quote($value) { @return '"#{$value}"'; }

@function _json-encode--bool($boolean) { @return $boolean; }

@function _json-encode--color($color) { @return _proof-quote($color); }

@function _json-encode--list($list) {
  $str: "";
  @each $item in $list { $str: $str + ', ' + json-encode($item); }
  @return '[' + str-slice($str, 3) + ']';
}

@function _json-encode--map($map) {
  $str: "";
  @each $key, $value in $map { $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value); }
  @return '{' + str-slice($str, 3) + '}';
}

@function _json-encode--null($null) { @return "null"; }

@function _json-encode--number($number) {
  @return if(unitless($number), $number, _proof-quote($number));
}

@function _json-encode--string($string) {
  @return _proof-quote($string);
}

@function json-encode($value) {
  $type: type-of($value);
  @if function_exists('_json-encode--#{$type}') { @return call('_json-encode--#{$type}', $value); }
  @error "Unknown type for #{$value} (#{$type}).";
}

@mixin json-content($json) {
  $json: json-encode($json);

  // All browsers except IE8-
  body::before {
    // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');
    content: $json;
    display: block;
    height: 0;
    overflow: hidden;
    width: 0;
  }

  // All browsers except Opera (Presto based)
  head {
    font-family: $json;
  }
}
