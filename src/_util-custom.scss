/////////////////
// BEM shit v1 //
/////////////////

// output string for mult-key $m
@function multify($m) { @return if($m=='base', '', '--#{$m}'); }

// output bem mod-base selector
@function baseify($base) { @return selector-parse('[class^="#{$base}--"], [class*=" #{$base}--"]'); }

/////////////////
// BEM shit v2 //
/////////////////

@function base-class($base) { @return selector-parse('.#{$base}, [class^="#{$base}--"], [class*=" #{$base}--"]'); }
@function mult-class($base, $m) { @return selector-parse(if($m=='base', '.#{$base}', '.#{$base}--#{$m}')); }

// establish attr selector-based extend class, for $base
// Sergey Zarouski technique; referenced by https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/
@mixin bemify($base, $loud: true) {
  @at-root { [class^="#{$base}--"], [class*=" #{$base}--"] {
    @if $loud { @extend .#{$base}; }
    @else { @extend %#{$base} !optional; }
    @content;
  } }
}

@function aspect-classes($str) {
  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );
  $classes: ();
  @each $n, $d-list in $aspects {
    @each $d in $d-list {
      $key: $n/$d;
      $val: map-get($classes, $key) or ();
      $val: append($val, '.#{$str}--#{$n}-#{$d}', 'comma');
      $classes: map-merge($classes, ($key: $val));
    }
  }
  @return $classes
}
