///////////////
// FUNCTIONS //
///////////////

@function medium-value($key, $alias: $media-current-alias) { @return if($alias, map-get(medium($alias), $key), map-get($base, $key)); }
@function media-value($args...) { @return medium-value($args...); } // alias
@function m-value($args...) { @return medium-value($args...); } // alias

@function margin-x($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-x', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-x-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-x'), strip(medium-value('margin-x')));
}

@function margin-y($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('margin-y', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('margin-y-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, medium-value('margin-y'), strip(medium-value('margin-y')));
}
@function margin($args...){ @return margin-y($args...); } // alias; default 'margin' is vertical

@function font-size($index: 0, $unit: true, $basis: 10) {
  @if type-of($index) == 'string' { @return medium-value('font-size', $index); }
  @if not unitless($index) { @return $index; }
  $mod: medium-value('font-size-mod'); $spread: ceil($basis/6);
  @return pow($mod, $index/$spread) * if($unit, 1rem, strip(1rem));
}
// alias of above
@function size($args...) { @return font-size($args...); }

///////////////
// FUNCTIONS //
///////////////

// [width] medium string function
@function medium-string($alias1: null, $alias2: null) {
  @return 'screen'
    + if($alias1, ' and (min-width: #{get($media, $alias1, breakpoint)})', '')
    + if($alias2, ' and (max-width: #{get($media, $alias2, breakpoint) - 0.001})', '');
}
// alias
@function m-string($args...) { @return medium-string($args...); }

// retrieve current width medium object
@function medium($alias: $media-current-alias) {
  @if $alias { @return map-get($media, $alias); }
  @return $base;
}
// alias
@function m($args...) { @return medium($args...); }

// function to retrieve current medium-data-object based on $media-current-alias
@function medium-orig($alias: $media-current-alias) {
  @if $alias { @return map-get($media-orig, $alias); }
  @return $base-orig;
}
// alias
@function m-orig($args...) { @return medium-orig($args...); }

////////////
// MIXINS //
////////////

// SINGLE

@mixin media-single($args...) {
  // save alias reference; assign current
  $media-prev-alias: $media-current-alias !global;
  $media-current-alias: nth($args, 1) or map-prev-key($media, nth($args, 2)) !global;
  // run the content in medium
  @media #{medium-string($args...)} { @content }
  // reset the medium (no nesting; could just reset to null)
  $media-current-alias: $media-prev-alias !global;
}

// MULTIPLE

@mixin media-multiple($from: null, $to: null, $for: null) {
  // correct 'for' options
  @if $for {
    @if contains($for, typo) { $for: join($for, margin-y line-height font-size-mod); }
    @if contains($for, margin-y) { $for: join($for, margin-y-mod); }
    @if contains($for, font-size) { $for: join($for, font-size-mod); }
    @if contains($for, margin-x) { $for: join($for, margin-x-mod); }
  }
  // output the @content for $base medium if $from is null
  @if $from == null { @content; }
  // determine other referenced media
  $medium-aliases: map-keys($media);
  $sliced-aliases: slice($medium-aliases,
      if($from, index($medium-aliases, $from), 1),
      if($to, index($medium-aliases, $to) - 1, length($medium-aliases)));
  // conditional per-medium actions

  @each $medium-alias in $sliced-aliases {
    $orig-keys: map-keys(medium-orig($medium-alias));
    @if not $for { @include medium($medium-alias) { @content; } }
    @else if contains-any($orig-keys, $for) {
      @include media-single($medium-alias) { @content; }
    }
  }
}

// MASTER

@mixin media($args...) {
  $arg1: nth($args, 1);
  @if type-of($arg1) == 'map' { @include media-multiple($arg1...) { @content; } }
  @else { @include media-single($args...) { @content; } }
}

// alias
@mixin medium($args...){ @include media($args...) { @content; } }

// HIDPI

@mixin hidpi($ratio: $media-hd-ratio) {
  $n: nth($ratio, 1); $d: nth($ratio, 2);
  $ratio: ($n / $d);
  @media screen and
  (-webkit-min-device-pixel-ratio: $ratio),
  (min--moz-device-pixel-ratio: $ratio),
  (-o-min-device-pixel-ratio: #{$n}/#{$d}),
  (min-device-pixel-ratio: $ratio),
  (min-resolution: $ratio * 96dpi),
  (min-resolution: $ratio * 1dppx) {
    @content;
  }
}

// alias
@mixin hd($args...) { @include hidpi($args...) { @content; } }
