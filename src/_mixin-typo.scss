///////////
// fonts //
///////////

/* TODO
  - update to use a global $font-folder; pass $file as 'subfolder/filename.ext'
  - update to include woff2
  - update to use local ?
  - update to allow specifying which types are available: eot, svg, woff, woff2, ttf
*/
@mixin font-face($family, $dir, $file, $style, $weight) {
  @font-face {
    font-family: $family;
    font-style: $style;
    font-weight: $weight; // this should be both word and number values
    src: url('#{$dir}#{$file}.eot'); // IE9 Compat Modes
    src: url('#{$dir}#{$file}.eot?#iefix') format('embedded-opentype'),
       url('#{$dir}#{$file}.svg##{$file}') format('svg');
       //url('#{$dir}#{$file}.woff') format('woff'),
       // url('#{$dir}#{$file}.svg##{$file}') format('svg'),
       // url('#{$dir}#{$file}.ttf') format('truetype');
  }
}

//////////////////
// stack / typo //
//////////////////

$curr-stack-sel: null !default;

@mixin stack($m: $curr-mult-y-key, $s: $curr-size-key, $l: $curr-line-key, $f: $curr-font-key, $typo: true) {

  $prev-mult-y-key: $curr-mult-y-key;
  $prev-size-key: $curr-size-key;
  $prev-line-key: $curr-line-key;
  $prev-font-key: $curr-font-key;

  $curr-mult-y-key: $m !global;
  $curr-size-key: $s !global;
  $curr-line-key: $l !global;
  $curr-font-key: $f !global;

  $curr-stack-sel: & !global;

  // stack styles
  padding-top: 0.1px;
  padding-bottom: 0.1px;
  & > * { margin-top: 0; margin-bottom: 0; }
  & > * + * { margin-top: margin-y($m); }

  // content
  @content;

  $curr-stack-sel: null !global;

  $curr-mult-y-key: $prev-mult-y-key !global;
  $curr-size-key: $prev-size-key !global;
  $curr-line-key: $prev-line-key !global;
  $curr-font-key: $prev-font-key !global;
}

@mixin typo-item($s: $curr-size-key, $l: $curr-line-key, $f: $curr-font-key) {

  $same-size-key: ($s == $curr-size-key);
  $same-line-key: ($l == $curr-line-key);
  $same-font-key: ($f == $curr-font-key);

  $prev-size-key: $curr-size-key;
  $prev-line-key: $curr-line-key;
  $prev-font-key: $curr-font-key;

  $curr-size-key: $s !global;
  $curr-line-key: $l !global;
  $curr-font-key: $f !global;

  $size: size($s);
  $line: line($l);
  $font: if($f, font($f), null);

  $font-family: if($font, map-get($font, 'font-family'), null);
  $size-adjust: if($font, map-get($font, 'size-adjust') or 1, 1);

  font-family: $font-family;
  line-height: $line * medium-value('line-height');

  // if in a stack
  @if $curr-stack-sel {
    font-size: unit-assert($size, em) * $size-adjust;
    @at-root #{sel-insert-parents('','>')} {
      margin-top: typo-em-margin(0);
      margin-bottom: typo-em-margin(0);
      @include adjacent-to('*') { margin-top: typo-ex-margin(); }
      @content;
    }
  }

  // if not in a stack
  @else {
    font-size: unit-assert($size, rem) * $size-adjust;
    @at-root #{sel-insert-parents('.stack' '%stack')} {
      font-size: unit-assert($size, em) * $size-adjust;
    }
    @at-root #{sel-insert-parents('.stack' '%stack', '>')} {
      margin-top: typo-em-margin(0);
      margin-bottom: typo-em-margin(0);
    }
    @each $m, $mult in map-merge((base: 1), medium-value('mults-y') or medium-value('mults')) {
      $stack-sel: '.stack#{multify($m)}';
      @at-root #{sel-insert-parents($stack-sel,'>')} {
        @at-root #{sel-insert-parents('*', '+')} {
          margin-top: typo-ex-margin(if($m=='base',1,$m));
        }
        @content;
      }
    }
  }

  $curr-size-key: $prev-size-key !global;
  $curr-line-key: $prev-line-key !global;
  $curr-font-key: $prev-font-key !global;
}
