@mixin init-media-alt($out: true) {

  $medium-default: (
    // bases
    font-size: 16px,
    line-height: 1.5,
    margin-x: 2rem,
    margin-y: 2rem,
    outer-top: 2rem,
    outer-right: 2rem,
    outer-bottom: 2rem,
    outer-left: 2rem,
    type-width: 30rem,
    type-columns: 4,
    // mults and mods
    lines: (),
    sizes: (),
    mults-x: (),
    mults-y: (),
    size-mod: 1.5,
    mult-mod: 1.5
  );

  //////////
  // base //
  //////////

  // backup $base as spec'd
  $base-orig: $base !global;

  // merge spec'd $base against defaults, and normalize
  $base: normalize-medium(map-merge($medium-default, $base)) !global;

  @if $out {
    // base styles
    html { font-size: unit-assert(map-get($base, 'html-scale'), em); }
    body { line-height: map-get($base, 'line-height'); }
  }

  ///////////
  // media //
  ///////////

  // sorting by column-count won't necessarily work well
  // $media: maps-sort($media, 'column-count') !global;

  // backup $media
  $media-orig: $media !global;

  // temp for recursive merging
  $reference: $base;

  @each $m, $medium in $media {

    // merge current medium against ref-medium, normalize primitive values
    $reference: normalize-medium(map-merge($reference, $medium));

    // get and merge sub-maps
    $sizes: map-merge(map-get($reference, 'sizes'), map-get($medium, 'sizes') or ());
    $lines: map-merge(map-get($reference, 'lines'), map-get($medium, 'lines') or ());
    $mults-x: map-merge(map-get($reference, 'mults-x'), map-get($medium, 'mults-x') or ());
    $mults-y: map-merge(map-get($reference, 'mults-y'), map-get($medium, 'mults-y') or ());

    // calc and merge additional props
    $font-size: map-get($reference, 'font-size');
    $margin-x: map-get($reference, 'margin-x');
    $outer-x: map-get($reference, 'outer-right') + map-get($reference, 'outer-left');

    $type-width: map-get($reference, 'type-width');
    $type-columns: map-get($reference, 'type-columns');
    $grid-columns: map-get($reference, 'grid-columns');
    $type-vs-grid: $type-columns/$grid-columns;

    $content-width: ($type-width + $margin-x) / $type-vs-grid - $margin-x;
    $outer-width: $content-width + $outer-x;
    $breakpoint: unit-assert($outer-width * map-get($reference, 'html-scale'), em);

    $reference: map-merge($reference, (
      'content-width': $content-width,
      'breakpoint': $breakpoint,
      'sizes': $sizes,
      'lines': $lines,
      'mults-x': $mults-x,
      'mults-y': $mults-y,
    ));

    // merge reference back to master
    $media: map-merge($media, ($m: $reference)) !global;

    // styles, if they were are in $media-orig and if $out is true
    @media (min-width: #{$breakpoint}) {
      @if $out and map-has-key($medium, 'font-size') { html { font-size: unit-assert(map-get($reference, 'html-scale'), em); } }
      @if $out and map-has-key($medium, 'line-height') { body { line-height: map-get($reference, 'line-height'); } }
    }
  }

  // output global sass as json for js parsing
  $globals: if(variable-exists('globals'), $globals, ());
  @include json-content(map-merge($globals, (media: $media)));
}
