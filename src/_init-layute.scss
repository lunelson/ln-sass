@mixin init-lutils {

  //////////
  // clip //
  //////////

  .clip, #{baseify('clip')} { @include clip; }
  .clip--circle { border-radius: 50%; }

  //////////
  // hide //
  //////////

  .hide { @include hide; }

  //////////
  // show //
  //////////

  .show { @include show; }

  //////////
  // hold //
  //////////

  .hold, #{baseify('hold')} { position: relative; }

  .hold--abs, .hold--center, .hold--aspect {
    z-index: 0; // make sure container can clip
    & > * {
      display: block;
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      &:not(img) {
        height: 100%;
      }
    }
  }

  .hold--aspect {
    height: 0;
    overflow: hidden;
    padding: 0 0 100%;
  }

  .hold--center {
    & > * {
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
    }
  }

  [data-bg-size='cover'] { background-size: cover; }
  [data-bg-size='contain'] { background-size: contain; }

  @each $ratio, $class in aspect-classes('hold') { #{$class} { padding-bottom: 1/$ratio * 100%; } }

  //////////
  // FLEX //
  //////////
  /// NB flex-basis is buggy cross browser; better use 'auto' and set 'width' instead
  /// NB flex-shrink is buggy cross browser; better avoid and keep at 0

  .flex {
    @include flex();
  }

  .flex-y {
    @include flex-y();
  }

  // this is for flex aspect divs
  #{baseify('flex')} {
    &:before {
      content: '';
      display: table; // non-inline display req'd for IE; block fails in FF
      flex: 0 0 0%; // explicit 0 basis unit req'd for IE
    }
  }

  @each $ratio, $class in aspect-classes('flex') { #{$class}:before { padding-bottom: 1/$ratio * 100%; } }

  /////////////
  // iscroll //
  /////////////

  .iscroll {
    position: absolute;
    left: 0; top: 0;
    width: 100vw;
    margin-right: calc(100% - 100vw);
    height: 100vh;
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
  }

  //////////
  // TURN //
  //////////

  .turn, [class^="turn--"], [class*=" turn--"] {
    white-space: pre;
    position: absolute;
    top: 50%;
  }
  .turn, .turn--cw {
    transform-origin: left top;
    &.alignleft {
      left: 0;
      transform: rotate(90deg) translateY(-100%) translateX(-50%);
    }
    &.aligncenter {
      left: 50%;
      transform: rotate(90deg) translateY(-50%) translateX(-50%);
    }
    &.alignright {
      left: 100%;
      transform: rotate(90deg) translateX(-50%);
    }
  }
  .turn--ccw {
    transform-origin: right top;
    &.alignleft {
      right: 100%;
      transform: rotate(-90deg) translateX(50%);
    }
    &.aligncenter {
      right: 50%;
      transform: rotate(-90deg) translateY(-50%) translateX(50%);
    }
    &.alignright {
      right: 0;
      transform: rotate(-90deg) translateY(-100%) translateX(50%);
    }
  }

    /////////////
    // margins //
    /////////////

    // @include media-for(margin-y mults-y) {

    //   @each $m, $mult in map-merge((base: 1), medium-value('mults-y')) {
    //     $margin-y: $mult * medium-value('margin-y');
    //     .sect#{multify($m)} { @extend .my#{multify($m)}; }
    //     .my#{multify($m)} { @extend .mt#{multify($m)}, .mb#{multify($m)}; }
    //     .mt#{multify($m)} { margin-top: $margin-y; }
    //     .mb#{multify($m)} { margin-bottom: $margin-y; }
    //   }
    // }

    // @include media-for(margin-x mults-x) {

    //   @each $m, $mult in map-merge((base: 1), medium-value('mults-x')) {
    //     $margin-x: $mult * medium-value('margin-x');
    //     .mx#{multify($m)} { @extend .mr#{multify($m)}, .ml#{multify($m)}; }
    //     .mr#{multify($m)} { margin-right: $margin-x; }
    //     .ml#{multify($m)} { margin-left: $margin-x; }
    //   }
    // }

  // TODO: add layout classes
  // - posn // relative
  // - posn--f // fixed
  // - posn--f-...
  // - posn--a // absolute
  // - posn--a-...

}